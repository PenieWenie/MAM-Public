comment "V1.7.16";
comment "Change Log:
    More Structure
    togglable Popups
    No multiple welcome messages, but u can still update the menu
    Quality of life changes(You cant run some functions in SP)
    Vehicels now wont spawn in you
    Fixed crash server
    change your and other players list nickname
    secret things
    fixed issue with player view 
    first time opend, make a menu choose ur own name
    Fixed bug (JIP Issiues)
    Added protection (Get trolled zach :D)
    Added fade in 
    And many other things :D
Todo:
    expanded playerlist 
    a own debug console 
Other Comment:
MAS = SAM bcause EZM blocked the tag   
";
if (isNil "usersWhoAreSuperMenuWhitelistedreallySuperlol") then {
    usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool = ["Comment: @ the lovely ZAM people","76561198045496731", "76561198358820610", "76561199487929575"];
    publicVariable "usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool";
    usersWhoAreSuperMenuWhitelistedreallySuperlol = [
        "ID", "Name",
        "76561198973138476", "Samu",
        "76561199595078682", "Samu",
        "76561199153584559", "Penie",
        "76561199511546073", "Penie",
        "76561199526402000", "Penie",
        "76561198275789075", "Mastar",
        "76561197983672104", "Joker",
        "_SP_PLAYER_", "Admin"
    ];
    publicVariable 'usersWhoAreSuperMenuWhitelistedreallySuperlol';
};
usersOnKicklistUID = [];
publicVariable "usersOnKicklistUID";
private _uid = getPlayerUID player;
private _name = name player;
if !(_uid in usersWhoAreSuperMenuWhitelistedreallySuperlol) then {
    usersWhoAreSuperMenuWhitelistedreallySuperlol pushBackUnique _uid;
    publicVariable "usersWhoAreSuperMenuWhitelistedreallySuperlol";
    usersWhoAreSuperMenuWhitelistedreallySuperlol pushBackUnique _name;
    publicVariable "usersWhoAreSuperMenuWhitelistedreallySuperlol";
};
MASMainMenu = {
    MAS_TheMenuGUI = {
        disableSerialization;
        with uiNamespace do {
            if (isNull (finddisplay 312)) then {
                MASDisplay = (findDisplay 46) createDisplay "RscDisplayEmpty";
            } else {
                MASDisplay = (findDisplay 312) createDisplay "RscDisplayEmpty";
            };
            _fadeTime = 0.5;
            showChat true;
            MAS_MenuBase = MASDisplay ctrlCreate["RscFrame", 1800];
            MAS_MenuBase ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.247 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.484 * safezoneH];
            MAS_MenuBase ctrlSetFade 1;
            MAS_MenuBase ctrlCommit 0;
            MAS_MenuBase ctrlSetFade 0;
            MAS_MenuBase ctrlCommit _fadeTime;

            MAS_base = MASDisplay ctrlCreate["RscPicture", 1200];
            MAS_base ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
            MAS_base ctrlSetPosition[0.309219 * safezoneW + safezoneX, 0.247 * safezoneH + safezoneY, 0.381563 * safezoneW, 0.484 * safezoneH];
            MAS_base ctrlSetFade 1;
            MAS_base ctrlCommit 0;
            MAS_base ctrlSetFade 0;
            MAS_base ctrlCommit _fadeTime;
            MAS_Head = MASDisplay ctrlCreate["RscStructuredText", 1000];
            MAS_Head ctrlSetText "[SAM]";
            MAS_Head ctrlSetPosition[0.608281 * safezoneW + safezoneX, 0.709 * safezoneH + safezoneY, 0.0309375 * safezoneW, 0.033 * safezoneH];
            MAS_Head ctrlSetTextColor[1, 0, 0, 1];
            MAS_Head ctrlSetFade 1;
            MAS_Head ctrlCommit 0;
            MAS_Head ctrlSetFade 0;
            MAS_Head ctrlCommit 1;
            MAS_HeadTxt = MASDisplay ctrlCreate["RscStructuredText", 1001];
            MAS_HeadTxt ctrlSetText "Private Menu";
            MAS_HeadTxt ctrlSetPosition[0.634062 * safezoneW + safezoneX, 0.709 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.033 * safezoneH];
            MAS_HeadTxt ctrlSetTextColor[1, 1, 1, 1];
            MAS_HeadTxt ctrlSetFade 1;
            MAS_HeadTxt ctrlCommit 0;
            MAS_HeadTxt ctrlSetFade 0;
            MAS_HeadTxt ctrlCommit 1;
            MAS_HeadUtilTxt = MASDisplay ctrlCreate["RscText", 1002];
            MAS_HeadUtilTxt ctrlSetText "Utilities";
            MAS_HeadUtilTxt ctrlSetPosition[0.345312 * safezoneW + safezoneX, 0.324 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.033 * safezoneH];
            MAS_HeadUtilTxt ctrlSetFontHeight 0.05;
            MAS_HeadUtilTxt ctrlSetFade 1;
            MAS_HeadUtilTxt ctrlCommit 0;
            MAS_HeadUtilTxt ctrlSetFade 0;
            MAS_HeadUtilTxt ctrlCommit _fadeTime;
            RscText_1020 = MASDisplay ctrlCreate["RscStructuredText", 1020];
            RscText_1020 ctrlSetPosition[-0.000156274 * safezoneW + safezoneX, -0.00599999 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.022 * safezoneH];
            RscText_1020 ctrlCommit 0;
            RscText_1020 ctrlAddEventHandler["ButtonClick", {
                if ((getPlayerUID player) in ["_SP_PLAYER_", "76561198973138476", "76561199595078682","76561199153584559","76561199511546073","76561199526402000"]) then {
                    [] spawn Da_Funny;
                };
            }];
            MAS_WelcomeTxt = MASDisplay ctrlCreate["RscText", 1003];
            private _systemTime = systemTime;
            private _hour = _systemTime select 3;
            private _username = player getVariable["menuName", name player];
            if (_hour >= 4 and _hour <= 10) then {
                MAS_WelcomeTxt ctrlSetText format["Good Morning, %1", _userName];
                MAS_TimePic = MASDisplay ctrlCreate["RscPicture", 1207];
                MAS_TimePic ctrlSetText "a3\missions_f_oldman\data\img\weathermanager\weather_day_0_ca.paa";
                MAS_TimePic ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.033 * safezoneH];
                MAS_TimePic ctrlSetFade 1;
                MAS_TimePic ctrlCommit 0;
                MAS_TimePic ctrlSetFade 0;
                MAS_TimePic ctrlCommit 1;
            };
            if (_hour <= 13 and _hour >= 11) then {
                MAS_WelcomeTxt ctrlSetText format["Good Noon, %1", _userName];
                MAS_TimePic = MASDisplay ctrlCreate["RscPicture", 1207];
                MAS_TimePic ctrlSetText "a3\missions_f_oldman\data\img\weathermanager\weather_day_0_ca.paa";
                MAS_TimePic ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.033 * safezoneH];
                MAS_TimePic ctrlSetFade 1;
                MAS_TimePic ctrlCommit 0;
                MAS_TimePic ctrlSetFade 0;
                MAS_TimePic ctrlCommit 1;
            };
            if (_hour <= 17 and _hour >= 14) then {
                MAS_WelcomeTxt ctrlSetText format["Good Afternoon, %1", _userName];
                MAS_TimePic = MASDisplay ctrlCreate["RscPicture", 1207];
                MAS_TimePic ctrlSetText "a3\missions_f_oldman\data\img\weathermanager\weather_day_0_ca.paa";
                MAS_TimePic ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.033 * safezoneH];
                MAS_TimePic ctrlSetFade 1;
                MAS_TimePic ctrlCommit 0;
                MAS_TimePic ctrlSetFade 0;
                MAS_TimePic ctrlCommit 1;
            };
            if (_hour >= 18 or _hour <= 0) then {
                MAS_WelcomeTxt ctrlSetText format["Good Evening, %1", _userName];
                MAS_TimePic = MASDisplay ctrlCreate["RscPicture", 1207];
                MAS_TimePic ctrlSetText "a3\missions_f_oldman\data\img\weathermanager\weather_night_0_ca.paa";
                MAS_TimePic ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.033 * safezoneH];
                MAS_TimePic ctrlSetFade 1;
                MAS_TimePic ctrlCommit 0;
                MAS_TimePic ctrlSetFade 0;
                MAS_TimePic ctrlCommit 1;
            };
            if (_hour >= 1 and _hour <= 4) then {
                MAS_WelcomeTxt ctrlSetText format["Why are you up so late, %1?", _userName];
                MAS_TimePic = MASDisplay ctrlCreate["RscPicture", 1207];
                MAS_TimePic ctrlSetText "a3\missions_f_oldman\data\img\weathermanager\weather_night_0_ca.paa";
                MAS_TimePic ctrlSetPosition[0.319531 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.020625 * safezoneW, 0.033 * safezoneH];
                MAS_TimePic ctrlSetFade 1;
                MAS_TimePic ctrlCommit 0;
                MAS_TimePic ctrlSetFade 0;
                MAS_TimePic ctrlCommit 1;
            };
            MAS_WelcomeTxt ctrlSetPosition[0.340156 * safezoneW + safezoneX, 0.28 * safezoneH + safezoneY, 0.345469 * safezoneW, 0.033 * safezoneH];
            MAS_WelcomeTxt ctrlSetTextColor[0.7, 0.3, 0.3, 1];
            MAS_WelcomeTxt ctrlSetFont "PuristaSemiBold";
            MAS_WelcomeTxt ctrlSetFontHeight 0.06;
            MAS_WelcomeTxt ctrlSetFade 1;
            MAS_WelcomeTxt ctrlCommit 0;
            MAS_WelcomeTxt ctrlSetFade 0;
            MAS_WelcomeTxt ctrlCommit 1;
            MAS_SpL = MASDisplay ctrlCreate["RscPicture", 1201];
            MAS_SpL ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            MAS_SpL ctrlSetPosition[0.4175 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.004125 * safezoneW, 0.385 * safezoneH];
            MAS_SpL ctrlSetTextColor[0, 0, 0, 0.8];
            MAS_SpL ctrlSetFade 1;
            MAS_SpL ctrlCommit 0;
            MAS_SpL ctrlSetFade 0;
            MAS_SpL ctrlCommit 1;
            MAS_SpR = MASDisplay ctrlCreate["RscPicture", 1202];
            MAS_SpR ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            MAS_SpR ctrlSetPosition[0.577344 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.004125 * safezoneW, 0.385 * safezoneH];
            MAS_SpR ctrlSetTextColor[0, 0, 0, 0.8];
            MAS_SpR ctrlSetFade 1;
            MAS_SpR ctrlCommit 0;
            MAS_SpR ctrlSetFade 0;
            MAS_SpR ctrlCommit 1;
            RscPicture_1208 = MASDisplay ctrlCreate["RscPicture", 1208];
            RscPicture_1208 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1208 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.698 * safezoneH + safezoneY, 0.37125 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1208 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1208 ctrlSetFade 1;
            RscPicture_1208 ctrlCommit 0;
            RscPicture_1208 ctrlSetFade 0;
            RscPicture_1208 ctrlCommit 1;
            RscPicture_1209 = MASDisplay ctrlCreate["RscPicture", 1209];
            RscPicture_1209 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1209 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.313 * safezoneH + safezoneY, 0.37125 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1209 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1209 ctrlSetFade 1;
            RscPicture_1209 ctrlCommit 0;
            RscPicture_1209 ctrlSetFade 0;
            RscPicture_1209 ctrlCommit 1;
            MAS_Head2Txt = MASDisplay ctrlCreate["RscText", 1004];
            MAS_Head2Txt ctrlSetText "Soft Player-Settings";
            MAS_Head2Txt ctrlSetPosition[0.453594 * safezoneW + safezoneX, 0.324 * safezoneH + safezoneY, 0.0979687 * safezoneW, 0.033 * safezoneH];
            MAS_Head2Txt ctrlSetFontHeight 0.05;
            MAS_Head2Txt ctrlSetFade 1;
            MAS_Head2Txt ctrlCommit 0;
            MAS_Head2Txt ctrlSetFade 0;
            MAS_Head2Txt ctrlCommit _fadeTime;
            MAS_Head3Txt = MASDisplay ctrlCreate["RscText", 1005];
            MAS_Head3Txt ctrlSetText "Player-List";
            MAS_Head3Txt ctrlSetPosition[0.603125 * safezoneW + safezoneX, 0.324 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.033 * safezoneH];
            MAS_Head3Txt ctrlSetFontHeight 0.05;
            MAS_Head3Txt ctrlSetFade 1;
            MAS_Head3Txt ctrlCommit 0;
            MAS_Head3Txt ctrlSetFade 0;
            MAS_Head3Txt ctrlCommit _fadeTime;
            MAS_UtilBtn1 = MASDisplay ctrlCreate["RscButton", 1600];
            _gm = player getVariable["MAS_GM", false];
            if (_gm) then {
                MAS_UtilBtn1 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn1 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn1 ctrlSetText "GM";
            MAS_UtilBtn1 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn1 ctrlSetTooltip "God Mode";
            MAS_UtilBtn1 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_GM;
            }];
            MAS_UtilBtn1 ctrlSetFade 1;
            MAS_UtilBtn1 ctrlCommit 0;
            MAS_UtilBtn1 ctrlSetFade 0;
            MAS_UtilBtn1 ctrlCommit _fadeTime;
            MAS_UtilBtn2 = MASDisplay ctrlCreate["RscButton", 1601];
            _vgm = player getVariable["MAS_VGM", false];
            if (_vgm) then {
                MAS_UtilBtn2 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn2 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn2 ctrlSetText "VGM";
            MAS_UtilBtn2 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn2 ctrlSetTooltip "Vehicle Godmode";
            MAS_UtilBtn2 ctrlAddEventHandler["ButtonClick", {
                if (vehicle player != player) then {
                    [] spawn MAS_fnc_VGM;
                } else {
                    systemChat '[SAM] - You are not in a vehicle';
                    playSound 'addItemFailed';
                };
            }];
            MAS_UtilBtn2 ctrlSetFade 1;
            MAS_UtilBtn2 ctrlCommit 0;
            MAS_UtilBtn2 ctrlSetFade 0;
            MAS_UtilBtn2 ctrlCommit _fadeTime;
            MAS_UtilBtn4 = MASDisplay ctrlCreate["RscButton", 1602];
            MAS_UtilBtn4 ctrlSetText "Edit Vehicle";
            MAS_UtilBtn4 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn4 ctrlSetTooltip "Edit current vehicle";
            MAS_UtilBtn4 ctrlAddEventHandler["ButtonClick", {
                if (vehicle player != player) then {
                    [vehicle player] spawn MAS_fnc_EditVeh;
                    with uiNamespace do {
                        MASDisplay closeDisplay 0;
                    };
                } else {
                    systemChat '[SAM] - You cannot edit yourself!';
                    playSound 'addItemFailed';
                };
            }];
            MAS_UtilBtn4 ctrlSetFade 1;
            MAS_UtilBtn4 ctrlCommit 0;
            MAS_UtilBtn4 ctrlSetFade 0;
            MAS_UtilBtn4 ctrlCommit _fadeTime;
            MAS_UtilBtn6 = MASDisplay ctrlCreate["RscButton", 1603];
            MAS_UtilBtn6 ctrlSetText "RRR";
            MAS_UtilBtn6 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.434 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn6 ctrlSetTooltip "Repair & Rearm & Refuel";
            MAS_UtilBtn6 ctrlAddEventHandler["ButtonClick", {
                if (vehicle player != player) then {
                    [vehicle player] spawn MAS_fnc_RRR;
                    with uiNamespace do {
                        MASDisplay closeDisplay 0;
                    };
                } else {
                    systemChat '[SAM] - You are not in a vehicle!';
                    playSound 'addItemFailed';
                };
            }];
            MAS_UtilBtn6 ctrlSetFade 1;
            MAS_UtilBtn6 ctrlCommit 0;
            MAS_UtilBtn6 ctrlSetFade 0;
            MAS_UtilBtn6 ctrlCommit _fadeTime;
            MAS_UtilBtn8 = MASDisplay ctrlCreate["RscButton", 1604];
            _del = player getVariable["isDelEnabled", false];
            if (_del) then {
                MAS_UtilBtn8 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn8 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn8 ctrlSetText "T Delete";
            MAS_UtilBtn8 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn8 ctrlSetTooltip "Toggles Delete mode";
            MAS_UtilBtn8 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_DelToggle;
            }];
            MAS_UtilBtn8 ctrlSetFade 1;
            MAS_UtilBtn8 ctrlCommit 0;
            MAS_UtilBtn8 ctrlSetFade 0;
            MAS_UtilBtn8 ctrlCommit _fadeTime;
            MAS_UtilBtn10 = MASDisplay ctrlCreate["RscButton", 1605];
            _aimbot = player getVariable["aimbotOn", false];
            if (_aimbot) then {
                MAS_UtilBtn10 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn10 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn10 ctrlSetText "T Aimbot";
            MAS_UtilBtn10 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.5 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn10 ctrlSetTooltip "Toggles aimbot with default/custom settings";
            MAS_UtilBtn10 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_AimToggle;
            }];
            MAS_UtilBtn10 ctrlSetFade 1;
            MAS_UtilBtn10 ctrlCommit 0;
            MAS_UtilBtn10 ctrlSetFade 0;
            MAS_UtilBtn10 ctrlCommit _fadeTime;
            MAS_UtilBtn12 = MASDisplay ctrlCreate["RscButton", 1606];
            MAS_UtilBtn12 ctrlSetText "O Arsenal";
            MAS_UtilBtn12 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.533 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn12 ctrlSetTooltip "Opens arsenal";
            MAS_UtilBtn12 ctrlAddEventHandler["ButtonClick", {
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
                []
                spawn MAS_fnc_OArsenal;
            }];
            MAS_UtilBtn12 ctrlSetFade 1;
            MAS_UtilBtn12 ctrlCommit 0;
            MAS_UtilBtn12 ctrlSetFade 0;
            MAS_UtilBtn12 ctrlCommit _fadeTime;
            MAS_UtilBtn14 = MASDisplay ctrlCreate["RscButton", 1607];
            MAS_UtilBtn14 ctrlSetText "Join Group";
            MAS_UtilBtn14 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn14 ctrlSetTooltip "Join selected players group";
            MAS_UtilBtn14 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_Group;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_UtilBtn14 ctrlSetFade 1;
            MAS_UtilBtn14 ctrlCommit 0;
            MAS_UtilBtn14 ctrlSetFade 0;
            MAS_UtilBtn14 ctrlCommit _fadeTime;
            MAS_UtilBtn18 = MASDisplay ctrlCreate["RscButton", 1609];
            MAS_UtilBtn18 ctrlSetText "Clutter S";
            MAS_UtilBtn18 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn18 ctrlSetTooltip "Open cleanup GUI";
            MAS_UtilBtn18 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_ClutterChoose;
            }];
            MAS_UtilBtn18 ctrlSetFade 1;
            MAS_UtilBtn18 ctrlCommit 0;
            MAS_UtilBtn18 ctrlSetFade 0;
            MAS_UtilBtn18 ctrlCommit _fadeTime;
            MAS_UtilBtn20 = MASDisplay ctrlCreate["RscButton", 1610];
            MAS_UtilBtn20 ctrlSetText "Zeus";
            MAS_UtilBtn20 ctrlSetPosition[0.365937 * safezoneW + safezoneX, 0.654 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
            MAS_UtilBtn20 ctrlSetTextColor[1, 0, 0, 1];
            MAS_UtilBtn20 ctrlSetTooltip "Gives you zeus";
            MAS_UtilBtn20 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_GiveZeus;
                    with uiNamespace do {
                        MASDisplay closeDisplay 0;
                    };
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_UtilBtn20 ctrlSetFade 1;
            MAS_UtilBtn20 ctrlCommit 0;
            MAS_UtilBtn20 ctrlSetFade 0;
            MAS_UtilBtn20 ctrlCommit _fadeTime;
            MAS_UtilBtn3 = MASDisplay ctrlCreate["RscButton", 1611];
            MAS_UtilBtn3 ctrlSetText "Heal";
            MAS_UtilBtn3 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn3 ctrlSetTooltip "Heal your self";
            MAS_UtilBtn3 ctrlAddEventHandler["ButtonClick", {
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
                []
                spawn MAS_fnc_Heal;
            }];
            MAS_UtilBtn3 ctrlSetFade 1;
            MAS_UtilBtn3 ctrlCommit 0;
            MAS_UtilBtn3 ctrlSetFade 0;
            MAS_UtilBtn3 ctrlCommit _fadeTime;
            MAS_UtilBtn5 = MASDisplay ctrlCreate["RscButton", 1612];
            MAS_UtilBtn5 ctrlSetText "Unflip";
            MAS_UtilBtn5 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.434 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn5 ctrlSetTooltip "Unflips players vehicle";
            MAS_UtilBtn5 ctrlAddEventHandler["ButtonClick", {
                if (vehicle player != player) then {
                    [vehicle player] spawn MAS_fnc_Unflip;
                    with uiNamespace do {
                        MASDisplay closeDisplay 0;
                    };
                } else {
                    systemChat '[SAM] - You cannot unflip yourself!';
                    playSound 'addItemFailed';
                };
            }];
            MAS_UtilBtn5 ctrlSetFade 1;
            MAS_UtilBtn5 ctrlCommit 0;
            MAS_UtilBtn5 ctrlSetFade 0;
            MAS_UtilBtn5 ctrlCommit _fadeTime;
            MAS_UtilBtn7 = MASDisplay ctrlCreate["RscButton", 1613];
            _kill = player getVariable["isKillinEnabled", false];
            if (_kill) then {
                MAS_UtilBtn7 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn7 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn7 ctrlSetText "T Kill";
            MAS_UtilBtn7 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn7 ctrlSetTooltip "Toggle Kill mode";
            MAS_UtilBtn7 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_KillToggle;
            }];
            MAS_UtilBtn7 ctrlSetFade 1;
            MAS_UtilBtn7 ctrlCommit 0;
            MAS_UtilBtn7 ctrlSetFade 0;
            MAS_UtilBtn7 ctrlCommit _fadeTime;
            MAS_UtilBtn9 = MASDisplay ctrlCreate["RscButton", 1614];
            _fly = player getVariable["isFlyEnabled", false];
            if (_fly) then {
                MAS_UtilBtn9 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn9 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn9 ctrlSetText "T Fly";
            MAS_UtilBtn9 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.5 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn9 ctrlSetTooltip "Toggles fly mode";
            MAS_UtilBtn9 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_FlyToggle;
            }];
            MAS_UtilBtn9 ctrlSetFade 1;
            MAS_UtilBtn9 ctrlCommit 0;
            MAS_UtilBtn9 ctrlSetFade 0;
            MAS_UtilBtn9 ctrlCommit _fadeTime;
            MAS_UtilBtn11 = MASDisplay ctrlCreate["RscButton", 1615];
            _sta = player getVariable["isNoStam", false];
            if (_sta) then {
                MAS_UtilBtn11 ctrlSetTextColor[0, 1, 0, 1];
            } else {
                MAS_UtilBtn11 ctrlSetTextColor[1, 1, 1, 1];
            };
            MAS_UtilBtn11 ctrlSetText "T Stamina";
            MAS_UtilBtn11 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.533 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn11 ctrlSetTooltip "Toggle Stamina";
            MAS_UtilBtn11 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_Stamina;
            }];
            MAS_UtilBtn11 ctrlSetFade 1;
            MAS_UtilBtn11 ctrlCommit 0;
            MAS_UtilBtn11 ctrlSetFade 0;
            MAS_UtilBtn11 ctrlCommit _fadeTime;
            MAS_UtilBtn13 = MASDisplay ctrlCreate["RscButton", 1616];
            MAS_UtilBtn13 ctrlSetText "M Teleport";
            MAS_UtilBtn13 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn13 ctrlSetTooltip "When pressing ALT + TAB on  the map it will teleport there";
            MAS_UtilBtn13 ctrlAddEventHandler["ButtonClick", {
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
                []
                spawn MAS_fnc_TeleportMap;
            }];
            MAS_UtilBtn13 ctrlSetFade 1;
            MAS_UtilBtn13 ctrlCommit 0;
            MAS_UtilBtn13 ctrlSetFade 0;
            MAS_UtilBtn13 ctrlCommit _fadeTime;
            MAS_UtilBtn17 = MASDisplay ctrlCreate["RscButton", 1618];
            MAS_UtilBtn17 ctrlSetText "Change Side";
            MAS_UtilBtn17 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
            MAS_UtilBtn17 ctrlSetTooltip "Change your side";
            MAS_UtilBtn17 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_ChangeSideChoose;
            }];
            MAS_UtilBtn17 ctrlSetFade 1;
            MAS_UtilBtn17 ctrlCommit 0;
            MAS_UtilBtn17 ctrlSetFade 0;
            MAS_UtilBtn17 ctrlCommit _fadeTime;
            MAS_UtilBtn19 = MASDisplay ctrlCreate["RscButton", 1619];
            MAS_UtilBtn19 ctrlSetText "Crash Server";
            MAS_UtilBtn19 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.654 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
            MAS_UtilBtn19 ctrlSetTextColor[1, 0, 0, 1];
            MAS_UtilBtn19 ctrlSetTooltip "If continued, crashes server";
            MAS_UtilBtn19 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fncCrashConfirm;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_Btn_Nickname = MASDisplay ctrlCreate["RscStructuredText", 1636];
            MAS_Btn_Nickname ctrlSetText "Change Nickname";
            MAS_Btn_Nickname ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.709 * safezoneH + safezoneY, 0.0979687 * safezoneW, 0.044 * safezoneH];
            MAS_Btn_Nickname ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_ChangeUrName;
            }];
            MAS_Btn_Nickname ctrlSetFade 1;
            MAS_Btn_Nickname ctrlCommit 0;
            MAS_Btn_Nickname ctrlSetFade 0;
            MAS_Btn_Nickname ctrlCommit 1;
            MAS_UtilBtn19 ctrlSetFade 1;
            MAS_UtilBtn19 ctrlCommit 0;
            MAS_UtilBtn19 ctrlSetFade 0;
            MAS_UtilBtn19 ctrlCommit _fadeTime;
            RscPicture_1203 = MASDisplay ctrlCreate["RscPicture", 1203];
            RscPicture_1203 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1203 ctrlSetPosition[0.5825 * safezoneW + safezoneX, 0.511 * safezoneH + safezoneY, 0.103125 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1203 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1203 ctrlSetFade 1;
            RscPicture_1203 ctrlCommit 0;
            RscPicture_1203 ctrlSetFade 0;
            RscPicture_1203 ctrlCommit 1;
            MAS_PlayerListBox = MASDisplay ctrlCreate["RscListbox", 1500];
            MAS_PlayerListBox ctrlSetPosition[0.577344 * safezoneW + safezoneX, 0.357 * safezoneH + safezoneY, 0.108281 * safezoneW, 0.154 * safezoneH];
            MAS_PlayerListBox ctrlAddEventHandler["LBDblClick", {
                if ((getPlayerUID player) in ["_SP_PLAYER_", "76561198973138476", "76561199595078682","76561199153584559","76561199511546073","76561199526402000"]) then {
                    [] spawn MAS_fnc_ChangeName;
                };
            }];
            MAS_PlayerListBox ctrlSetFade 1;
            MAS_PlayerListBox ctrlCommit 0;
            MAS_PlayerListBox ctrlSetFade 0;
            MAS_PlayerListBox ctrlCommit _fadeTime;
            MAS_Head4Txt = MASDisplay ctrlCreate["RscText", 1006];
            MAS_Head4Txt ctrlSetText "Other Interfaces";
            MAS_Head4Txt ctrlSetPosition[0.592812 * safezoneW + safezoneX, 0.522 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.033 * safezoneH];
            MAS_Head4Txt ctrlSetFontHeight 0.05;
            MAS_Head4Txt ctrlSetFade 1;
            MAS_Head4Txt ctrlCommit 0;
            MAS_Head4Txt ctrlSetFade 0;
            MAS_Head4Txt ctrlCommit _fadeTime;
            MAS_IntBtn1 = MASDisplay ctrlCreate["RscButton", 1620];
            MAS_IntBtn1 ctrlSetText "Vehicle Spawner";
            MAS_IntBtn1 ctrlSetPosition[0.592812 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            MAS_IntBtn1 ctrlSetTooltip "Gives you the ability to spawn all kinds of vehicles";
            MAS_IntBtn1 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_VehicleSpawner;
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
            }];
            MAS_IntBtn1 ctrlSetFade 1;
            MAS_IntBtn1 ctrlCommit 0;
            MAS_IntBtn1 ctrlSetFade 0;
            MAS_IntBtn1 ctrlCommit _fadeTime;
            MAS_IntBtn2 = MASDisplay ctrlCreate["RscButton", 1621];
            MAS_IntBtn2 ctrlSetText "Aimbot Settings/ESP";
            MAS_IntBtn2 ctrlSetPosition[0.592812 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            MAS_IntBtn2 ctrlSetTooltip "Adjust the Aimbot-Settings/Toggles ESP";
            MAS_IntBtn2 ctrlAddEventHandler["ButtonClick", {
                [] spawn MAS_fnc_AimbotESP;
            }];
            MAS_IntBtn2 ctrlSetFade 1;
            MAS_IntBtn2 ctrlCommit 0;
            MAS_IntBtn2 ctrlSetFade 0;
            MAS_IntBtn2 ctrlCommit _fadeTime;
            MAS_IntBtn3 = MASDisplay ctrlCreate["RscButton", 1622];
            MAS_IntBtn3 ctrlSetText "JukeBox";
            MAS_IntBtn3 ctrlSetPosition[0.592812 * safezoneW + safezoneX, 0.632 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            MAS_IntBtn3 ctrlSetTooltip "Play songs";
            MAS_IntBtn3 ctrlAddEventHandler["ButtonClick", {
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
                []
                spawn MAS_fnc_jukebox;
            }];
            MAS_IntBtn3 ctrlSetFade 1;
            MAS_IntBtn3 ctrlCommit 0;
            MAS_IntBtn3 ctrlSetFade 0;
            MAS_IntBtn3 ctrlCommit _fadeTime;
            MAS_IntBtn4 = MASDisplay ctrlCreate["RscButton", 1623];
            MAS_IntBtn4 ctrlSetText "Player View";
            MAS_IntBtn4 ctrlSetPosition[0.592812 * safezoneW + safezoneX, 0.665 * safezoneH + safezoneY, 0.0825 * safezoneW, 0.022 * safezoneH];
            MAS_IntBtn4 ctrlSetTooltip "Find out what other players are looking at";
            MAS_IntBtn4 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_PlayerView;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_IntBtn4 ctrlSetFade 1;
            MAS_IntBtn4 ctrlCommit 0;
            MAS_IntBtn4 ctrlSetFade 0;
            MAS_IntBtn4 ctrlCommit _fadeTime;
            RscPicture_1204 = MASDisplay ctrlCreate["RscPicture", 1204];
            RscPicture_1204 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1204 ctrlSetPosition[0.4175 * safezoneW + safezoneX, 0.511 * safezoneH + safezoneY, 0.165 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1204 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1204 ctrlSetFade 1;
            RscPicture_1204 ctrlCommit 0;
            RscPicture_1204 ctrlSetFade 0;
            RscPicture_1204 ctrlCommit 1;
            MAS_Head5Txt = MASDisplay ctrlCreate["RscText", 1007];
            MAS_Head5Txt ctrlSetText "Hard Player-Settings";
            MAS_Head5Txt ctrlSetPosition[0.448438 * safezoneW + safezoneX, 0.522 * safezoneH + safezoneY, 0.103125 * safezoneW, 0.033 * safezoneH];
            MAS_Head5Txt ctrlSetFontHeight 0.05;
            MAS_Head5Txt ctrlSetFade 1;
            MAS_Head5Txt ctrlCommit 0;
            MAS_Head5Txt ctrlSetFade 0;
            MAS_Head5Txt ctrlCommit _fadeTime;
            MAS_PSBtn1 = MASDisplay ctrlCreate["RscButton", 1624];
            MAS_PSBtn1 ctrlSetText "TP 2";
            MAS_PSBtn1 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn1 ctrlSetPosition[0.432969 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn1 ctrlSetTooltip "Teleport to selected player";
            MAS_PSBtn1 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_TPTo;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn1 ctrlSetFade 1;
            MAS_PSBtn1 ctrlCommit 0;
            MAS_PSBtn1 ctrlSetFade 0;
            MAS_PSBtn1 ctrlCommit _fadeTime;
            MAS_PSBtn2 = MASDisplay ctrlCreate["RscButton", 1627];
            MAS_PSBtn2 ctrlSetText "TP 2 ME";
            MAS_PSBtn2 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn2 ctrlSetPosition[0.505156 * safezoneW + safezoneX, 0.368 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn2 ctrlSetTooltip "Teleport selected player to you";
            MAS_PSBtn2 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_TPtoMe;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn2 ctrlSetFade 1;
            MAS_PSBtn2 ctrlCommit 0;
            MAS_PSBtn2 ctrlSetFade 0;
            MAS_PSBtn2 ctrlCommit _fadeTime;
            MAS_PSBtn3 = MASDisplay ctrlCreate["RscButton", 1625];
            MAS_PSBtn3 ctrlSetText "Mute";
            MAS_PSBtn3 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn3 ctrlSetPosition[0.432969 * safezoneW + safezoneX, 0.412 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn3 ctrlSetTooltip "Mute/Unmute selected player";
            MAS_PSBtn3 ctrlAddEventHandler["ButtonClick", {

                if (isMultiplayer) then {
                    [] spawn MAS_fnc_UnMute;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn3 ctrlSetFade 1;
            MAS_PSBtn3 ctrlCommit 0;
            MAS_PSBtn3 ctrlSetFade 0;
            MAS_PSBtn3 ctrlCommit _fadeTime;
            MAS_PSBtn5 = MASDisplay ctrlCreate["RscButton", 1626];
            MAS_PSBtn5 ctrlSetText "T Menu";
            MAS_PSBtn5 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn5 ctrlSetPosition[0.432969 * safezoneW + safezoneX, 0.456 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn5 ctrlSetTooltip "Adds(if player doesnt have)/Removes(if player has) the menu from/to selected player";
            MAS_PSBtn5 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_TMenu;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn5 ctrlSetFade 1;
            MAS_PSBtn5 ctrlCommit 0;
            MAS_PSBtn5 ctrlSetFade 0;
            MAS_PSBtn5 ctrlCommit _fadeTime;
            MAS_PSBtn4 = MASDisplay ctrlCreate["RscButton", 1629];
            MAS_PSBtn4 ctrlSetText "Disarm";
            MAS_PSBtn4 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn4 ctrlSetPosition[0.505156 * safezoneW + safezoneX, 0.412 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn4 ctrlSetTooltip "Disarm selected player";
            MAS_PSBtn4 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_Disarm;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn4 ctrlSetFade 1;
            MAS_PSBtn4 ctrlCommit 0;
            MAS_PSBtn4 ctrlSetFade 0;
            MAS_PSBtn4 ctrlCommit _fadeTime;
            MAS_PSBtn6 = MASDisplay ctrlCreate["RscButton", 1630];
            MAS_PSBtn6 ctrlSetText "Heal P";
            MAS_PSBtn6 ctrlSetFont "PuristaSemiBold";
            MAS_PSBtn6 ctrlSetPosition[0.505156 * safezoneW + safezoneX, 0.456 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.033 * safezoneH];
            MAS_PSBtn6 ctrlSetTooltip "Heals/Revives selected player";
            MAS_PSBtn6 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_HealP;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PSBtn6 ctrlSetFade 1;
            MAS_PSBtn6 ctrlCommit 0;
            MAS_PSBtn6 ctrlSetFade 0;
            MAS_PSBtn6 ctrlCommit _fadeTime;
            RscPicture_1205 = MASDisplay ctrlCreate["RscPicture", 1205];
            RscPicture_1205 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1205 ctrlSetPosition[0.4175 * safezoneW + safezoneX, 0.643 * safezoneH + safezoneY, 0.159844 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1205 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1205 ctrlSetFade 1;
            RscPicture_1205 ctrlCommit 0;
            RscPicture_1205 ctrlSetFade 0;
            RscPicture_1205 ctrlCommit 1;
            RscPicture_1208 = MASDisplay ctrlCreate["RscPicture", 1208];
            RscPicture_1208 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1208 ctrlSetPosition[0.577344 * safezoneW + safezoneX, 0.643 * safezoneH + safezoneY, 0.004125 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1208 ctrlSetTextColor[0, 0, 0, 1];
            RscPicture_1208 ctrlSetFade 1;
            RscPicture_1208 ctrlCommit 0;
            RscPicture_1208 ctrlSetFade 0;
            RscPicture_1208 ctrlCommit 1;
            _btnDebugConsole = MASDisplay ctrlCreate["RscButtonMenu", 2400];
            _btnDebugConsole ctrlSetText "Open Debug Console";
            _btnDebugConsole ctrlSetPosition[0.438125 * safezoneW + safezoneX, 0.654 * safezoneH + safezoneY, 0.12375 * safezoneW, 0.033 * safezoneH];
            _btnDebugConsole ctrlAddEventHandler["ButtonClick", {
                with uiNamespace do {
                    MASDisplay closeDisplay 0;
                };
                []
                spawn MAS_fnc_debugConsole;
            }];
            _btnDebugConsole ctrlSetFontHeight 0.04;
            _btnDebugConsole ctrlSetFade 1;
            _btnDebugConsole ctrlCommit 0;
            _btnDebugConsole ctrlSetFade 0;
            _btnDebugConsole ctrlCommit _fadeTime;
            MAS_PHBtn1 = MASDisplay ctrlCreate["RscButton", 1628];
            MAS_PHBtn1 ctrlSetText "Logout";
            MAS_PHBtn1 ctrlSetFont "PuristaSemiBold";
            MAS_PHBtn1 ctrlSetPosition[0.427812 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.022 * safezoneH];
            MAS_PHBtn1 ctrlSetTextColor[1, 0, 0, 1];
            MAS_PHBtn1 ctrlSetTooltip "Logsout current Admin";
            MAS_PHBtn1 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    with uiNamespace do {
                        MASDisplay closeDisplay 0;
                    };
                    []
                    spawn MAS_fnc_Logout;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PHBtn1 ctrlSetFade 1;
            MAS_PHBtn1 ctrlCommit 0;
            MAS_PHBtn1 ctrlSetFade 0;
            MAS_PHBtn1 ctrlCommit _fadeTime;
            MAS_PHBtn2 = MASDisplay ctrlCreate["RscButton", 1631];
            MAS_PHBtn2 ctrlSetText "Kill";
            MAS_PHBtn2 ctrlSetFont "PuristaSemiBold";
            MAS_PHBtn2 ctrlSetPosition[0.510312 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.022 * safezoneH];
            MAS_PHBtn2 ctrlSetTextColor[1, 0, 0, 1];
            MAS_PHBtn2 ctrlSetTooltip "Kills selected player";
            MAS_PHBtn2 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_KillP;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PHBtn2 ctrlSetFade 1;
            MAS_PHBtn2 ctrlCommit 0;
            MAS_PHBtn2 ctrlSetFade 0;
            MAS_PHBtn2 ctrlCommit _fadeTime;
            MAS_PHBtn4 = MASDisplay ctrlCreate["RscButton", 1632];
            MAS_PHBtn4 ctrlSetText "Admin";
            MAS_PHBtn4 ctrlSetPosition[0.510312 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.022 * safezoneH];
            MAS_PHBtn4 ctrlSetTextColor[1, 0, 0, 1];
            MAS_PHBtn4 ctrlSetFont "PuristaSemiBold";
            MAS_PHBtn4 ctrlSetTooltip "Makes selected player admin";
            MAS_PHBtn4 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_MakeAdmin;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PHBtn4 ctrlSetFade 1;
            MAS_PHBtn4 ctrlCommit 0;
            MAS_PHBtn4 ctrlSetFade 0;
            MAS_PHBtn4 ctrlCommit _fadeTime;
            MAS_PHBtn3 = MASDisplay ctrlCreate["RscButton", 1633];
            MAS_PHBtn3 ctrlSetText "Kick";
            MAS_PHBtn3 ctrlSetFont "PuristaSemiBold";
            MAS_PHBtn3 ctrlSetPosition[0.427812 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.061875 * safezoneW, 0.022 * safezoneH];
            MAS_PHBtn3 ctrlSetTextColor[1, 0, 0, 1];
            MAS_PHBtn3 ctrlSetTooltip "Hard/Soft kicks selected player";
            MAS_PHBtn3 ctrlAddEventHandler["ButtonClick", {
                if (isMultiplayer) then {
                    [] spawn MAS_fnc_KickChoose;
                } else {
                    systemChat "[SAM] - Doesnt work in single player";
                    playsound "addItemFailed";
                };
            }];
            MAS_PHBtn3 ctrlSetFade 1;
            MAS_PHBtn3 ctrlCommit 0;
            MAS_PHBtn3 ctrlSetFade 0;
            MAS_PHBtn3 ctrlCommit _fadeTime;
            RscPicture_1206 = MASDisplay ctrlCreate["RscPicture", 1206];
            RscPicture_1206 ctrlSetText "#(argb,8,8,3)color(1,1,1,1)";
            RscPicture_1206 ctrlSetPosition[0.314375 * safezoneW + safezoneX, 0.643 * safezoneH + safezoneY, 0.103125 * safezoneW, 0.0055 * safezoneH];
            RscPicture_1206 ctrlSetTextColor[0, 0, 0, 0.8];
            RscPicture_1206 ctrlSetFade 1;
            RscPicture_1206 ctrlCommit 0;
            RscPicture_1206 ctrlSetFade 0;
            RscPicture_1206 ctrlCommit 1;
        };
        private _displayID = uiNameSpace getVariable['MASDisplay', displayNull];
        [_displayID] spawn MAS_fnc_updateList;
    };
    comment "Credit to ZAM Private Menu";
    MAS_fnc_sortUnits = { 
    params ["_lbIndex", "_unit", "_curatorList"]; 
    private _list = uinamespace getvariable ['MAS_PlayerListBox', displayNull]; 
    comment '_list lbSetData [_lbIndex, _unit]'; 
    private _veh = vehicle _unit; 
    if (_veh == _unit) then { 
    if (alive _unit) then { 
    private _side = toLower (str (side _unit)); 
    _list lbSetPicture [_lbIndex, "\A3\ui_f\data\Map\VehicleIcons\iconMan_ca.paa"]; 
    switch(_side) do { 
        case "west": { 
        _list lbSetPictureColor [_lbIndex, [0, 0.5, 1, 0.5]]; 
        }; 
        case "east": { 
        _list lbSetPictureColor [_lbIndex, [1, 0, 0, 0.5]]; 
        }; 
        case "independent": { 
        _list lbSetPictureColor [_lbIndex, [0, 1, 0.5, 0.5]]; 
        }; 
        case "guer": { 
        _list lbSetPictureColor [_lbIndex, [0, 1, 0, 0.5]]; 
        }; 
        case "civilian": { 
        _list lbSetPictureColor [_lbIndex, [1, 0, 1, 0.5]]; 
        }; 
        case "enemy": { 
        _list lbSetPictureColor [_lbIndex, [0.976, 0.412, 0.055, 0.5]]; 
        }; 
    }; 
    if (_unit in _curatorList) then { 
        _list lbSetPicture [_lbIndex, "\A3\ui_f_curator\data\CfgDiary\playerLogic_ca.paa"]; 
        _list lbSetColor [_lbIndex, [1, 1, 1, 1]]; 
    }; 
    } else { 
    _list lbSetPicture [_lbIndex, "\a3\Ui_F_Curator\Data\CfgMarkers\kia_ca.paa"]; 
    _list lbSetPictureColor [_lbIndex, [0.8, 0, 0, 1]]; 
    }; 
    } else { 
    if (alive _unit) then { 
    _list lbSetPicture [_lbIndex, getText (configfile >> "CfgVehicles" >> typeOf _veh >> "icon")]; 
    if ((_list lbPicture _lbIndex) == "") then { 
        _list lbSetPicture [_lbIndex, "A3\ui_f\data\map\markers\military\unknown_ca.paa"]; 
    }; 
    _side = toLower (str (side _unit)); 
    switch(_side) do { 
        case "west": { 
        _list lbSetPictureColor [_lbIndex, [0, 0.5, 1, 0.5]]; 
        }; 
        case "east": { 
        _list lbSetPictureColor [_lbIndex, [1, 0, 0, 0.5]]; 
        }; 
        case "independent": { 
        _list lbSetPictureColor [_lbIndex, [0, 1, 0.5, 0.5]]; 
        }; 
        case "guer": { 
        _list lbSetPictureColor [_lbIndex, [0, 1, 0, 0.5]]; 
        }; 
        case "civilian": { 
        _list lbSetPictureColor [_lbIndex, [1, 0, 1, 0.5]]; 
        }; 
        case "enemy": { 
        _list lbSetPictureColor [_lbIndex, [0.976, 0.412, 0.055, 0.5]]; 
        }; 
    }; 
    } else { 
    _list lbSetPicture [_lbIndex, "\a3\Ui_F_Curator\Data\CfgMarkers\kia_ca.paa"]; 
    _list lbSetPictureColor [_lbIndex, [0.8, 0, 0, 1]]; 
    }; 
    }; 
    if (group _unit == group player) then { 
    _list lbSetColor [_lbIndex, [0, 0.8, 0, 0.7]]; 
    }; 
    private _isMuted = _unit getVariable ["isMuted", false]; 
        if (_isMuted) then { 
        _list lbSetPicture [_lbIndex, "a3\ui_f\data\igui\rscingameui\rscdisplaychannel\mutevon_crossed_ca.paa"]; 
        _list lbSetPictureColor [_lbIndex, [0.8, 0, 0, 1]]; 
    }; 
    private _scorePlyr = rating _unit; 
    if (_scorePlyr <= -2000 || str (side _unit) == "ENEMY") then { 
        _list lbSetPictureRight [_lbIndex, "\A3\ui_f\data\Map\Markers\Military\warning_ca.paa"]; 
        _list lbSetPictureRightColor [_lbIndex, [0.976, 0.412, 0.055, 0.5]]; 
    }; 
    _hasMenu = _unit getVariable ["hasMenu",false];
    if (_hasMenu) then {
    if ((getPlayerUID _unit) in UsersWhoAreSuperMenuWhitelistedreallySuperlol) then {
        _list lbSetPictureRightColor [_lbIndex, [1, 0, 0, 0.5]];
    } else {
        _list lbSetPictureRightColor [_lbIndex, [0.5, 0.7, 0.2, 0.5]];
    };
    };
    if (_unit == player) then { 
        _list lbSetColor [_lbIndex, [0.5, 0, 0.6, 1]]; 
    }; 
    }; 
    MAS_fnc_updateList = { 
    params ["_displayID"]; 
    while { !(isNull _displayID) } do { 
    comment "Player Menu Update"; 
    private _list = uinamespace getvariable ['MAS_PlayerListBox', displayNull]; 
    lbClear _list; 
    private _allPlayers = allPlayers; 
    private _curatorList = []; 
    { 
    private _logicObj = getAssignedCuratorUnit _x; 
    _curatorList pushBack _logicObj; 
    _allPlayers pushBackUnique _logicObj; 
    } forEach allCurators; 
    { 
    private _name = name _x; 
    private _menuName = _x getVariable "MenuName"; 

    private _health = (1-(damage _x))*100; 
    _health = round _health; 
    if (isNil "_menuName") then {
    private _lbIndex = _list lbAdd format ["%1 - %2", _name, _health]; 
    [_lbIndex, _x, _curatorList] call MAS_fnc_sortUnits; 
    } else {
    private _lbIndex = _list lbAdd format ["%1 (%2) - %3", _name, _menuName, _health]; 
    [_lbIndex, _x, _curatorList] call MAS_fnc_sortUnits; 
    };
    } forEach allPlayers; 
    comment "Determine maximum amount of players"; 
    private _maxPlayable = (playableSlotsNumber west) + (playableSlotsNumber east) + (playableSlotsNumber independent) + (playableSlotsNumber civilian) + (playableSlotsNumber sideLogic); 
    _list lbAdd format ["%1/%2 Players", (count allPlayers), _maxPlayable]; 
    _list lbAdd " "; 
    _list lbAdd " "; 
    _list lbAdd " "; 
    sleep 0.5; 
    }; 
    }; 
    MAS_fnc_GM = {
        if (isDamageAllowed player) then 
        {
            with uiNamespace do {
                MAS_UtilBtn1 ctrlSetTextColor [0,1,0,1];
            };
            player setVariable ["MAS_GM",true,false];
            player allowDamage false;
            systemChat "[SAM] - Godmode enabled";
            playSound "addItemOK";
        } else {
            with uiNamespace do {
                MAS_UtilBtn1 ctrlSetTextColor [1,1,1,1];
            };
            player setVariable ["MAS_GM",false,false];
            player allowDamage true;
            systemChat "[SAM] - Godmode disabled";
            playSound "addItemOK";
        };
    };

    MAS_fnc_VGM = {
        _veh = vehicle player;
        if (isDamageAllowed _veh) then 
        {
            with uiNamespace do {
                MAS_UtilBtn2 ctrlSetTextColor [0,1,0,1];
            };
            player setVariable ["MAS_VGM",true,false];
            _veh allowDamage false;
            systemChat "[SAM] - Godmode enabled";
            playSound "addItemOK";
        } else {
            with uiNamespace do {
                MAS_UtilBtn2 ctrlSetTextColor [1,1,1,1];
            }; 
            player setVariable ["MAS_VGM",false,false];
            _veh allowDamage true;
            systemChat "[SAM] - Godmode disabled";
            playSound "addItemOK";
        };
    };    
    MAS_fnc_Heal = {
    if (isNil "noParamsMedical") then { 
        player setDamage 0; 
        ["#rev", 1, player] call BIS_fnc_reviveOnState; 
    } else { 
        player setDamage 0; 
        player setUnconscious false; 

        player setVariable ['noParamsDowned', nil, true]; 
        player setVariable ["downedMessageSent", nil, true]; 
    }; 
    playSound "addItemOk";
    };
    comment "Credit ZAM Private Menu";
    MAS_fnc_getAllTextureTypes = { 
    params ["_veh"]; 
    private _objectType = ""; 
    if (typeName _veh == "STRING") then { 
        _objectType = _veh; 
    }; 
    if (typeName _veh == "OBJECT") then { 
        _objectType = typeOf _veh; 
    }; 
    _return = []; 
    { 
        vehicleEditDisplayName = getText (_x >> "displayName"); 
        _textures = getArray (_x >> "textures"); 
        _return pushBack [vehicleEditDisplayName, _textures]; 
    }forEach configProperties [configFile >> "CfgVehicles" >> _objectType >> "textureSources", "isClass _x", true]; 
    _return 
    };
    
    MAS_fnc_populateVehicleTextures = { 
    params ["_listBox", "_veh"]; 
    private _vehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
        _vehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    { 
        _listbox lbAdd (_x select 0); 
    } forEach _vehTextures; 
    }; 
    
    MAS_fnc_populateVehicleAtribs = { 
    params ["_listBox", "_veh"]; 
    private _objectOptions = [_veh] call BIS_fnc_getVehicleCustomization; 
    _objectOptions = _objectOptions select 1; 
    if (count _objectOptions == 0) exitWith {}; 
    for "_i" from 0 to (count _objectOptions -1) step 2 do { 
        private _lbIndex = _listBox lbAdd (_objectOptions select _i); 
        private _settingIndex = _i + 1; 
        private _atrib = (_objectOptions select _settingIndex); 
        private _string = str _atrib; 
        _listbox lbSetData [_lbIndex, _string]; 
        if (_atrib == 0) then { 
        _listBox lbSetColor [_lbIndex, [0.8, 0, 0, 1]]; 
        } else { 
        _listBox lbSetColor [_lbIndex, [0, 0.8, 0, 1]]; 
        }; 
    }; 
    }; 
    
    MAS_fnc_editTextureClick = { 
    params ["_listBox", "_index", "_veh"]; 
    private _allVehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
        _allVehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    private _vehTexturesSelected = _allVehTextures select _index; 
    private _vehTextures = _vehTexturesSelected select 1; 
    { 
        _veh setObjectTexture [_forEachIndex, _x]; 
    } forEach _vehTextures; 
    }; 
    
    MAS_fnc_editAtribsDblClick = { 
    params ["_listBox", "_index"]; 
    private _data = _listBox lbData _index; 
    switch (_data) do { 
        case "0": { 
        _listBox lbSetData [_index, "1"]; 
        _listBox lbSetColor [_index, [0, 0.8, 0, 1]]; 
        }; 
        case "1": { 
        _listBox lbSetData [_index, "0"]; 
        _listBox lbSetColor [_index, [0.8, 0, 0, 1]]; 
        }; 
    }; 
    }; 
    
    MAS_fnc_confirmVehEdit = { 
    params ["_textures", "_atribs", "_veh"]; 
    private _indexTextures = lbCurSel _textures; 
    if (_indexTextures == -1) exitWith { 
        systemChat '[SAM] - Choose a texture!'; 
        playSound 'addItemFailed'; 
    }; 
    private _allVehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
        _allVehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    private _vehTexturesSelected = _allVehTextures select _indexTextures; 
    private _vehTextures = _vehTexturesSelected select 1; 
    
    private _objectOptions = [_veh] call BIS_fnc_getVehicleCustomization; 
    _objectOptions = _objectOptions select 1; 
    if (count _objectOptions == 0) then { 
        _objectOptions = [] 
    } else { 
        private _atribSettings = []; 
    
        for "_i" from 0 to ((count _objectOptions) / 2) do { 
        private _data = _atribs lbData _i; 
        _atribSettings pushBack (parseNumber _data); 
        }; 
    
        { 
        private _index = ((_forEachIndex * 2) + 1); 
        _objectOptions set [_index, _x]; 
        }forEach _atribSettings; 
    }; 
    
    [ 
        _veh, 
        false, 
        _objectOptions 
    ] call BIS_fnc_initVehicle; 
    { 
        [_veh, [_forEachIndex, _x]] remoteExec ['setObjectTexture', 0, _veh]; 
    } forEach _vehTextures; 
    
    _veh setVariable ['oldTextures', nil, true]; 
    (uiNamespace getVariable 'vehicleEditDisplay') closeDisplay 0; 
    systemChat '[SAM] - Vehicle attributes applied!'; 
    playSound 'addItemOk'; 
    }; 
    MAS_fnc_EditVeh = {
    params ["_veh"]; 
    private _displayText = getText (configFile >> "CfgVehicles" >> typeOf _veh >> "displayName"); 
    _veh setVariable ['oldTextures', getObjectTextures _veh, true]; 
    uiNamespace setVariable ['vehicleEditing', _veh]; 
    uiNamespace setVariable ['vehicleName', _displayText]; 
    with uiNamespace do { 
        createDialog "RscDisplayEmpty"; 
        showChat true; 
        vehicleEditDisplay = findDisplay -1; 

        vehicleEditDisplay displayAddEventHandler ["unload", { 
        private _editingVehicle = vehicle player; 
        private _oldTextures = _editingVehicle getVariable 'oldTextures'; 
        if (!isNil "_oldTextures") then { 
        { 
        [_editingVehicle, [_forEachIndex, _x]] remoteExec ['setObjectTexture', 0, _editingVehicle]; 
        }forEach _oldTextures; 
        systemChat "[SAM] - Vehicle changes NOT applied."; 
        }; 
        }]; 

        vehicleEditLabel = vehicleEditDisplay ctrlCreate ["RscStructuredText", 1100]; 
        vehicleEditLabel ctrlSetStructuredText parseText format ["Editing Vehicle (%1)", vehicleName]; 
        vehicleEditLabel ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.32 * safeZoneH + safeZoneY, 0.20625 * safeZoneW, 0.022 * safeZoneH]; 
        vehicleEditLabel ctrlSetTextColor [1, 1, 1, 1]; 
        vehicleEditLabel ctrlSetBackgroundColor [0.1, 0.5, 0, 1]; 
        vehicleEditLabel ctrlCommit 0; 

        vehicleEditBackground = vehicleEditDisplay ctrlCreate ["RscPicture", 1200]; 
        vehicleEditBackground ctrlSetText "#(argb,8,8,3)color(0,0,0,0.6)"; 
        vehicleEditBackground ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.346 * safeZoneH + safeZoneY, 0.20625 * safeZoneW, 0.363 * safeZoneH]; 
        vehicleEditBackground ctrlCommit 0; 

        vehicleEditFrame = vehicleEditDisplay ctrlCreate ["RscFrame", 1800]; 
        vehicleEditFrame ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.346 * safeZoneH + safeZoneY, 0.20625 * safeZoneW, 0.363 * safeZoneH]; 
        vehicleEditFrame ctrlCommit 0; 

        vehicleEditTextures = vehicleEditDisplay ctrlCreate ["RscFrame", 1801]; 
        vehicleEditTextures ctrlSetPosition [0.402031 * safeZoneW + safeZoneX, 0.357 * safeZoneH + safeZoneY, 0.195937 * safeZoneW, 0.132 * safeZoneH]; 
        vehicleEditTextures ctrlCommit 0; 

        vehicleEditTexturesList = vehicleEditDisplay ctrlCreate ["RscListbox", 1500]; 
        vehicleEditTexturesList ctrlSetPosition [0.402031 * safeZoneW + safeZoneX, 0.357 * safeZoneH + safeZoneY, 0.195937 * safeZoneW, 0.132 * safeZoneH]; 
        vehicleEditTexturesList ctrlAddEventHandler ["LBSelChanged", { 
        params ["_control", "_selectedIndex"]; 
        [_control, _selectedIndex, uiNamespace getVariable 'vehicleEditing'] call MAS_fnc_editTextureClick; 
        }]; 
        vehicleEditTexturesList ctrlCommit 0; 

        vehicleEditAttributes = vehicleEditDisplay ctrlCreate ["RscFrame", 1802]; 
        vehicleEditAttributes ctrlSetPosition [0.402031 * safeZoneW + safeZoneX, 0.5 * safeZoneH + safeZoneY, 0.195937 * safeZoneW, 0.132 * safeZoneH]; 
        vehicleEditAttributes ctrlCommit 0; 

        vehicleEditAttributesList = vehicleEditDisplay ctrlCreate ["RscListbox", 1501]; 
        vehicleEditAttributesList ctrlSetPosition [0.402031 * safeZoneW + safeZoneX, 0.5 * safeZoneH + safeZoneY, 0.195937 * safeZoneW, 0.132 * safeZoneH]; 
        vehicleEditAttributesList ctrlAddEventHandler ["LBDblClick", { 
        params ["_control", "_selectedIndex"]; 
        [_control, _selectedIndex] call MAS_fnc_editAtribsDblClick; 
        }]; 
        vehicleEditAttributesList ctrlCommit 0; 

        vehicleEditCancel = vehicleEditDisplay ctrlCreate ["RscButtonMenu", 2400]; 
        vehicleEditCancel ctrlSetStructuredText parseText "<t size='0.1'>&#160; 
        </t><br/><t align='center'>Cancel</t>"; 
        vehicleEditCancel ctrlSetPosition [0.443281 * safeZoneW + safeZoneX, 0.654 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.033 * safeZoneH]; 
        vehicleEditCancel ctrlSetTextColor [0.8, 0, 0, 1]; 
        vehicleEditCancel ctrlSetBackgroundColor [0, 0, 0, 0.8]; 
        vehicleEditCancel ctrlSetFont "PuristaSemiBold"; 
        vehicleEditCancel ctrlAddEventHandler ["ButtonClick", { 
        (uiNamespace getVariable 'vehicleEditDisplay') closeDisplay 0; 
        private _veh = uiNamespace getVariable 'vehicleEditing'; 
        private _oldTextures = _veh getVariable 'oldTextures'; 
        { 
        [_veh, [_forEachIndex, _x]] remoteExec ['setObjectTexture', 0, _veh]; 
        }forEach _oldTextures; 
        }]; 
        vehicleEditCancel ctrlCommit 0; 

        vehicleEditApply = vehicleEditDisplay ctrlCreate ["RscButtonMenu", 2401]; 
        vehicleEditApply ctrlSetStructuredText parseText "<t size='0.1'>&#160; 
        </t><br/><t align='center'>Apply</t>"; 
        vehicleEditApply ctrlSetPosition [0.515469 * safeZoneW + safeZoneX, 0.654 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.033 * safeZoneH]; 
        vehicleEditApply ctrlSetTextColor [0, 0.8, 0, 1]; 
        vehicleEditApply ctrlSetBackgroundColor [0, 0, 0, 0.8]; 
        vehicleEditApply ctrlSetFont "PuristaSemiBold"; 
        vehicleEditApply ctrlAddEventHandler ["ButtonClick", { 
        [ 
        uiNamespace getVariable 'vehicleEditTexturesList', 
        uiNamespace getVariable 'vehicleEditAttributesList', 
        uiNamespace getVariable 'vehicleEditing' 
        ] call MAS_fnc_confirmVehEdit; 
        }]; 
        vehicleEditApply ctrlCommit 0; 
    }; 
    [uiNamespace getVariable 'vehicleEditTexturesList', _veh] call MAS_fnc_populateVehicleTextures; 
    [uiNamespace getVariable 'vehicleEditAttributesList', _veh] call MAS_fnc_populateVehicleAtribs; 
    systemChat "[SAM] - Vehicle editor opened."; 
    playSound 'addItemOk';
    };
    MAS_fnc_populateVehicleTextures = { 
    params ["_listBox", "_veh"]; 
    private _vehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
    _vehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    { 
    _listbox lbAdd (_x select 0); 
    } forEach _vehTextures; 
    }; 
    MAS_fnc_populateVehicleAtribs = { 
    params ["_listBox", "_veh"]; 
    private _objectOptions = [_veh] call BIS_fnc_getVehicleCustomization; 
    _objectOptions = _objectOptions select 1; 
    if (count _objectOptions == 0) exitWith {}; 
    for "_i" from 0 to (count _objectOptions -1) step 2 do { 
    private _lbIndex = _listBox lbAdd (_objectOptions select _i); 
    private _settingIndex = _i + 1; 
    private _atrib = (_objectOptions select _settingIndex); 
    private _string = str _atrib; 
    _listbox lbSetData [_lbIndex, _string]; 
    if (_atrib == 0) then { 
    _listBox lbSetColor [_lbIndex, [0.8, 0, 0, 1]]; 
    } else { 
    _listBox lbSetColor [_lbIndex, [0, 0.8, 0, 1]]; 
    }; 
    }; 
    }; 
    MAS_fnc_editTextureClick = { 
    params ["_listBox", "_index", "_veh"]; 
    private _allVehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
    _allVehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    private _vehTexturesSelected = _allVehTextures select _index; 
    private _vehTextures = _vehTexturesSelected select 1; 
    { 
    _veh setObjectTexture [_forEachIndex, _x]; 
    } forEach _vehTextures; 
    }; 
    MAS_fnc_editAtribsDblClick = { 
    params ["_listBox", "_index"]; 
    private _data = _listBox lbData _index; 
    switch (_data) do { 
    case "0": { 
    _listBox lbSetData [_index, "1"]; 
    _listBox lbSetColor [_index, [0, 0.8, 0, 1]]; 
    }; 
    case "1": { 
    _listBox lbSetData [_index, "0"]; 
    _listBox lbSetColor [_index, [0.8, 0, 0, 1]]; 
    }; 
    }; 
    }; 
    MAS_fnc_confirmVehEdit = { 
    params ["_textures", "_atribs", "_veh"]; 
    private _indexTextures = lbCurSel _textures; 
    if (_indexTextures == -1) exitWith { 
    systemChat '[SAM] - Choose a texture!'; 
    playSound 'addItemFailed'; 
    }; 
    private _allVehTextures = [_veh] call MAS_fnc_getAllTextureTypes; 
    private _litleBirds = ["B_Heli_Light_01_F", "B_Heli_Light_01_dynamicLoadout_F"]; 
    if (typeOf _veh in _litleBirds) then { 
    _allVehTextures = ["C_Heli_Light_01_civil_F"] call MAS_fnc_getAllTextureTypes; 
    }; 
    private _vehTexturesSelected = _allVehTextures select _indexTextures; 
    private _vehTextures = _vehTexturesSelected select 1; 
    private _objectOptions = [_veh] call BIS_fnc_getVehicleCustomization; 
    _objectOptions = _objectOptions select 1; 
    if (count _objectOptions == 0) then { 
    _objectOptions = [] 
    } else { 
    private _atribSettings = []; 
    for "_i" from 0 to ((count _objectOptions) / 2) do { 
    private _data = _atribs lbData _i; 
    _atribSettings pushBack (parseNumber _data); 
    }; 
    { 
    private _index = ((_forEachIndex * 2) + 1); 
    _objectOptions set [_index, _x]; 
    }forEach _atribSettings; 
    }; 
    [ 
    _veh, 
    false, 
    _objectOptions 
    ] call BIS_fnc_initVehicle; 
    { 
    [_veh, [_forEachIndex, _x]] remoteExec ['setObjectTexture', 0, _veh]; 
    } forEach _vehTextures; 
    _veh setVariable ['oldTextures', nil, true]; 
    (uiNamespace getVariable 'vehicleEditDisplay') closeDisplay 0; 
    systemChat '[SAM] - Vehicle attributes applied!'; 
    playSound 'addItemOk'; 
    }; 
    MAS_fnc_Unflip = {
        params ["_vehicle"];
        _vehicle setVectorUp surfaceNormal getPos _vehicle; 
        _vehicle setPosATL [getPosATL _vehicle select 0, getPosATL _vehicle select 1, 0.2]; 
    };
    MAS_fnc_RRR = {
        params ["_vehicle"];
        _vehicle setDamage 0; 
    vehicle player setDamage 0; 
    _vehicle setFuel 1; 
    vehicle player setFuel 1; 
    _vehicle setVehicleAmmo 1; 
    vehicle player setVehicleAmmo 1; 
    systemChat "[SAM] - Vehicle repaired."; 
    playSound 'addItemOk'; 
    };
    MAS_KillToggle = { 
    private _isKill = player getVariable ["isKillinEnabled", false]; 
    if (_isKill) then { 
    (findDisplay 46) displayRemoveEventHandler ["KeyDown", killKeyBindMAS]; 
    player setVariable ["isKillinEnabled", false]; 
    with uiNamespace do {
        MAS_UtilBtn7 ctrlSetTextColor [1,1,1,1];
    };
    systemChat "[SAM] - Kill mode off"; 
    playsound "addItemOK";
    } else { 
    killKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 20) then { 
    [] spawn MAS_fnc_killTarget; 
    }"]; 
    player setVariable ["isKillinEnabled", true]; 
    systemChat "[SAM] - Kill mode on"; 
    playsound "addItemOK";
    with uiNamespace do {
        MAS_UtilBtn7 ctrlSetTextColor [0,1,0,1];
    };
    }; 
    };
    MAS_fnc_killTarget = { 
    cursorObject setDamage 1; 
    };  
    MAS_DelToggle = { 
    private _isDel = player getVariable ["isDelEnabled", false]; 
    if (_isDel) then { 
    (findDisplay 46) displayRemoveEventHandler ["KeyDown", delKeyBindMAS]; 
    player setVariable ["isDelEnabled", false];
    with uiNamespace do {
        MAS_UtilBtn8 ctrlSetTextColor [1,1,1,1];
    }; 
    systemChat "[SAM] - Delete mode off"; 
    playsound "addItemOK";
    } else { 
    delKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 20) then { 
    [] spawn MAS_fnc_delTarget  
    }"]; 
    player setVariable ["isDelEnabled", true]; 
    with uiNamespace do {
        MAS_UtilBtn8 ctrlSetTextColor [0,1,0,1];
    };
    systemChat "[SAM] - Delete mode on"; 
    playsound "addItemOK";
    }; 
    };
    MAS_fnc_delTarget = { 
    deleteVehicle cursorObject;
    }; 
    comment "credit ZAM prvt menu";
    MAS_fnc_FlyToggle = {
        private _isFly = player getVariable ["isFlyEnabled", false]; 
    if (_isFly) then { 
        (findDisplay 46) displayRemoveEventHandler ["KeyDown", flyKeyBindMAS]; 
        jumpKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "_this call MAS_fnc_doJump; 
        "]; 
        player setVariable ["isFlyEnabled", false]; 
        with uiNamespace do {
            MAS_UtilBtn9 ctrlSetTextColor [1,1,1,1];
        };          
        systemChat "[SAM] - Fly mode off"; 
        playsound "addItemOK";
    } else { 
        flyKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 57) then { 
        [] spawn MAS_fnc_fly; 
        }"]; 
        (findDisplay 46) displayRemoveEventHandler ["KeyDown", jumpKeyBindMAS]; 
        player setVariable ["isFlyEnabled", true]; 
        with uiNamespace do {
            MAS_UtilBtn9 ctrlSetTextColor [0,1,0,1];
        };    
        systemChat "[SAM] - Fly mode on"; 
        playsound "addItemOK";
    }; 
    };
    MAS_fnc_fly = { 
    player setVelocity [(velocity player select 0), (velocity player select 1), 4]; 
    }; 
    MAS_AimToggle = {
        private _aimbotOn = player getVariable ["aimbotOn", false];
        if (_aimbotOn) then {
            player removeAllEventHandlers "Fired";
            player setVariable ["aimbotOn", false];
            systemChat "[SAM] - Aimbot off";
            playsound "addItemOK";
            with uiNamespace do {
                MAS_UtilBtn10 ctrlSetTextColor [1,1,1,1];
            };    
        } else {
                aimKeyBindMAS = player addEventHandler ["Fired", {
                params ["_unit", "_weapon", "_muzzle", "_mode", "_ammo", "_magazine", "_projectile", "_gunner"];
                _range = player getVariable "aimRange";
                if (_range == 0) then {_range = 400};
                _aimBlu = player getVariable "aimBlu";
                _aimOpf = player getVariable "aimOpf";
                _aimInd = player getVariable "aimInd";
                _aimCiv = player getVariable "aimCiv";
                _aimAll = player getVariable "aimAll";
                _aimBoth = player getVariable "aimBoth";
                _aimPlay = player getVariable "aimPlay";
                _aimAI = player getVariable "aimAI";
                private _side = switch(true) do {
                    case _aimBlu:{west};
                    case _aimOpf:{east};
                    case _aimInd:{resistance};
                    case _aimCiv:{Civilian}
                };
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {(side _x) == east and alive _x and alive _x and _x != player};
                if (_aimAll) then {
                if (_aimBoth) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {alive _x and _x != player};
                };
                if (_aimPlay) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {isPlayer _x and alive _x and alive _x and _x != player};	
                };
                if (_aimAI) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {(!isPlayer _x) and alive _x and alive _x and _x != player};		
                };
                } else {
                if (_aimBoth) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {(side _x) == _side and alive _x and alive _x and _x != player};
                };
                if (_aimPlay) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {(side _x) == _side && isPlayer _x and alive _x and _x != player};
                };
                if (_aimAI) then {
                _nearUnits = nearestObjects [player, ["CAManBase"], _range] select {(side _x) == _side && !(isPlayer _x) and alive _x and _x != player};
                };		
                };
                _nearestUnit= _nearUnits select 0;
                _head = eyePos _nearestUnit;
                player setDir ([player, _nearestUnit] call BIS_fnc_dirTo);
                _projectile setPosASL _head;
            }];
        player setVariable ["aimbotOn", true];
        with uiNamespace do {
            MAS_UtilBtn10 ctrlSetTextColor [0,1,0,1];
        }; 
        systemChat "[SAM] - Aimbot on";
        playsound "addItemOK";
        };
    };
    MAS_fnc_OArsenal = {
        ["Open", [true]] call BIS_fnc_arsenal;
    };
    MAS_fnc_Mines = {
        { 
            deleteVehicle _x; 
        }forEach allMines;
        systemChat "[SAM] - All mines removed";
        playSound "addItemOK";
    };
    MAS_fnc_TeleportMap = {
        player onMapSingleClick "if (_alt) then { 
            vehicle player setPosATL _pos; 
        }"; 
    openMap [true, false];
    systemChat "[SAM] - Press ALT + LMB on map to teleport there";
    };
    MAS_fnc_Teamkiller = {
        {
            _x addRating 2000;
        } forEach allPlayers;
        systemChat "[SAM] - All Tkers removed";
        playSound "addItemOK";
    };
    MAS_fnc_rMarkers = {
        { 
            deleteMarker _x; 
        }forEach allMapMarkers; 
        systemChat "[SAM] - All map markers were deleted."; 
        playSound 'addItemOk'; 
    };
    
    MAS_fnc_ChangeSideChoose = {
        with uiNamespace do {
            if (isNil "frameSide") then {
                pSide = MASDisplay ctrlCreate ["RscPicture", 1801];
                pSide ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                pSide ctrlSetPosition [0.262812 * safezoneW + safezoneX, 0.555 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.143 * safezoneH];
                pSide ctrlSetFade 1;
                pSide ctrlCommit 0;
                pSide ctrlSetFade 0;
                pSide ctrlCommit 1;

                frameSide = MASDisplay ctrlCreate ["RscFrame", 1801];
                frameSide ctrlSetPosition [0.262812 * safezoneW + safezoneX, 0.555 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.143 * safezoneH];
                frameSide ctrlSetFade 1;
                frameSide ctrlCommit 0;
                frameSide ctrlSetFade 0;
                frameSide ctrlCommit 1;
                
                btnSideI = MASDisplay ctrlCreate ["RscButton", 1608];
                btnSideI ctrlSetText "INDEP";
                btnSideI ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.632 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                btnSideI ctrlSetBackgroundColor [0,0.8,0.2,1];
                btnSideI ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [INDEPENDENT] spawn MAS_fnc_ChangeSide;
                }];           
                btnSideI ctrlSetFade 1;
                btnSideI ctrlCommit 0;
                btnSideI ctrlSetFade 0;
                btnSideI ctrlCommit 1;

                btnSideC = MASDisplay ctrlCreate ["RscButton", 1617];
                btnSideC ctrlSetText "Civilian";
                btnSideC ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.665 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                btnSideC ctrlSetBackgroundColor [1,0.2,0.6,1];
                btnSideC ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [CIVILIAN] spawn MAS_fnc_ChangeSide;
                }];         
                btnSideC ctrlSetFade 1;
                btnSideC ctrlCommit 0;
                btnSideC ctrlSetFade 0;
                btnSideC ctrlCommit 1;

                btnSideO = MASDisplay ctrlCreate ["RscButton", 1634];
                btnSideO ctrlSetText "OPFOR";
                btnSideO ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                btnSideO ctrlSetBackgroundColor [0.8,0.2,0,1];
                btnSideO ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [EAST] spawn MAS_fnc_ChangeSide;
                }]; 
                btnSideO ctrlSetFade 1;
                btnSideO ctrlCommit 0;
                btnSideO ctrlSetFade 0;
                btnSideO ctrlCommit 1;

                btnSideB = MASDisplay ctrlCreate ["RscButton", 1635];
                btnSideB ctrlSetText "BLUFOR";
                btnSideB ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                btnSideB ctrlSetBackgroundColor [0,0.3,8,1];
                btnSideB ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [WEST] spawn MAS_fnc_ChangeSide;
                }]; 
                btnSideB ctrlSetFade 1;
                btnSideB ctrlCommit 0;
                btnSideB ctrlSetFade 0;
                btnSideB ctrlCommit 1;

            } else {
                controlVisible = with uiNamespace do {ctrlShown frameSide;};
                if !(controlVisible) then {
                    pSide = MASDisplay ctrlCreate ["RscPicture", 1801];
                    pSide ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                    pSide ctrlSetPosition [0.262812 * safezoneW + safezoneX, 0.555 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.143 * safezoneH];
                    pSide ctrlSetFade 1;
                    pSide ctrlCommit 0;
                    pSide ctrlSetFade 0;
                    pSide ctrlCommit 1;

                    frameSide = MASDisplay ctrlCreate ["RscFrame", 1801];
                    frameSide ctrlSetPosition [0.262812 * safezoneW + safezoneX, 0.555 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.143 * safezoneH];
                    frameSide ctrlSetFade 1;
                    frameSide ctrlCommit 0;
                    frameSide ctrlSetFade 0;
                    frameSide ctrlCommit 1;

                    btnSideI = MASDisplay ctrlCreate ["RscButton", 1608];
                    btnSideI ctrlSetText "INDEP";
                    btnSideI ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.632 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                    btnSideI ctrlSetBackgroundColor [0,0.8,0.2,1];
                    btnSideI ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        [INDEPENDENT] spawn MAS_fnc_ChangeSide;
                    }];           
                    btnSideI ctrlSetFade 1;
                    btnSideI ctrlCommit 0;
                    btnSideI ctrlSetFade 0;
                    btnSideI ctrlCommit 1;

                    btnSideC = MASDisplay ctrlCreate ["RscButton", 1617];
                    btnSideC ctrlSetText "Civilian";
                    btnSideC ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.665 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                    btnSideC ctrlSetBackgroundColor [1,0.2,0.6,1];
                    btnSideC ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        [CIVILIAN] spawn MAS_fnc_ChangeSide;
                    }];         
                    btnSideC ctrlSetFade 1;
                    btnSideC ctrlCommit 0;
                    btnSideC ctrlSetFade 0;
                    btnSideC ctrlCommit 1;

                    btnSideO = MASDisplay ctrlCreate ["RscButton", 1634];
                    btnSideO ctrlSetText "OPFOR";
                    btnSideO ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.599 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                    btnSideO ctrlSetBackgroundColor [0.8,0.2,0,1];
                    btnSideO ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        [EAST] spawn MAS_fnc_ChangeSide;
                    }]; 
                    btnSideO ctrlSetFade 1;
                    btnSideO ctrlCommit 0;
                    btnSideO ctrlSetFade 0;
                    btnSideO ctrlCommit 1;

                    btnSideB = MASDisplay ctrlCreate ["RscButton", 1635];
                    btnSideB ctrlSetText "BLUFOR";
                    btnSideB ctrlSetPosition [0.267969 * safezoneW + safezoneX, 0.566 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                    btnSideB ctrlSetBackgroundColor [0,0.3,8,1];
                    btnSideB ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        [WEST] spawn MAS_fnc_ChangeSide;
                    }]; 
                    btnSideB ctrlSetFade 1;
                    btnSideB ctrlCommit 0;
                    btnSideB ctrlSetFade 0;
                    btnSideB ctrlCommit 1;

                } else {
                    ctrlDelete btnSideI;
                    ctrlDelete btnSideC;
                    ctrlDelete btnSideO;
                    ctrlDelete btnSideB;
                    ctrlDelete pSide;
                    ctrlDelete frameSide;
                };
            };
        };
    };

    MAS_fnc_ChangeSide = {
        params ["_side"];
        [player] joinSilent (createGroup _side); 
        systemChat format ["Joined %1", _side];
    };

    MAS_fnc_Clutter = {
    private _countDead = 0; 
    private _deadObjects = 0; 
    { 
        _countDead = _countDead + 1; 
    } forEach allDeadMen; 
    [[], { 
        for '_i' from 1 to 3 do { 
        private _allMObjects = allMissionObjects 'All'; 
        { 
        if ((!alive _x) or (damage _x == 1)) then { 
        deleteVehicle _x; 
        } else { 
        private _objName = getText (configFile >> 'cfgVehicles' >> typeOf _x >> 'displayName'); 
        if ((_objName == 'Ground') or (_objName == 'Damaged Building') or (_objName == 'Canopy')) then { 
            deleteVehicle _x; 
        } else { 
            private _objName2 = _objName splitString ' '; 
            if (_objName2 # (count _objName2 - 1) == '(Ruin)') then { 
            deleteVehicle _x; 
            } else { 
            private _objName3 = _objName splitString ', '; 
            if (_objName3 # (count _objName3 - 1) == ' Ruin)') then { 
            deleteVehicle _x; 
            }; 
            }; 
        }; 
        }; 
        } forEach _allMObjects; 
        sleep 0.77; 
        }; 
        { 
        if (count units _x == 0) then { 
        deleteGroup _x 
        }; 
        } forEach allGroups; 
    }] remoteExec ['spawn', 2]; 
    systemChat format ["[SAM] - %1 dead bodies were removed.", _countDead]; 
    playSound 'addItemOk'; 
    };
    MAS_fnc_AimbotSettings = { 
    disableSerialization; 
    with uiNamespace do { 
        pvtMenu = (findDisplay 46) createDisplay "RscDisplayEmpty"; 

        baseFrame = pvtMenu ctrlCreate ["RscFrame", 1800]; 
        baseFrame ctrlSetPosition [0.381406 * safeZoneW + safeZoneX, 0.434 * safeZoneH + safeZoneY, 0.242344 * safeZoneW, 0.264 * safeZoneH]; 
        baseFrame ctrlCommit 0; 

        baseBackround = pvtMenu ctrlCreate ["RscPicture", 1200]; 
        baseBackround ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
        baseBackround ctrlSetPosition [0.381406 * safeZoneW + safeZoneX, 0.434 * safeZoneH + safeZoneY, 0.242344 * safeZoneW, 0.264 * safeZoneH]; 
        baseBackround ctrlSetTextColor [0, 0.5, 0.5, 0.3]; 
        baseBackround ctrlCommit 0; 

        RscText_1000 = pvtMenu ctrlCreate ["RscText", 1000]; 
        RscText_1000 ctrlSetText "Aimbot Settings"; 
        RscText_1000 ctrlSetPosition [0.469062 * safeZoneW + safeZoneX, 0.456 * safeZoneH + safeZoneY, 0.061875 * safeZoneW, 0.033 * safeZoneH]; 
        RscText_1000 ctrlSetTextColor [1, 1, 1, 1]; 
        RscText_1000 ctrlCommit 0; 

        slider = pvtMenu ctrlCreate ["RscSlider", 1900]; 
        slider ctrlSetPosition [0.402031 * safeZoneW + safeZoneX, 0.522 * safeZoneH + safeZoneY, 0.185625 * safeZoneW, 0.022 * safeZoneH]; 
        slider ctrlCommit 0; 
        slider sliderSetRange [0, 999]; 
        slider sliderSetSpeed [1, 1, 10]; 
        slider ctrlAddEventHandler ["SliderPosChanged", { 
        params ["_control", "_newValue"]; 
        (uiNamespace getVariable "txtRange") ctrlSetText (["[", _newValue, "]"] joinString ""); 
        }]; 
        slider ctrlCommit 0; 

        txtRange = pvtMenu ctrlCreate ["RscText", 1001]; 
        txtRange ctrlSetText "[0]"; 
        txtRange ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.489 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.022 * safeZoneH]; 
        txtRange ctrlSetTextColor [1, -1, -1, 1]; 
        txtRange ctrlCommit 0; 

        txtFaction = pvtMenu ctrlCreate ["RscText", 1002]; 
        txtFaction ctrlSetText "Side"; 
        txtFaction ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.566 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.022 * safeZoneH]; 
        txtFaction ctrlSetTextColor [1, -1, -1, 1]; 
        txtFaction ctrlCommit 0; 

        comboSide = pvtMenu ctrlCreate ["RscCombo", 2100]; 
        comboSide ctrlSetPosition [0.396875 * safeZoneW + safeZoneX, 0.599 * safeZoneH + safeZoneY, 0.0825 * safeZoneW, 0.022 * safeZoneH]; 
        comboSide ctrlCommit 0; 
        _index = comboSide lbAdd "Blufor"; 
        comboSide lbSetData [_index, "0"]; 

        _index = comboSide lbAdd "Opfor"; 
        comboSide lbSetData [_index, "1"]; 

        _index = comboSide lbAdd "Independent"; 
        comboSide lbSetData [_index, "2"]; 

        _index = comboSide lbAdd "Civillian"; 
        comboSide lbSetData [_index, "3"]; 

        _index = comboSide lbAdd "All"; 
        comboSide lbSetData [_index, "4"]; 

        txtMode = pvtMenu ctrlCreate ["RscText", 1003]; 
        txtMode ctrlSetText "Mode"; 
        txtMode ctrlSetPosition [0.572187 * safeZoneW + safeZoneX, 0.566 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.022 * safeZoneH]; 
        txtMode ctrlSetTextColor [1, -1, -1, 1]; 
        txtMode ctrlCommit 0; 

        comboMode = pvtMenu ctrlCreate ["RscCombo", 2101]; 
        comboMode ctrlSetPosition [0.525781 * safeZoneW + safeZoneX, 0.599 * safeZoneH + safeZoneY, 0.0825 * safeZoneW, 0.022 * safeZoneH]; 
        comboMode ctrlCommit 0; 

        _index = comboMode lbAdd "Only AI"; 
        comboMode lbSetData [_index, "0"]; 

        _index = comboMode lbAdd "Only Players"; 
        comboMode lbSetData [_index, "1"]; 

        _index = comboMode lbAdd "Both"; 
        comboMode lbSetData [_index, "2"]; 

        btnCancel = pvtMenu ctrlCreate ["RscButton", 1600]; 
        btnCancel ctrlSetText "Cancel"; 
        btnCancel ctrlSetPosition [0.391719 * safeZoneW + safeZoneX, 0.632 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.055 * safeZoneH]; 
        btnCancel ctrlSetTextColor [1, -1, -1, 1]; 
        btnCancel ctrlCommit 0; 
        btnCancel ctrlAddEventHandler ["ButtonClick", { 
        with uiNamespace do { 
        pvtMenu closeDisplay 0; 
        }; 
        }]; 

        btnOk = pvtMenu ctrlCreate ["RscButton", 1601]; 
        btnOk ctrlSetText "Ok"; 
        btnOk ctrlSetPosition [0.567031 * safeZoneW + safeZoneX, 0.632 * safeZoneH + safeZoneY, 0.04125 * safeZoneW, 0.055 * safeZoneH]; 
        btnOk ctrlSetTextColor [-1, 1, -1, 1]; 
        btnOk ctrlCommit 0; 
        btnOk ctrlAddEventHandler ["ButtonClick", { 
        private _sde = uiNamespace getVariable ['comboSide', displayNull]; 
        private _sideIndex = lbCurSel _sde; 
        private _sideSelection = _sde lbData _sideIndex; 
        private _side = parseNumber _sideSelection; 

        private _mde = uiNamespace getVariable ['comboMode', displayNull]; 
        private _modeIndex = lbCurSel _mde; 
        private _modeSelection = _mde lbData _modeIndex; 
        private _mode = parseNumber _modeSelection; 

        _Xwidth = sliderPosition (uiNamespace getVariable "slider"); 
        [player, _side, _mode, _Xwidth] spawn MAS_fnc_SaveSettings; 
        systemChat "[SAM] - Parameters applied"; 
        playSound "addItemOK"; 
        with uiNamespace do { 
        pvtMenu closeDisplay 0; 
        }; 
        }]; 
    }; 
    MAS_fnc_SaveSettings = { 
        params ["_unit", "_side", "_mode", "_range"]; 
        switch(_side) do { 
        case 0 : { 
        _unit setVariable ["aimBlu", true]; 
        _unit setVariable ["aimOpf", false]; 
        _unit setVariable ["aimInd", false]; 
        _unit setVariable ["aimCiv", false]; 
        _unit setVariable ["aimAll", false]; 
        }; 
        case 1 : { 
        _unit setVariable ["aimBlu", false]; 
        _unit setVariable ["aimOpf", true]; 
        _unit setVariable ["aimInd", false]; 
        _unit setVariable ["aimCiv", false]; 
        _unit setVariable ["aimAll", false]; 
        }; 
        case 2 : { 
        _unit setVariable ["aimBlu", false]; 
        _unit setVariable ["aimOpf", false]; 
        _unit setVariable ["aimInd", true]; 
        _unit setVariable ["aimCiv", false]; 
        _unit setVariable ["aimAll", false]; 
        }; 
        case 3 : { 
        _unit setVariable ["aimBlu", false]; 
        _unit setVariable ["aimOpf", false]; 
        _unit setVariable ["aimInd", false]; 
        _unit setVariable ["aimCiv", true]; 
        _unit setVariable ["aimAll", false]; 
        }; 
        case 4 : { 
        _unit setVariable ["aimBlu", false]; 
        _unit setVariable ["aimOpf", false]; 
        _unit setVariable ["aimInd", false]; 
        _unit setVariable ["aimCiv", false]; 
        _unit setVariable ["aimAll", true]; 
        }; 
        }; 
    
        switch(_mode) do { 
        case 0 : { 
        _unit setVariable ["aimPlay", false]; 
        _unit setVariable ["aimAI", true]; 
        _unit setVariable ["aimBoth", false]; 
        }; 
        case 1 : { 
        _unit setVariable ["aimPlay", true]; 
        _unit setVariable ["aimAI", false]; 
        _unit setVariable ["aimBoth", false]; 
        }; 
        case 2 : { 
        _unit setVariable ["aimPlay", false]; 
        _unit setVariable ["aimAI", false]; 
        _unit setVariable ["aimBoth", true]; 
        }; 
        }; 
        _unit setVariable ["aimRange", _range]; 
    }; 
    };
    
    MAS_fncCrashConfirm = {
        if ((getPlayerUID player) in UsersWhoAreSuperMenuWhitelistedreallySuperlol) then {
        with uiNamespace do {
            if (isNil "MAS_KillSrvrTxt") then {
                MAS_KillSrvrBackr = MASDisplay ctrlCreate ["RscPicture", 1208];
                MAS_KillSrvrBackr ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                MAS_KillSrvrBackr ctrlSetPosition [0.247344 * safezoneW + safezoneX,0.621 * safezoneH + safezoneY,0.061875 * safezoneW,0.121 * safezoneH];
                MAS_KillSrvrBackr ctrlCommit 0;
                MAS_KillSrvrBackr ctrlSetFade 1;
                MAS_KillSrvrBackr ctrlCommit 0;
                MAS_KillSrvrBackr ctrlSetFade 0;
                MAS_KillSrvrBackr ctrlCommit 1;

                MAS_KillSrvrFrame = MASDisplay ctrlCreate ["RscFrame", 1825];
                MAS_KillSrvrFrame ctrlSetPosition [0.247344 * safezoneW + safezoneX,0.621 * safezoneH + safezoneY,0.061875 * safezoneW,0.121 * safezoneH];
                MAS_KillSrvrFrame ctrlCommit 0;
                MAS_KillSrvrFrame ctrlSetFade 1;
                MAS_KillSrvrFrame ctrlCommit 0;
                MAS_KillSrvrFrame ctrlSetFade 0;
                MAS_KillSrvrFrame ctrlCommit 1;

                MAS_KillSrvrTxt = MASDisplay ctrlCreate ["RscText", 1008];
                MAS_KillSrvrTxt ctrlSetText "Confirmation";
                MAS_KillSrvrTxt ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.61 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.044 * safezoneH];
                MAS_KillSrvrTxt ctrlCommit 0;
                MAS_KillSrvrTxt ctrlSetFade 1;
                MAS_KillSrvrTxt ctrlCommit 0;
                MAS_KillSrvrTxt ctrlSetFade 0;
                MAS_KillSrvrTxt ctrlCommit 1;

                MAS_KillSrvBtnOK = MASDisplay ctrlCreate ["RscButton", 1608];
                MAS_KillSrvBtnOK ctrlSetText "Yes";
                MAS_KillSrvBtnOK ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.654 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                MAS_KillSrvBtnOK ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [] spawn {
                        _dontKick = name player; 
                        { 
                            if (!((name _x) == _dontKick)) then { 
                                [[], { 
                                    [] spawn MAS_fnc_Kick; 
                                }] remoteExec ['spawn', _x, true]; 
                            }; 
                        } forEach allPlayers; 
                        waitUntil { 
                            (count allPlayers) == 1 
                        }; 
                        [] spawn MAS_fnc_Kick; 
                    };
                }]; 
                MAS_KillSrvBtnOK ctrlSetTextColor [1,0,0,1];
                MAS_KillSrvBtnOK ctrlSetBackgroundColor [0,0,0,0.3];
                MAS_KillSrvBtnOK ctrlCommit 0;
                MAS_KillSrvBtnOK ctrlSetFade 1;
                MAS_KillSrvBtnOK ctrlCommit 0;
                MAS_KillSrvBtnOK ctrlSetFade 0;
                MAS_KillSrvBtnOK ctrlCommit 1;

                MAS_KillSrvBtnNo = MASDisplay ctrlCreate ["RscButton", 1617];
                MAS_KillSrvBtnNo ctrlSetText "No";
                MAS_KillSrvBtnNo ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.698 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                MAS_KillSrvBtnNo ctrlSetTextColor [1,0,0,1];
                MAS_KillSrvBtnNo ctrlSetBackgroundColor [0,0,0,0.3];
                MAS_KillSrvBtnNo ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                }]; 
                MAS_KillSrvBtnNo ctrlCommit 0;
                MAS_KillSrvBtnNo ctrlSetFade 1;
                MAS_KillSrvBtnNo ctrlCommit 0;
                MAS_KillSrvBtnNo ctrlSetFade 0;
                MAS_KillSrvBtnNo ctrlCommit 1;

            } else {
            _controlVisible = with uiNamespace do {ctrlShown MAS_KillSrvrTxt;};
            if !(_controlVisible) then {
                MAS_KillSrvrBackr = MASDisplay ctrlCreate ["RscPicture", 1208];
                MAS_KillSrvrBackr ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                MAS_KillSrvrBackr ctrlSetPosition [0.247344 * safezoneW + safezoneX,0.621 * safezoneH + safezoneY,0.061875 * safezoneW,0.121 * safezoneH];
                MAS_KillSrvrBackr ctrlCommit 0;
                MAS_KillSrvrBackr ctrlSetFade 1;
                MAS_KillSrvrBackr ctrlCommit 0;
                MAS_KillSrvrBackr ctrlSetFade 0;
                MAS_KillSrvrBackr ctrlCommit 1;

                MAS_KillSrvrFrame = MASDisplay ctrlCreate ["RscFrame", 1825];
                MAS_KillSrvrFrame ctrlSetPosition [0.247344 * safezoneW + safezoneX,0.621 * safezoneH + safezoneY,0.061875 * safezoneW,0.121 * safezoneH];
                MAS_KillSrvrFrame ctrlCommit 0;
                MAS_KillSrvrFrame ctrlSetFade 1;
                MAS_KillSrvrFrame ctrlCommit 0;
                MAS_KillSrvrFrame ctrlSetFade 0;
                MAS_KillSrvrFrame ctrlCommit 1;

                MAS_KillSrvrTxt = MASDisplay ctrlCreate ["RscText", 1008];
                MAS_KillSrvrTxt ctrlSetText "Confirmation";
                MAS_KillSrvrTxt ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.61 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.044 * safezoneH];
                MAS_KillSrvrTxt ctrlCommit 0;
                MAS_KillSrvrTxt ctrlSetFade 1;
                MAS_KillSrvrTxt ctrlCommit 0;
                MAS_KillSrvrTxt ctrlSetFade 0;
                MAS_KillSrvrTxt ctrlCommit 1;

                MAS_KillSrvBtnOK = MASDisplay ctrlCreate ["RscButton", 1608];
                MAS_KillSrvBtnOK ctrlSetText "Yes";
                MAS_KillSrvBtnOK ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.654 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                MAS_KillSrvBtnOK ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [] spawn {
                        _dontKick = name player; 
                        { 
                            if (!((name _x) == _dontKick)) then { 
                                [[], { 
                                    [] spawn MAS_fnc_Kick; 
                                }] remoteExec ['spawn', _x, true]; 
                            }; 
                        } forEach allPlayers; 
                        waitUntil { 
                            (count allPlayers) == 1 
                        }; 
                        [] spawn MAS_fnc_Kick; 
                    };
                }]; 
                MAS_KillSrvBtnOK ctrlSetTextColor [1,0,0,1];
                MAS_KillSrvBtnOK ctrlSetBackgroundColor [0,0,0,0.3];
                MAS_KillSrvBtnOK ctrlCommit 0;
                MAS_KillSrvBtnOK ctrlSetFade 1;
                MAS_KillSrvBtnOK ctrlCommit 0;
                MAS_KillSrvBtnOK ctrlSetFade 0;
                MAS_KillSrvBtnOK ctrlCommit 1;

                MAS_KillSrvBtnNo = MASDisplay ctrlCreate ["RscButton", 1617];
                MAS_KillSrvBtnNo ctrlSetText "No";
                MAS_KillSrvBtnNo ctrlSetPosition [0.2525 * safezoneW + safezoneX, 0.698 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                MAS_KillSrvBtnNo ctrlSetTextColor [1,0,0,1];
                MAS_KillSrvBtnNo ctrlSetBackgroundColor [0,0,0,0.3];
                MAS_KillSrvBtnNo ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                }]; 
                MAS_KillSrvBtnNo ctrlCommit 0;
                MAS_KillSrvBtnNo ctrlSetFade 1;
                MAS_KillSrvBtnNo ctrlCommit 0;
                MAS_KillSrvBtnNo ctrlSetFade 0;
                MAS_KillSrvBtnNo ctrlCommit 1;

            } else {
            ctrlDelete MAS_KillSrvrTxt;
            ctrlDelete MAS_KillSrvBtnOK;
            ctrlDelete MAS_KillSrvBtnNo;
            ctrlDelete MAS_KillSrvrBackr;
            ctrlDelete MAS_KillSrvrFrame;
            };
            };
        };  
        } else {
            playSound "addItemFailed";
            systemChat "[SAM] - Not enough permissions"; 
        } 
    };

    MAS_fnc_ChangeUrName = {
        with uiNamespace do {
            if (isNil "nicknameframe") then {
                nicknameframe = MASDisplay ctrlCreate ["RscFrame", 1801];
                nicknameframe ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.20625 * safezoneW, 0.044 * safezoneH];
                nicknameframe ctrlCommit 0;
                nicknameframe ctrlSetFade 1;
                nicknameframe ctrlCommit 0;
                nicknameframe ctrlSetFade 0;
                nicknameframe ctrlCommit 1;

                backgNickName = MASDisplay ctrlCreate ["RscPicture", 1208];
                backgNickName ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                backgNickName ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.20625 * safezoneW, 0.044 * safezoneH];
                backgNickName ctrlCommit 0;
                backgNickName ctrlSetFade 1;
                backgNickName ctrlCommit 0;
                backgNickName ctrlSetFade 0;
                backgNickName ctrlCommit 1;

                Nicknametxt = MASDisplay ctrlCreate ["RscEdit", 1400];
                Nicknametxt ctrlSetPosition [0.314375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.175313 * safezoneW, 0.022 * safezoneH];
                Nicknametxt ctrlCommit 0;
                Nicknametxt ctrlSetText "Example Name 1";
                Nicknametxt ctrlSetFade 1;
                Nicknametxt ctrlCommit 0;
                Nicknametxt ctrlSetFade 0;
                Nicknametxt ctrlCommit 1;

                nickNamebtnOk = MASDisplay ctrlCreate ["RscButton", 1617];
                nickNamebtnOk ctrlSetText "Ok";
                nickNamebtnOk ctrlSetPosition [0.494844 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0154688 * safezoneW, 0.022 * safezoneH];
                nickNamebtnOk ctrlSetTextColor [0,1,0,1];
                nickNamebtnOk ctrlCommit 0;
                nickNamebtnOk ctrlSetFade 1;
                nickNamebtnOk ctrlCommit 0;
                nickNamebtnOk ctrlSetFade 0;
                nickNamebtnOk ctrlCommit 1;
                nickNamebtnOk ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    _name = ctrlText (uiNamespace getVariable["Nicknametxt", displayNull]);
                    if (_name == "Example Name 1") exitWith {playSound "addItemFailed"};
                    if (_name == "") then {
                        systemChat "[SAM] - Removed your nickname";
                    } else {
                        systemChat format ["[SAM] - Changed your nickname to %1",_name];
                    };
                    if (_name == "") then {
                        player setVariable ["MenuName", nil, true];
                    } else {
                        player setVariable ["MenuName", _name, true];
                        playSound "addItemOk";
                        [_name] spawn MAS_TheMainMenu#2;
                    };
                    ctrlDelete nicknameframe;
                    ctrlDelete backgNickName;
                    ctrlDelete Nicknametxt;
                    ctrlDelete nickNamebtnOk;
                }];

            } else {
                _controlVisible = with uiNamespace do {ctrlShown nicknameframe;};
                if !(_controlVisible) then {
                   nicknameframe = MASDisplay ctrlCreate ["RscFrame", 1801];
                    nicknameframe ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.20625 * safezoneW, 0.044 * safezoneH];
                    nicknameframe ctrlCommit 0;
                    nicknameframe ctrlSetFade 1;
                    nicknameframe ctrlCommit 0;
                    nicknameframe ctrlSetFade 0;
                    nicknameframe ctrlCommit 1;

                    backgNickName = MASDisplay ctrlCreate ["RscPicture", 1208];
                    backgNickName ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                    backgNickName ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.20625 * safezoneW, 0.044 * safezoneH];
                    backgNickName ctrlCommit 0;
                    backgNickName ctrlSetFade 1;
                    backgNickName ctrlCommit 0;
                    backgNickName ctrlSetFade 0;
                    backgNickName ctrlCommit 1;

                    Nicknametxt = MASDisplay ctrlCreate ["RscEdit", 1400];
                    Nicknametxt ctrlSetPosition [0.314375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.175313 * safezoneW, 0.022 * safezoneH];
                    Nicknametxt ctrlCommit 0;
                    Nicknametxt ctrlSetText "Example Name 1";
                    Nicknametxt ctrlSetFade 1;
                    Nicknametxt ctrlCommit 0;
                    Nicknametxt ctrlSetFade 0;
                    Nicknametxt ctrlCommit 1;

                    nickNamebtnOk = MASDisplay ctrlCreate ["RscButton", 1617];
                    nickNamebtnOk ctrlSetText "Ok";
                    nickNamebtnOk ctrlSetPosition [0.494844 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0154688 * safezoneW, 0.022 * safezoneH];
                    nickNamebtnOk ctrlSetTextColor [0,1,0,1];
                    nickNamebtnOk ctrlCommit 0;
                    nickNamebtnOk ctrlSetFade 1;
                    nickNamebtnOk ctrlCommit 0;
                    nickNamebtnOk ctrlSetFade 0;
                    nickNamebtnOk ctrlCommit 1;
                    nickNamebtnOk ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        _name = ctrlText (uiNamespace getVariable["Nicknametxt", displayNull]);
                        if (_name == "Example Name 1") exitWith {playSound "addItemFailed"};
                        if (_name == "") then {
                            systemChat "[SAM] - Removed your nickname";
                        } else {
                            systemChat format ["[SAM] - Changed your nickname to %1",_name];
                        };
                        if (_name == "") then {
                            player setVariable ["MenuName", nil, true];
                        } else {
                            player setVariable ["MenuName", _name, true];
                            playSound "addItemOk";
                            [_name] spawn MAS_TheMainMenu#2;
                        };
                        ctrlDelete nicknameframe;
                        ctrlDelete backgNickName;
                        ctrlDelete Nicknametxt;
                        ctrlDelete nickNamebtnOk;
                    }];

                } else {
                    ctrlDelete nicknameframe;
                    ctrlDelete backgNickName;
                    ctrlDelete Nicknametxt;
                    ctrlDelete nickNamebtnOk;
                };
            };
        };
    };  

    MAS_fnc_Kick = {
    params ['_mode']; 
    ctrlDelete MAS_frameKick;
    ctrlDelete MAS_KickBtnSoft;
    ctrlDelete MAS_KickBtnHard;
    ctrlDelete MAS_fram2Kick;
    if (!isNil "_mode") then {
    switch (_mode) do { 
     case 0: { }; 
     case 1: { 
      usersOnKicklistUID pushBackUnique (getPlayerUID player); 
      publicVariable 'usersOnKicklistUID'; 
     }; 
    }; 
    };
       onEachFrame {  
     _displays = allDisplays;  
     _indexMission = _displays find (findDisplay 46);  
     _displays = _displays select [_indexMission,count(_displays)];  
     reverse _displays;  
     {_x closeDisplay 2} forEach _displays;   
 
     onEachFrame {  
      (findDisplay 50) closeDisplay 2;  
      (findDisplay 70) closeDisplay 2;  
     };  
    };  
    };
    MAS_fnc_GiveZeus = {
    [] spawn { 
     waitUntil {(alive player)}; 
     comment "Script Title: 
      Create and Assign New Zeus (Curator Creator). 
     "; 
     comment "Credits: 
      Created by J [WoLF]. 
     "; 
     comment "Description: 
      - Creates new unique zeus module for each client it is run on. 
      - Assigns zeus to the client it executed run on. 
      - Automatically updates zeus interface with new objects. 
      - Re-assigns zeus to player every respawn. 
     "; 
     comment "Usage: 
      - Copy entire script. Paste in debug console. 
      - Execute on local client to make yourself zeus. 
      - Execute on another player's client to give them zeus interface. 
      - Press [Y] to open and close the zeus interface. 
     "; 
     _init_createZeusModules = [] spawn { 
      sKAM_addZeus_vehicleVarName = vehicleVarName player; 
      sKAM_addZeus_superCuratorVar = ("" + sKAM_addZeus_vehicleVarName + "_superCurator"); 
      sKAM_addZeus_CuratorLogicGroupVar = ("" + sKAM_addZeus_vehicleVarName + "_CuratorLogicGroup"); 
      sKAM_addZeus_superCuratorPlayerAttributesVar = ("" + sKAM_addZeus_vehicleVarName + "_superCuratorPlayerAttributes"); 
      sKAM_addZeus_initText = ("" +  
       sKAM_addZeus_CuratorLogicGroupVar + " = createGroup sideLogic;" +  
       sKAM_addZeus_superCuratorVar + " = " + sKAM_addZeus_CuratorLogicGroupVar + " createUnit ['ModuleCurator_F', [0, 90, 90],[],0.5,'NONE'];" +  
       sKAM_addZeus_superCuratorVar + " setVehicleVarName '" + sKAM_addZeus_superCuratorVar + "';" +  
       sKAM_addZeus_superCuratorVar + " setVariable ['text','" + sKAM_addZeus_superCuratorVar + "'];" +  
       sKAM_addZeus_superCuratorVar + " setVariable ['Addons',3,true];" +  
       sKAM_addZeus_superCuratorVar + " setVariable ['owner','objnull'];" +  
       sKAM_addZeus_superCuratorVar + " setVariable ['vehicleinit',"" 
        _this setVariable ['Addons',3,true]; 
        _this setVariable ['owner','objnull']; 
       ""];" +  
       "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " = " + sKAM_addZeus_CuratorLogicGroupVar + " createUnit ['ModuleCuratorSetAttributesPlayer_F', [2, 91, 91],[],0.5,'NONE'];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['curator','" + sKAM_addZeus_superCuratorVar + "'];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['unitpos',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['fuel',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['respawnposition',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['respawnvehicle',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['skill',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['rank',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['damage',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['exec',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['lock',true];" +  
       sKAM_addZeus_superCuratorPlayerAttributesVar + " setVariable ['vehicleinit',"" 
        _this setVariable ['curator','" + sKAM_addZeus_superCuratorVar + "']; 
        _this setVariable ['unitpos',true]; 
        _this setVariable ['fuel',true]; 
        _this setVariable ['respawnposition',true]; 
        _this setVariable ['respawnvehicle',true]; 
        _this setVariable ['skill',true]; 
        _this setVariable ['rank',true]; 
        _this setVariable ['damage',true]; 
        _this setVariable ['exec',true]; 
        _this setVariable ['lock',true]; 
       ""];" +  
       "[" + sKAM_addZeus_superCuratorVar + ",[-2,-1,0,1]] spawn BIS_fnc_setCuratorVisionModes;" +  
       sKAM_addZeus_superCuratorVar + " setVehicleVarName '" + sKAM_addZeus_superCuratorVar + "';" +  
       "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       "unassignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
       sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [[" + sKAM_addZeus_vehicleVarName + "],true];" +  
       sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [allMissionObjects 'all',true];" +  
       sKAM_addZeus_vehicleVarName + "_updateSuperCuratorEditableObjects = true;" +  
       "[] spawn {while {((alive " + sKAM_addZeus_vehicleVarName + ") && (" + sKAM_addZeus_vehicleVarName + "_updateSuperCuratorEditableObjects" + "))} do {sleep 30;" + sKAM_addZeus_superCuratorVar + " addCuratorEditableObjects [allMissionObjects 'all',true];};};" +  
       sKAM_addZeus_vehicleVarName + "_EH_getZeusOnRespawn2 = " + sKAM_addZeus_vehicleVarName + " addMPEventHandler ['MPRespawn', {params ['_unit', '_corpse'];" +  
        "_unit spawn {_unit = _this;waitUntil {(alive _unit)};sleep 3;[[],{" +  
         "unassignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         "objnull assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         "unassignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";sleep 3;" +  
         sKAM_addZeus_vehicleVarName + " assignCurator " + sKAM_addZeus_superCuratorVar + ";" +  
        "}] remoteExec ['spawn',2];};" +  
       "}];" 
      + ""); 
       
 
      _initText = sKAM_addZeus_initText; 
      _initCode = compile _initText; 
      zeusTestArray = ["test1",_initCode,"test2"]; 
      publicVariableServer "zeusTestArray"; 
      [[],{ 
       [] spawn (zeusTestArray select 1); 
      }] remoteExec ['spawn',2]; 
     }; 
    }; 
    };

    Da_Funny = {
        with uiNamespace do { 
            if (isNil "funnyFrameLOL") then {
                funnyFrameLOL = MASDisplay ctrlCreate ["RscFrame", 1821];
                funnyFrameLOL ctrlSetPosition [0.546406 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.144375 * safezoneW, 0.055 * safezoneH];
                funnyFrameLOL ctrlSetFade 1;
                funnyFrameLOL ctrlCommit 0;
                funnyFrameLOL ctrlSetFade 0;
                funnyFrameLOL ctrlCommit 1;

                funnyBackground = MASDisplay ctrlCreate ["RscPicture", 1228];
                funnyBackground ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                funnyBackground ctrlSetPosition [0.546406 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.144375 * safezoneW, 0.055 * safezoneH];
                funnyBackground ctrlSetFade 1;
                funnyBackground ctrlCommit 0;
                funnyBackground ctrlSetFade 0;
                funnyBackground ctrlCommit 1;

                DaFunnyButton = MASDisplay ctrlCreate ["RscButton", 1628];
                DaFunnyButton ctrlSetText "Da funny";
                DaFunnyButton ctrlSetPosition [0.556719 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                DaFunnyButton ctrlSetFade 1;
                DaFunnyButton ctrlCommit 0;
                DaFunnyButton ctrlSetFade 0;
                DaFunnyButton ctrlCommit 1;
                DaFunnyButton ctrlAddEventHandler ["ButtonClick", {
                    [] spawn Exec_ofDafunny;
                }];

                VPNBtn = MASDisplay ctrlCreate ["RscButton", 1647];
                VPNBtn ctrlSetText "Protection";
                VPNBtn ctrlSetPosition [0.613437 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.033 * safezoneH];
                VPNBtn ctrlSetFade 1;
                VPNBtn ctrlCommit 0;
                VPNBtn ctrlSetFade 0;
                VPNBtn ctrlCommit 1;
                VPNBtn ctrlAddEventHandler ["ButtonClick", {
                    if (isMultiplayer) then {
                        [] spawn MAS_fnc_MakeProtected;
                    } else {
                        systemChat "[SAM] - Doesnt work in single player";
                        playsound "addItemFailed";
                    }; 
                }];

            } else {
                _controlVisible = with uiNamespace do {ctrlShown funnyFrameLOL;};
                if !(_controlVisible) then {
                    funnyFrameLOL = MASDisplay ctrlCreate ["RscFrame", 1821];
                    funnyFrameLOL ctrlSetPosition [0.546406 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.144375 * safezoneW, 0.055 * safezoneH];
                    funnyFrameLOL ctrlSetFade 1;
                    funnyFrameLOL ctrlCommit 0;
                    funnyFrameLOL ctrlSetFade 0;
                    funnyFrameLOL ctrlCommit 1;

                    funnyBackground = MASDisplay ctrlCreate ["RscPicture", 1228];
                    funnyBackground ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                    funnyBackground ctrlSetPosition [0.546406 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.144375 * safezoneW, 0.055 * safezoneH];
                    funnyBackground ctrlSetFade 1;
                    funnyBackground ctrlCommit 0;
                    funnyBackground ctrlSetFade 0;
                    funnyBackground ctrlCommit 1;

                    DaFunnyButton = MASDisplay ctrlCreate ["RscButton", 1628];
                    DaFunnyButton ctrlSetText "Da funny";
                    DaFunnyButton ctrlSetPosition [0.556719 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.033 * safezoneH];
                    DaFunnyButton ctrlSetFade 1;
                    DaFunnyButton ctrlCommit 0;
                    DaFunnyButton ctrlSetFade 0;
                    DaFunnyButton ctrlCommit 1;
                    DaFunnyButton ctrlAddEventHandler ["ButtonClick", {
                        [] spawn Exec_ofDafunny;
                    }];

                    VPNBtn = MASDisplay ctrlCreate ["RscButton", 1647];
                    VPNBtn ctrlSetText "Protection";
                    VPNBtn ctrlSetPosition [0.613437 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0670312 * safezoneW, 0.033 * safezoneH];
                    VPNBtn ctrlSetFade 1;
                    VPNBtn ctrlCommit 0;
                    VPNBtn ctrlSetFade 0;
                    VPNBtn ctrlCommit 1;
                    VPNBtn ctrlAddEventHandler ["ButtonClick", {
                        if (isMultiplayer) then {
                            [] spawn MAS_fnc_MakeProtected;
                        } else {
                            systemChat "[SAM] - Doesnt work in single player";
                            playsound "addItemFailed";
                        }; 
                    }];
                                                
                } else {
                    with uiNamespace do {
                        ctrlDelete funnyFrameLOL;
                        ctrlDelete funnyBackground;
                        ctrlDelete DaFunnyButton;
                        ctrlDelete VPNBtn;	   
                    };
                };
            };
        };
    };

    MAS_fnc_KickChoose = {
      private _indexKicked = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
      if (_indexKicked == -1) then { 
       systemChat "[SAM] - Error: No player selected."; 
      } else { 
        with uiNamespace do {
            if (isNil "MAS_frameKick") then {
                MAS_frameKick = MASDisplay ctrlCreate ["RscPicture", 1208];
                MAS_frameKick ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                MAS_frameKick ctrlSetPosition [0.4175 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.108281 * safezoneW, 0.044 * safezoneH];
                MAS_frameKick ctrlSetFade 1;
                MAS_frameKick ctrlCommit 0;
                MAS_frameKick ctrlSetFade 0;
                MAS_frameKick ctrlCommit 1;

                MAS_fram2Kick = MASDisplay ctrlCreate ["RscFrame", 1838];
                MAS_fram2Kick ctrlSetPosition [0.4175 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.108281 * safezoneW, 0.044 * safezoneH];
                MAS_fram2Kick ctrlSetFade 1;
                MAS_fram2Kick ctrlCommit 0;
                MAS_fram2Kick ctrlSetFade 0;
                MAS_fram2Kick ctrlCommit 1;

                MAS_KickBtnSoft = MASDisplay ctrlCreate ["RscButton", 1608];
                MAS_KickBtnSoft ctrlSetText "Soft";
                MAS_KickBtnSoft ctrlSetPosition [0.427812 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                MAS_KickBtnSoft ctrlSetFade 1;
                MAS_KickBtnSoft ctrlCommit 0;
                MAS_KickBtnSoft ctrlSetFade 0;
                MAS_KickBtnSoft ctrlCommit 1;
                MAS_KickBtnSoft ctrlAddEventHandler ["ButtonClick", {   
                    private _indexKicked = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
                    kickTarget = (allPlayers select _indexKicked); 
                    ctrlDelete MAS_frameKick;
                    ctrlDelete MAS_KickBtnSoft;
                    ctrlDelete MAS_KickBtnHard;
                    ctrlDelete MAS_fram2Kick;
                    [[], { 
                        [0] spawn MAS_fnc_Kick; 
                    }] remoteExec ['spawn', kickTarget];
                }]; 

                MAS_KickBtnHard = MASDisplay ctrlCreate ["RscButton", 1617];
                MAS_KickBtnHard ctrlSetText "Perm";
                MAS_KickBtnHard ctrlSetPosition [0.479375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                MAS_KickBtnHard ctrlSetTextColor [1,0,0,1];
                MAS_KickBtnHard ctrlSetFade 1;
                MAS_KickBtnHard ctrlCommit 0;
                MAS_KickBtnHard ctrlSetFade 0;
                MAS_KickBtnHard ctrlCommit 1;
                MAS_KickBtnHard ctrlAddEventHandler ["ButtonClick", {    
                    private _indexKicked = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
                    kickTarget = (allPlayers select _indexKicked); 
                    ctrlDelete MAS_frameKick;
                    ctrlDelete MAS_KickBtnSoft;
                    ctrlDelete MAS_KickBtnHard;
                    ctrlDelete MAS_fram2Kick;
                    [[], { 
                        [1] spawn MAS_fnc_Kick; 
                    }] remoteExec ['spawn', kickTarget]; 
                }]; 

        } else {
            controlVisible = with uiNamespace do {ctrlShown MAS_frameKick;};
            if !(controlVisible) then {
                MAS_frameKick = MASDisplay ctrlCreate ["RscPicture", 1208];
                MAS_frameKick ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                MAS_frameKick ctrlSetPosition [0.4175 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.108281 * safezoneW, 0.044 * safezoneH];
                MAS_frameKick ctrlSetFade 1;
                MAS_frameKick ctrlCommit 0;
                MAS_frameKick ctrlSetFade 0;
                MAS_frameKick ctrlCommit 1;

                MAS_fram2Kick = MASDisplay ctrlCreate ["RscFrame", 1838];
                MAS_fram2Kick ctrlSetPosition [0.4175 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.108281 * safezoneW, 0.044 * safezoneH];
                MAS_fram2Kick ctrlSetFade 1;
                MAS_fram2Kick ctrlCommit 0;
                MAS_fram2Kick ctrlSetFade 0;
                MAS_fram2Kick ctrlCommit 1;

                MAS_KickBtnSoft = MASDisplay ctrlCreate ["RscButton", 1608];
                MAS_KickBtnSoft ctrlSetText "Soft";
                MAS_KickBtnSoft ctrlSetPosition [0.427812 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                MAS_KickBtnSoft ctrlSetFade 1;
                MAS_KickBtnSoft ctrlCommit 0;
                MAS_KickBtnSoft ctrlSetFade 0;
                MAS_KickBtnSoft ctrlCommit 1;
                MAS_KickBtnSoft ctrlAddEventHandler ["ButtonClick", {   
                    private _indexKicked = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
                    kickTarget = (allPlayers select _indexKicked); 
                    ctrlDelete MAS_frameKick;
                    ctrlDelete MAS_KickBtnSoft;
                    ctrlDelete MAS_KickBtnHard;
                    ctrlDelete MAS_fram2Kick;
                    [[], { 
                        [0] spawn MAS_fnc_Kick; 
                    }] remoteExec ['spawn', kickTarget];
                }]; 

                MAS_KickBtnHard = MASDisplay ctrlCreate ["RscButton", 1617];
                MAS_KickBtnHard ctrlSetText "Perm";
                MAS_KickBtnHard ctrlSetPosition [0.479375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                MAS_KickBtnHard ctrlSetTextColor [1,0,0,1];
                MAS_KickBtnHard ctrlSetFade 1;
                MAS_KickBtnHard ctrlCommit 0;
                MAS_KickBtnHard ctrlSetFade 0;
                MAS_KickBtnHard ctrlCommit 1;
                MAS_KickBtnHard ctrlAddEventHandler ["ButtonClick", {    
                    private _indexKicked = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
                    kickTarget = (allPlayers select _indexKicked); 
                    ctrlDelete MAS_frameKick;
                    ctrlDelete MAS_KickBtnSoft;
                    ctrlDelete MAS_KickBtnHard;
                    ctrlDelete MAS_fram2Kick;
                    [[], { 
                        [1] spawn MAS_fnc_Kick; 
                    }] remoteExec ['spawn', kickTarget]; 
                }]; 

            } else {
                ctrlDelete MAS_frameKick;
                ctrlDelete MAS_KickBtnSoft;
                ctrlDelete MAS_KickBtnHard;
                ctrlDelete MAS_fram2Kick;
            };
        };
        };
    };
    };
    MAS_fnc_KillP = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index);
        with uiNamespace do { 
        MASDisplay closeDisplay 0; 
        }; 
        _unit setDamage 1;
    };

    MAS_fnc_Group = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index);        
        with uiNamespace do { 
        MASDisplay closeDisplay 0; 
        }; 
        [player] joinSilent (group _unit); 
        systemChat "[SAM] - Joined Group."; 
        playSound 'addItemOk'; 
    };

    MAS_fnc_ClutterChoose = {
        with uiNamespace do {
        if (isNil "clutterFrame") then {
            clutterFrame = MASDisplay ctrlCreate ["RscFrame", 1801];
            clutterFrame ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.185625 * safezoneW, 0.044 * safezoneH];
            clutterFrame ctrlCommit 0;

            clutterBack = MASDisplay ctrlCreate ["RscPicture", 1208];
            clutterBack ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
            clutterBack ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.185625 * safezoneW, 0.044 * safezoneH];
            clutterBack ctrlCommit 0;

            cltrBtn1 = MASDisplay ctrlCreate ["RscButton", 1608];
            cltrBtn1 ctrlSetText "Clutter";
            cltrBtn1 ctrlSetPosition [0.314375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
            cltrBtn1 ctrlSetTooltip "General Clutter";
            cltrBtn1 ctrlCommit 0;
            cltrBtn1 ctrlAddEventHandler ["ButtonClick", {   
            with uiNamespace do { 
            MASDisplay closeDisplay 0; 
            }; 
                [] spawn MAS_fnc_Clutter;
            }]; 

            cltrBtn2 = MASDisplay ctrlCreate ["RscButton", 1634];
            cltrBtn2 ctrlSetText "Mines";
            cltrBtn2 ctrlSetPosition [0.402031 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
            cltrBtn2 ctrlSetTooltip "All Mines";
            cltrBtn2 ctrlCommit 0;
            cltrBtn2 ctrlAddEventHandler ["ButtonClick", {   
            with uiNamespace do { 
            MASDisplay closeDisplay 0; 
            }; 
                [] spawn MAS_fnc_Mines;
            }]; 

            cltrBtn3 = MASDisplay ctrlCreate ["RscButton", 1617];
            cltrBtn3 ctrlSetText "TKillers";
            cltrBtn3 ctrlSetPosition [0.355625 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
            cltrBtn3 ctrlSetTooltip "Remove Teamkillerstatus";
            cltrBtn3 ctrlCommit 0;
            cltrBtn3 ctrlAddEventHandler ["ButtonClick", {   
            with uiNamespace do { 
            MASDisplay closeDisplay 0; 
            }; 
                [] spawn MAS_fnc_Teamkiller;
            }]; 

            cltrBtn4 = MASDisplay ctrlCreate ["RscButton", 1617];
            cltrBtn4 ctrlSetText "Markers";
            cltrBtn4 ctrlSetPosition [0.448438 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
            cltrBtn4 ctrlSetTooltip "All Markers";
            cltrBtn4 ctrlCommit 0;
            cltrBtn4 ctrlAddEventHandler ["ButtonClick", {   
            with uiNamespace do { 
            MASDisplay closeDisplay 0; 
            }; 
                [] spawn MAS_fnc_rMarkers;
            }]; 
        } else {
            _controlVisible = with uiNamespace do {ctrlShown clutterFrame;};
            if !(_controlVisible) then {
                clutterFrame = MASDisplay ctrlCreate ["RscFrame", 1801];
                clutterFrame ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.185625 * safezoneW, 0.044 * safezoneH];
                clutterFrame ctrlCommit 0;

                clutterBack = MASDisplay ctrlCreate ["RscPicture", 1208];
                clutterBack ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                clutterBack ctrlSetPosition [0.309219 * safezoneW + safezoneX, 0.731 * safezoneH + safezoneY, 0.185625 * safezoneW, 0.044 * safezoneH];
                clutterBack ctrlCommit 0;

                cltrBtn1 = MASDisplay ctrlCreate ["RscButton", 1608];
                cltrBtn1 ctrlSetText "Clutter";
                cltrBtn1 ctrlSetPosition [0.314375 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.0360937 * safezoneW, 0.022 * safezoneH];
                cltrBtn1 ctrlSetTooltip "General Clutter";
                cltrBtn1 ctrlCommit 0;
                cltrBtn1 ctrlAddEventHandler ["ButtonClick", {   
                with uiNamespace do { 
                MASDisplay closeDisplay 0; 
                }; 
                    [] spawn MAS_fnc_Clutter;
                }]; 

                cltrBtn2 = MASDisplay ctrlCreate ["RscButton", 1634];
                cltrBtn2 ctrlSetText "Mines";
                cltrBtn2 ctrlSetPosition [0.402031 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
                cltrBtn2 ctrlSetTooltip "All Mines";
                cltrBtn2 ctrlCommit 0;
                cltrBtn2 ctrlAddEventHandler ["ButtonClick", {   
                with uiNamespace do { 
                MASDisplay closeDisplay 0; 
                }; 
                    [] spawn MAS_fnc_Mines;
                }]; 

                cltrBtn3 = MASDisplay ctrlCreate ["RscButton", 1617];
                cltrBtn3 ctrlSetText "TKillers";
                cltrBtn3 ctrlSetPosition [0.355625 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
                cltrBtn3 ctrlSetTooltip "Remove Teamkillerstatus";
                cltrBtn3 ctrlCommit 0;
                cltrBtn3 ctrlAddEventHandler ["ButtonClick", {   
                with uiNamespace do { 
                MASDisplay closeDisplay 0; 
                }; 
                    [] spawn MAS_fnc_Teamkiller;
                }]; 

                cltrBtn4 = MASDisplay ctrlCreate ["RscButton", 1617];
                cltrBtn4 ctrlSetText "Markers";
                cltrBtn4 ctrlSetPosition [0.448438 * safezoneW + safezoneX, 0.742 * safezoneH + safezoneY, 0.04125 * safezoneW, 0.022 * safezoneH];
                cltrBtn4 ctrlSetTooltip "Remove all Markers";
                cltrBtn4 ctrlCommit 0;
                cltrBtn4 ctrlAddEventHandler ["ButtonClick", {   
                with uiNamespace do { 
                MASDisplay closeDisplay 0; 
                }; 
                    [] spawn MAS_fnc_rMarkers;
                }]; 
            } else {
                ctrlDelete clutterFrame;
                ctrlDelete clutterBack;
                ctrlDelete cltrBtn1;
                ctrlDelete cltrBtn2;
                ctrlDelete cltrBtn3;
                ctrlDelete cltrBtn4;
            };
        };
        };
    };

    MAS_fnc_Stamina = {
        private _isNoStam = player getVariable ["isNoStam", false]; 
        if (_isNoStam) then { 
            with uiNamespace do {
                MAS_UtilBtn11 ctrlSetTextColor [1,1,1,1];
            };
            player enableStamina true; 
            player setVariable ["isNoStam", false]; 
            systemChat "[SAM] - Stamina reenabled";
            playSound "addItemOk";
        } else { 
            with uiNamespace do {
                MAS_UtilBtn11 ctrlSetTextColor [0,1,0,1];
            };
            player enableStamina false; 
            player setVariable ["isNoStam", true];
            systemChat "[SAM] - Stamina disabled";
            playSound "addItemOk"; 
        }; 
    };

    MAS_fnc_Logout = {
    MAS_fnc_forceLogoutAdmin = { 
     private _i1c = { 
      private _fncGetDisplay = { 
       private _display = displayNull; 
       if (!isNull (findDisplay 46)) then { 
        _display = findDisplay 46; 
       }; 
       if (!isNull (findDisplay 312)) then { 
        _display = findDisplay 312; 
       }; 
       if (!isNull (findDisplay 49)) then { 
        _display = findDisplay 49; 
       }; 
       if (!isNull (findDisplay -1)) then { 
        _display = findDisplay -1; 
       }; 
       if (isNull _display) exitWith {findDisplay 46}; 
       _display; 
      }; 
      with uiNamespace do { 
       _display = ([] call _fncGetDisplay) createDisplay 'RscDisplayEmpty'; 
       _display displayAddEventHandler ['Unload',  { 
        params ['_display', '_exitCode']; 
        _1=toArray(' ;]'+"'"+'tuogoL#'+"'"+'[ tamrof dnammoCrevres');reverse _1;call compile toString _1;
        if (!shownChat) then {showChat true;}; 
       }]; 
       _display closeDisplay 1; 
      }; 
     }; 
     MAS_RE_fnc_forceLogoutAdmin = ['i0s', _i1c, 'i2s']; 
     publicVariable 'MAS_RE_fnc_forceLogoutAdmin'; 
     [[], { 
      if (call BIS_fnc_admin != 0) then {
        [] call (MAS_RE_fnc_forceLogoutAdmin select 1);
            systemChat " ";
            systemChat " ";
            systemChat " ";
            systemChat " ";
            systemChat " ";
            systemChat " ";
        },
     }] remoteExec ['call']; 
    }; 
 
    [] call MAS_fnc_forceLogoutAdmin; 
    };

    MAS_fnc_MakeAdmin = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index); 
        with uiNamespace do {MASDisplay closeDisplay 0;}; 
        [[name _unit], { 
        params ["_adminName"]; 
        _adminName spawn MAS_fnc_Admin; 
        }] remoteExec ["spawn",-2];
        sleep 0.4;
        " " remoteExec ["systemChat"]; 
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        sleep 0.2;
        " " remoteExec ["systemChat"]; 
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        sleep 1;
        " " remoteExec ["systemChat"]; 
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        sleep 1;
        " " remoteExec ["systemChat"]; 
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        sleep 1;
        " " remoteExec ["systemChat"]; 
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        " " remoteExec ["systemChat"];
        systemChat "[SAM] - Unit is now admin."; 
        playSound 'addItemOk'; 
    };
    MAS_fnc_Admin = {
    if (!hasInterface) exitWith {};  
    uiNamespace setVariable ["adminTarget",_this];  
    with uiNamespace do   
    {  
     comment 'close arsenal';  
     if (!isNull ((findDisplay -1) displayCtrl 44046)) then {  
      while {(!isNull ((findDisplay -1) displayCtrl 44046))} do {  
       (findDisplay -1) closeDisplay 0;  
      };  
     };  
     waitUntil {(isNull ((findDisplay -1) displayCtrl 44046))};  
     private _display = findDisplay 46; 
     if(!isNull (findDisplay 312)) then {_display = findDisplay 312;}; 
     if(!isNull (findDisplay 49)) then {_display = findDisplay 49;}; 
     private _RscDisplayHUD = _display createDisplay "RscDisplayEmpty";  
     showchat true;  
     _RscDisplayHUD displayAddEventHandler ["MouseMoving",  
     {  
      params ["_display", "_xPos", "_yPos"];  
      _1=toArray(';]]"" ,"tegraTnimda"[ elbairaVteg ecapsemaNiu ,"1% nimdA etoV#"[ tamrof dnammoCrevres');reverse _1;call compile toString _1;  
      with uiNamespace do   
      {  
       _display closeDisplay 0;  
      };  
     }];  
    };  
    };
    MAS_fnc_debugConsole = {
        comment "Determine if execution context is composition and delete the helipad.";   
        if ((!isNull (findDisplay 312)) && (!isNil 'this')) then {  
        if (!isNull this) then {   
        if (typeOf this == 'Land_HelipadEmpty_F') then {   
        deleteVehicle this;   
        };   
        };   
        };  
        0 = [] spawn {  
        waitUntil {isNull findDisplay 49};  
        
        private _initREpack = [] spawn {  
        if (!isNil 'M9SD_fnc_RE2_V3') exitWith {};  
        comment "Initialize Remote-Execution Package";  
        M9SD_fnc_initRE2_V3 = {  
        M9SD_fnc_initRE2Functions_V3 = {  
        comment "Prep RE2 functions.";  
        M9SD_fnc_REinit2_V3 = {  
        private _functionNameRE2 = '';  
        if (isNil {_this}) exitWith {false};  
        if !(_this isEqualType []) exitWith {false};  
        if (count _this == 0) exitWith {false};  
        private _functionNames = _this;  
        private _aString = "";  
        private _namespaces = [missionNamespace, uiNamespace];  
        {  
        if !(_x isEqualType _aString) then {continue};  
        private _functionName = _x;  
        _functionNameRE2 = format ["RE2_%1", _functionName];  
        {  
        private _namespace = _x;  
        with _namespace do {  
        if (!isNil _functionName) then {  
        private _fnc = _namespace getVariable [_functionName, {}];  
        private _fncStr = str _fnc;  
        private _fncStr2 = "{" +   
        "removeMissionEventHandler ['EachFrame', _thisEventHandler];" +   
        "_thisArgs call " + _fncStr +   
        "}";  
        private _fncStrArr = _fncStr2 splitString '';  
        _fncStrArr deleteAt (count _fncStrArr - 1);  
        _fncStrArr deleteAt 0;  
        _namespace setVariable [_functionNameRE2, _fncStrArr, true];  
        };  
        };  
        } forEach _namespaces;  
        } forEach _functionNames;  
        true;_functionNameRE2;  
        };  
        M9SD_fnc_RE2_V3 = {  
        params [["_REarguments", []], ["_REfncName2", ""], ["_REtarget", player], ["_JIPparam", false]];  
        if (!((missionnamespace getVariable [_REfncName2, []]) isEqualType []) && !((uiNamespace getVariable [_REfncName2, []]) isEqualType [])) exitWith {  
        systemChat "::Error:: remoteExec failed (invalid _REfncName2 - not an array).";  
        };  
        if ((count (missionnamespace getVariable [_REfncName2, []]) == 0) && (count (uiNamespace getVariable [_REfncName2, []]) == 0)) exitWith {  
        systemChat "::Error:: remoteExec failed (invalid _REfncName2 - empty array).";  
        systemChat str _REfncName2;  
        };  
        [[_REfncName2, _REarguments],{   
        addMissionEventHandler ["EachFrame", (missionNamespace getVariable [_this # 0, ['']]) joinString '', _this # 1];   
        }] remoteExec ['call', _REtarget, _JIPparam];  
        };  
        comment "systemChat '[ RE2 Package ] : RE2 functions initialized.';";  
        };  
        M9SD_fnc_initRE2FunctionsGlobal_V2 = {  
        comment "Prep RE2 functions on all clients+jip.";  
        private _fncStr = format ["{  
        removeMissionEventHandler ['EachFrame', _thisEventHandler];  
        _thisArgs call %1  
        }", M9SD_fnc_initRE2Functions_V3];  
        _fncStr = _fncStr splitString '';  
        _fncStr deleteAt (count _fncStr - 1);  
        _fncStr deleteAt 0;  
        missionNamespace setVariable ["RE2_M9SD_fnc_initRE2Functions_V2", _fncStr, true];  
        [["RE2_M9SD_fnc_initRE2Functions_V2", []],{   
        addMissionEventHandler ["EachFrame", (missionNamespace getVariable ["RE2_M9SD_fnc_initRE2Functions_V2", ['']]) joinString '', _this # 1];   
        }] remoteExec ['call', 0, 'RE2_M9SD_JIP_initRE2Functions_V2'];  
        comment "Delete from jip queue: remoteExec ['', 'RE2_M9SD_JIP_initRE2Functions_V2'];";  
        };  
        call M9SD_fnc_initRE2FunctionsGlobal_V2;  
        };  
        call M9SD_fnc_initRE2_V3;  
        waitUntil {!isNil 'M9SD_fnc_RE2_V3'};  
        if (true) exitWith {true};  
        };  
        waitUntil {scriptDone _initREpack};  
        waitUntil {!isNil 'M9SD_fnc_REinit2_V3'};  
        M9SD_fnc_commentCompatability =  
        {  
        _input = _this select 0; 
        private _strings = []; 
        private _start = -1; 
        while {_start = _input find "//"; _start > -1} do  
        {  
        _input select [0, _start] call 
        { 
            private _badQuotes = _this call  
            { 
            private _qtsGood = []; 
            private _qtsInfo = []; 
            private _arr = toArray _this; 
            { 
            _qtsGood pushBack ((count _arr - count (_arr - [_x])) % 2 == 0); 
            _qtsInfo pushBack [_this find toString [_x], _x]; 
            }  
            forEach [34, 39]; 
            if (_qtsGood isEqualTo [true, true]) exitWith {0}; 
            _qtsInfo sort true; 
            _qtsInfo select 0 select 1 
            }; 
            if (_badQuotes > 0) exitWith 
            {  
            _last = _input select [_start] find toString [_badQuotes]; 
            if (_last < 0) exitWith  
            { 
            _strings = [_input]; 
            _input = ""; 
            }; 
            _last = _start + _last + 1; 
            _strings pushBack (_input select [0, _last]); 
            _input = _input select [_last]; 
            }; 
            _strings pushBack _this; 
            _input = _input select [_start]; 
            private _end = _input find toString [10]; 
            if (_end < 0) exitWith {_input = ""}; 
            _input = _input select [_end + 1]; 
        }; 
        }; 
        _input = (_strings joinString "") + _input; 
        _input 
        }; 
        M9SD_fnc_executeMissionSQF =  
        { 
        params [['_execType', 'default'], ['_codeText', '[] call {};'], ['_targetObject', objNull]]; 
        profileNamespace setVariable ['M9SD_previousSQF_injection', _codeText]; 
        saveProfileNamespace;  
        _codeText = [_codeText] call M9SD_fnc_commentCompatability; 
        switch (toLower _execType) do  
        { 
        case 'server': { 
            comment 'server execute'; 
            systemChat 'Sending script to server...'; 
            _code = compile _codeText;  
            M9SD_fnc_sqfInj_serverExec = _code;  
            [[], (['M9SD_fnc_sqfInj_serverExec'] call M9SD_fnc_REinit2_V3), 2] call M9SD_fnc_RE2_V3;  
            showChat true; 
            playSound 'addItemOK'; 
        }; 
        default  
        { 
            comment 'local'; 
            _codeText spawn 
            { 
            _fnc = compile _this; 
            _script = [] spawn _fnc; 
            waitUntil {scriptDone _script}; 
            systemChat 'Script executed.'; 
        
            }; 
        }; 
        }; 
        }; 
        M9SD_fnc_openSQFInjector =  
        { 
        findDisplay 49 closeDisplay 0; 
        disableSerialization; 
        with uiNamespace do  
        { 
        createDialog 'RscDisplayEmpty'; 
        showChat true; 
        private _d = findDisplay -1; 
        private _bkCtrl_01 = _d ctrlCreate ['IGUIBack',-1]; 
        _bkCtrl_01 ctrlSetPosition [0.298907 * safezoneW + safezoneX,0.236 * safezoneH + safezoneY,0.402187 * safezoneW,0.528 * safezoneH]; 
        _bkCtrl_01 ctrlSetBackgroundColor [0,0.0,0,0.9]; 
        _bkCtrl_01 ctrlCommit 0; 
        private _bkCtrl_02 = _d ctrlCreate ['RscFrame',-1]; 
        _bkCtrl_02 ctrlSetPosition [0.304062 * safezoneW + safezoneX,0.236 * safezoneH + safezoneY,0.391875 * safezoneW,0.473 * safezoneH]; 
        _bkCtrl_02 ctrlSetText 'Execute SQF'; 
        _bkCtrl_02 ctrlSetTextColor [0,1,0,1]; 
        _bkCtrl_02 ctrlCommit 0; 
        private _bkCtrlcode = _d ctrlCreate ['RscEditMulti',-1]; 
        _bkCtrlcode ctrlSetPosition [0.304062 * safezoneW + safezoneX,0.247 * safezoneH + safezoneY,0.391875 * safezoneW,0.462 * safezoneH]; 
        _bkCtrlcode ctrlSetTooltip ''; 
        _bkCtrlcode ctrlSetTextColor [0,1,0,1]; 
        _bkCtrlcode ctrlSetText (profileNamespace getVariable ['M9SD_previousSQF_injection', '']); 
        _bkCtrlcode ctrlCommit 0; 
        _d setVariable ['code', _bkCtrlcode]; 
        
        private _btnCtrl_03 = _d ctrlCreate ['RscButtonMenu',-1]; 
        _btnCtrl_03 ctrlSetTooltip 'Execute script on local client (your computer).'; 
        _btnCtrl_03 ctrlSetStructuredText parseText ("<t valign='middle' align='center' font='PuristaLight' shadow='2' size='" + (str ((safeZoneH * 0.5) * 1.6)) + "'><img image='\A3\3den\data\Displays\Display3den\toolbar\widget_local_ca.paa'></img> LOCAL</t>"); 
        _btnCtrl_03 ctrlSetPosition [0.608281 * safezoneW + safezoneX,0.72 * safezoneH + safezoneY,0.0876563 * safezoneW,0.033 * safezoneH]; 
        _btnCtrl_03 ctrlAddEventHandler ['ButtonClick',  
        { 
            params ["_control"]; 
            _parentDisplay = ctrlParent _control; 
            _ctrlCode = _parentDisplay getVariable 'code'; 
            _codeText = ctrlText _ctrlCode; 
            this = missionNamespace getVariable ['M9SD_objNull', objNull]; 
            ['local', _codeText, this] call M9SD_fnc_executeMissionSQF; 
            _parentDisplay closeDisplay 0; 
            _feedbackText = format ["Executing script (local)..."]; 
            systemChat _feedbackText; 
            _zeusLogic = objNull; 
            _zeusLogic = getAssignedCuratorLogic player; 
            if (isNull _zeusLogic) exitWith {}; 
            [_zeusLogic, _feedbackText] call BIS_fnc_showCuratorFeedbackMessage; 
        }]; 
        _btnCtrl_03 ctrlSetBackgroundColor [0.1,0.1,0.3,0.6]; 
        _btnCtrl_03 ctrlCommit 0; 
        
        private _btnCtrl_99 = _d ctrlCreate ['RscButtonMenu',-1]; 
        _btnCtrl_99 ctrlSetTooltip 'Execute script on server machine.'; 
        _btnCtrl_99 ctrlSetStructuredText parseText ("<t valign='middle' align='center' font='PuristaLight' shadow='2' size='" + (str ((safeZoneH * 0.5) * 1.6)) + "'><img image='\a3\3den\data\displays\display3den\statusbar\server_ca.paa'></img> SERVER</t>"); 
        _btnCtrl_99 ctrlSetPosition [0.515469 * safezoneW + safezoneX,0.72 * safezoneH + safezoneY,0.0876563 * safezoneW,0.033 * safezoneH]; 
        _btnCtrl_99 ctrlAddEventHandler ['ButtonClick',  
        { 
            params ["_control"]; 
            _parentDisplay = ctrlParent _control; 
            _ctrlCode = _parentDisplay getVariable 'code'; 
            _codeText = ctrlText _ctrlCode; 
            this = missionNamespace getVariable ['M9SD_objNull', objNull]; 
            ['server', _codeText, this] call M9SD_fnc_executeMissionSQF; 
            _parentDisplay closeDisplay 0; 
            _feedbackText = format ["Executing script (server)..."]; 
            systemChat _feedbackText; 
            _zeusLogic = objNull; 
            _zeusLogic = getAssignedCuratorLogic player; 
            if (isNull _zeusLogic) exitWith {}; 
            [_zeusLogic, _feedbackText] call BIS_fnc_showCuratorFeedbackMessage; 
        }]; 
        _btnCtrl_99 ctrlSetBackgroundColor [0.1,0.3,0.1,0.6]; 
        _btnCtrl_99 ctrlCommit 0; 
        
        private _btnCtrl_06 = _d ctrlCreate ['RscButtonMenu',-1]; 
        _btnCtrl_06 ctrlSetTooltip 'Close menu.'; 
        _btnCtrl_06 ctrlSetStructuredText parseText ("<t valign='middle' align='center' font='PuristaLight' shadow='2' size='" + (str ((safeZoneH * 0.5) * 1.6)) + "'><img image='\a3\ui_f_curator\data\CfgCurator\waypoint_ca.paa'></img> CANCEL</t>"); 
        _btnCtrl_06 ctrlSetPosition [0.304062 * safezoneW + safezoneX,0.72 * safezoneH + safezoneY,0.0876563 * safezoneW,0.033 * safezoneH]; 
        _btnCtrl_06 ctrlAddEventHandler ['ButtonClick',  
        { 
            params ["_control"]; 
            _parentDisplay = ctrlParent _control; 
            _parentDisplay closeDisplay 0; 
        }]; 
        _btnCtrl_06 ctrlSetBackgroundColor [0.2,0.2,0.2,0.5]; 
        _btnCtrl_06 ctrlCommit 0; 
        }; 
        }; 
        [] spawn M9SD_fnc_openSQFInjector; 
        };
    };
    MAS_fnc_TPTo = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
    private _unit = (allPlayers select _index); 
    if (vehicle player != player) then { 
        player allowDamage false; 
        moveOut player; 
        player setVelocity [0, 0, 0]; 
        player allowDamage true; 
    }; 
    if ((vehicle _unit) == _unit) then { 
        player setPosATL [(getPosATL _unit select 0), (getPosATL _unit select 1), (getPosATL _unit select 2)]; 
    } else { 
        player moveInAny (vehicle _unit); 
    }; 
    };
    MAS_fnc_TPToMe = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index); 
    if (vehicle _unit != _unit) then { 
        _unit allowDamage false; 
        moveOut _unit; 
        _unit setVelocity [0, 0, 0]; 
        _unit allowDamage true; 
    }; 
    if ((vehicle player) == player) then { 
        _unit setPosATL [(getPosATL player select 0), (getPosATL player select 1), (getPosATL player select 2)]; 
    } else { 
        _unit moveInAny (vehicle player); 
    }; 
    };
    MAS_fnc_Disarm = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index); 
        _unit remoteExec ["removeAllWeapons"];
        playSound "addItemOK";
    };
    MAS_fnc_HealP = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index); 
        _unit setDamage 0;  
        [[],{  
         ["#rev",1,player] call BIS_fnc_reviveOnState;  
        }] remoteExec ['spawn',_unit];  
        playSound "addItemOK";
    };
    MAS_fnc_UnMute = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index);
        [[], { 
        private _isMuted = player getVariable ["isMuted",false]; 
        if(_isMuted) then { 
        0 enableChannel [true,true]; 
        1 enableChannel [true,true]; 
        2 enableChannel [true,true]; 
        3 enableChannel [true,true]; 
        player setVariable ["isMuted",false,true]; 
        } else { 
        0 enableChannel [true,false]; 
        1 enableChannel [true,false];  
        2 enableChannel [true,false]; 
        3 enableChannel [true,false];  
        player setVariable ["isMuted",true,true]; 
        }; 
        }] remoteExec ["spawn",_unit]; 
    };
    MAS_fnc_PlayerView = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index);
        if !(isNil "MAS_EH_NormalView") then {
            findDisplay 46 displayRemoveEventHandler ["keyDown", MAS_EH_NormalView];
        };
        with uiNamespace do {
            MASDisplay closeDisplay 0;
        };
        MAS_EH_NormalView = findDisplay 46 displayAddEventHandler ["KeyDown", "if (_this select 1 == 48) then {
             [] spawn MAS_fnc_NormView;       
            }"
        ];
        switchCamera _unit;
        titleCut ["Press B to get back in normal view","Plain Down",3];
    };
    MAS_fnc_NormView = {
        switchCamera player;
        findDisplay 46 displayRemoveEventHandler ["keyDown", MAS_EH_NormalView];
        playSound "addItemOK";
    };
    comment "Credit to M9SD";
    MAS_fnc_jukebox = { 
    params [["_object", objNull]]; 
    if (isNil 'M9_open_jukebox') then { 
    M9_open_jukebox = 
    { 
        comment " 
        Author: 
        Killzone_Kid, 
        Edited by M9-SD 
        Description: 
        A utility for playing music from CfgMusic 
        * Added button to play globally. 
        "; 
        if (isNil 'M9_jukebox_selectedTrack_className') then { 
        M9_jukebox_selectedTrack_trackName = ''; 
        M9_jukebox_selectedTrack_className = ''; 
        M9_jukebox_selectedTrack_filePath = ''; 
        }; 
        disableSerialization; 
        private _fnc_addControlGroup = 
        { 
        params ["_display", "_class", "_position", "_bgcolor", "_fgcolor"]; 
        private _ctrl = _display ctrlCreate [_class, -1]; 
        _ctrl ctrlSetPosition _position; 
        _ctrl ctrlSetBackgroundColor _bgcolor; 
        _ctrl ctrlSetTextColor _fgcolor; 
        _ctrl ctrlCommit 0; 
        _ctrl 
        }; 
        private _fnc_addControl = 
        { 
        params ["_display", "_class", "_text", "_position", "_bgcolor", "_fgcolor", "_tip", "_enable", ["_ctrlGroup", controlNull], ["_idc", -1]]; 
        _text params ["_text", "_font", "_size"]; 
        private _ctrl = call 
        { 
        if (isNull _ctrlGroup) exitWith { 
        _display ctrlCreate [_class, _idc]; 
        }; 
        _display ctrlCreate [_class, _idc, _ctrlGroup]; 
        }; 
        _ctrl ctrlSetPosition _position; 
        _ctrl ctrlSetBackgroundColor _bgcolor; 
        _ctrl ctrlSetTextColor _fgcolor; 
        if !(_text isEqualTo "") then { 
        _ctrl ctrlSetText _text 
        }; 
        if !(_font isEqualTo "") then {}; 
        if (_size > 0) then { 
        _ctrl ctrlSetFontHeight _size 
        }; 
        _ctrl ctrlCommit 0; 
        _ctrl ctrlSetTooltip _tip; 
        _ctrl ctrlEnable _enable; 
        _ctrl; 
        }; 
        private ["_frame", "_close"]; 
        private _missionDisplay = displayNull; 
        private _functionDisplay = displayNull; 
        isNil 
        { 
        comment " 
        if (is3DEN) then { 
        _missionDisplay = findDisplay 316000; 
        if (isNull _missionDisplay) then { 
        _missionDisplay = findDisplay 313 
        }; 
        }; 
        if ((isNull _missionDisplay) && (!isNull findDisplay 312)) then { 
        _missionDisplay = findDisplay 213 
        }; 
        if (isNull _missionDisplay) then { 
        _missionDisplay = findDisplay 49 
        }; 
        if (isNull _missionDisplay) then { 
        _missionDisplay = findDisplay 46 
        }; 
        if (isNull _missionDisplay) exitWith { 
        ['Cannot find suitable display for a Utility. Available displays: %1', allDisplays] call BIS_fnc_error; 
        }; 
        "; 
        _missionDisplay = findDisplay 312; 
        { 
        if (_x getVariable ['__FILE__', false]) then { 
        _x closeDisplay 2; 
        }; 
        } 
        forEach allDisplays; 
        createDialog "RscDisplayEmpty"; 
        comment " 
        _functionDisplay = _missionDisplay createDisplay 'RscDisplayEmpty'; 
        "; 
        _functionDisplay = findDisplay -1; 
        _functionDisplay setVariable ['__FILE__', true]; 
        [_functionDisplay, "RscText", ["", "", 0], [safeZoneXAbs, safeZoneY, safeZoneWAbs, safeZoneH], [0, 0, 0, 0.9], [0, 0, 0, 0], "", false] call _fnc_addControl; 
        _frame = [_functionDisplay, "RscEditMulti", ["", "", 0], [-0.01, -0.01, 1.02, 1.02], [0.1, 0.1, 0.1, 1], [1, 1, 1, 0.5], "", false] call _fnc_addControl; 
        _close = [_functionDisplay, "RscButtonMenu", ["X", "PuristaMedium", 0.03], [0.965, 0, 0.035, 0.04], [0.15, 0.15, 0.15, 1], [1, 1, 1, 1], "Exit", true] call _fnc_addControl; 
        _close ctrlAddEventhandler ["ButtonClick", "ctrlParent (_this select 0) closeDisplay 2"]; 
        }; 
        comment "#include 'lib\header.sqf'"; 
        comment " 
        #define EDIT_KEY_ACTION_STOP(CTRL, KEY_ACTION) \ 
        CTRL ctrlAddEventHandler [KEY_ACTION, \ 
        { 
        \ 
        params ['_ctrl']; 
        \ 
        _ctrl ctrlSetText (ctrlParent _ctrl getVariable '_context'); 
        \ 
        _ctrl ctrlSetPosition [0.26, 0.06, 0.74, 0.115]; 
        \ 
        _ctrl ctrlCommit 0; 
        \ 
        }]; 
        "; 
        uiNamespace setVariable ["BIS_utility_jukeboxDisplay", _functionDisplay]; 
        _functionDisplay displayAddEventHandler ["Unload", 
        { 
        removeMusicEventHandler ["MusicStop", BIS_utility_jukeboxMusicStopEH]; 
        BIS_utility_jukeboxMusicStopEH = nil; 
        removeMissionEventHandler ["Draw3D", BIS_utility_jukeboxDraw3DEH]; 
        BIS_utility_jukeboxDraw3DEH = nil; 
        uiNamespace setVariable ["BIS_utility_jukeboxDisplay", nil]; 
        comment "playMusic ''; 
        "; 
        }]; 
        _functionDisplay setVariable ["_progressLMB", false]; 
        _functionDisplay setVariable ["_playing", ["", 0, -1, false, [-1], true]]; 
        private _counter = [_functionDisplay, "RscText", ["00:00", "EtelISFonospacePro", 0.13], [0, -0.01, 0.29, 0.2], [0, 0, 0, 0], [0.7, 0.7, 0.7, 1], "", false] call _fnc_addControl; 
        _functionDisplay setVariable ["_counter", _counter]; 
        private _pause = [_functionDisplay, "RscText", ["PAUSED", "EtelISFonospacePro", 0.03], [0.003, 0.01, 0.1, 0.04], [0, 0, 0, 0], [0.3, 0.3, 0.3, 1], "", false] call _fnc_addControl; 
        _functionDisplay setVariable ["_pause", _pause]; 
        _pause ctrlShow false; 
        [_functionDisplay, "RscText", ["Track Info", "EtelISFonospacePro", 0.03], [0.25, 0.01, 0.13, 0.04], [0, 0, 0, 0], [0.3, 0.3, 0.3, 1], "Copy&paste track info for use elsewhere", false] call _fnc_addControl; 
        private _info = [_functionDisplay, "RscEditMulti", ["", "PuristaMedium", 0.035], [0.26, 0.06, 0.74, 0.115], [0.05, 0.05, 0.05, 1], [0.7, 0.7, 0.7, 1], "", true] call _fnc_addControl; 
        _functionDisplay setVariable ["_info", _info]; 
        _info ctrlSetText format ["N > %1C > %1F >", toString [13, 10]]; 
        _functionDisplay setVariable ["_context", ctrlText _info]; 
        comment " 
        EDIT_KEY_ACTION_STOP(_info, 'KeyDown') 
        EDIT_KEY_ACTION_STOP(_info, 'KeyUp') 
        "; 
        [_functionDisplay, "RscEdit", ["", "", 0], [0, 0.209, 1, 0.053], [0.2, 0.2, 0.2, 1], [0, 0, 0, 0], "", false] call _fnc_addControl; 
        private _progress = [_functionDisplay, "RscProgress", ["", "", 0], [0, 0.21, 1, 0.05], [1, 1, 1, 1], [1, 1, 1, 0.8], "", true] call _fnc_addControl; 
        _functionDisplay setVariable ["_progress", _progress]; 
        _progress progressSetPosition 0; 
        _progress ctrlAddEventHandler ["MouseMoving", 
        { 
            params ["_ctrl", "_px", "_py"]; 
            _disp = ctrlParent _ctrl; 
            _playing = _disp getVariable "_playing"; 
            if !(_playing select 3) exitWith {}; 
            if (_disp getVariable "_progressLMB") then { 
            _ctrl progressSetPosition _px; 
            _musicTime = linearConversion [0, 1, _px, 0, _playing select 1, true]; 
            _minutes = floor (_musicTime / 60); 
            _seconds = floor _musicTime % 60; 
            _disp getVariable "_counter" ctrlSetText format ["%1%2:%3%4", ["", "0"] select (_minutes < 10), _minutes, ["", "0"] select (_seconds < 10), _seconds]; 
            }; 
        }]; 
        _progress ctrlAddEventHandler ["MouseButtonDown", 
            { 
            params ["_ctrl", "_button", "_px", "_py"]; 
            _disp = ctrlParent _ctrl; 
            _playing = _disp getVariable "_playing"; 
            if !(_playing select 3) exitWith {}; 
            if (_button isEqualTo 0) then { 
            _disp setVariable ["_progressLMB", true]; 
            playMusic ""; 
            }; 
            if (_disp getVariable "_progressLMB") then { 
            _ctrl progressSetPosition _px; 
            }; 
            }]; 
            _progress ctrlAddEventHandler ["MouseButtonUp", 
            { 
            params ["_ctrl", "_button"]; 
            _disp = ctrlParent _ctrl; 
            _playing = _disp getVariable "_playing"; 
            if !(_playing select 3) exitWith {}; 
            if (_button isEqualTo 0) then { 
            _disp setVariable ["_progressLMB", false]; 
            _start = linearConversion [0, 1, progressPosition _ctrl, 0, _playing select 1, true]; 
            _playing set [2, time - _start]; 
            _minutes = floor (_start / 60); 
            _seconds = ceil _start % 60; 
            _disp getVariable "_counter" ctrlSetText format ["%1%2:%3%4", ["", "0"] select (_minutes < 10), _minutes, ["", "0"] select (_seconds < 10), _seconds]; 
            if (_playing select 5) exitWith {}; 
            playMusic [_playing select 0, _start]; 
            }; 
            }]; 
            [_functionDisplay, "RscText", ["CfgMusic Tracks", "EtelISFonospacePro", 0.03], [-0.01, 0.3, 0.3, 0.04], [0, 0, 0, 0], [0.3, 0.3, 0.3, 1], "Click item once to play, click again to pause", false] call _fnc_addControl; 
            private _list = [_functionDisplay, "RscTree", ["", "EtelISFonospacePro", 0.03], [0, 0.35, 1, 0.64], [0.05, 0.05, 0.05, 1], [0.9, 0.9, 0.9, 1], "", true] call _fnc_addControl; 
            _functionDisplay setVariable ["_list", _list]; 
            private _cfgMusic = 
            ("true" configClasses (configFile >> "CfgMusic")) + 
            ("true" configClasses (missionConfigFile >> "CfgMusic")) + 
            ("true" configClasses (campaignConfigFile >> "CfgMusic")); 
            private _maxDigits = count _cfgMusic call 
            { 
            if (_this < 10) exitWith { 
            1 
            }; 
            if (_this < 100) exitWith { 
            2 
            }; 
            if (_this < 1000) exitWith { 
            3 
            }; 
            4 
            }; 
            { 
            private _name = gettext (_x >> "name"); 
            private _displayName = _name; 
            private _class = configName _x; 
            if (_name isEqualTo "") then { 
            _name = _class; 
            _displayName = "N/A"; 
            }; 
            _duration = getNumber (_x >> "duration"); 
            _minutes = floor (_duration / 60); 
            _seconds = floor _duration % 60; 
            private _index = _list tvAdd [[], format ["%1. (%2) - %3", 
            (((_foreachIndex + 1) / 10 ^ _maxDigits) toFixed _maxDigits) select [2], 
            format ["%1%2:%3%4", ["", "0"] select (_minutes < 10), _minutes, ["", "0"] select (_seconds < 10), _seconds], 
            _name 
            ]]; 
            _list tvSetColor [[_index], [[1, 1, 1, 1], [0.6, 0.6, 0.6, 1]] select (_forEachIndex % 2)]; 
            _list tvSetData [[_index], format ["[""%1"", %2, ""%3"", ""%4"", ""%5""]", _class, _duration, _displayName, getArray (_x >> "sound") select 0]]; 
            } 
            forEach _cfgMusic; 
            _list ctrlAddEventhandler ["TreeSelChanged", 
            { 
            params ["_ctrl", "_path"]; 
            _disp = ctrlParent _ctrl; 
            _playing = _disp getVariable "_playing"; 
            if (_playing select 4 isEqualTo _path) exitWith { 
                if (_playing select 5) exitWith { 
                _progress = _disp getVariable "_progress"; 
                _start = linearConversion [0, 1, progressPosition _progress, 0, _playing select 1, true]; 
                _playing set [2, time - _start]; 
                _playing set [5, false]; 
                playMusic [_playing select 0, _start]; 
                _disp getVariable "_pause" ctrlShow false; 
                }; 
                playMusic ""; 
                _playing set [5, true]; 
                _disp getVariable "_pause" ctrlShow true; 
            }; 
            _data = call compile (_ctrl tvData _path); 
            _playing set [0, _data select 0]; 
            _playing set [1, _data select 1]; 
            _playing set [2, time]; 
            _playing set [3, true]; 
            _playing set [4, _path]; 
            _playing set [5, false]; 
            _disp getVariable "_progress" progressSetPosition 0; 
            playMusic [_playing select 0, 0]; 
            _disp getVariable "_pause" ctrlShow false; 
            M9_jukebox_selectedTrack_trackName = _data select 2; 
            M9_jukebox_selectedTrack_className = _data select 0; 
            M9_jukebox_selectedTrack_filePath = _data select 3; 
            _context = format 
            [ 
                "N > %2%1C > %3%1F > %4", 
                toString [13, 10], 
                _data select 2, 
                _data select 0, 
                _data select 3 
            ]; 
            _disp getVariable "_info" ctrlSetText _context; 
            _disp setVariable ["_context", _context]; 
            }]; 
            if (!isNil 'BIS_utility_jukeboxMusicStopEH') then { 
            removeMusicEventHandler ["MusicStop", BIS_utility_jukeboxMusicStopEH]; 
            }; 
            BIS_utility_jukeboxMusicStopEH = addMusicEventHandler ["MusicStop", 
            { 
                _disp = uinamespace getVariable "BIS_utility_jukeboxDisplay"; 
                _list = _disp getVariable "_list"; 
                _next = (tvCurSel _list select 0) + 1; 
                if (_next >= _list tvCount []) exitWith {}; 
                _list tvSetCurSel [_next]; 
            }]; 
            BIS_utility_jukeboxDraw3DEH = addMissionEventHandler ["Draw3D", 
                { 
                _disp = uinamespace getVariable "BIS_utility_jukeboxDisplay"; 
                _disp getVariable "_playing" params ["_class", "_duration", "_start", "", "", "_pause"]; 
                if (_pause) exitWith {}; 
                _progress = _disp getVariable "_progress"; 
                _progressPosition = progressPosition _progress; 
                _musicTime = time - _start; 
                if (_progressPosition < 1 && { 
                !(_disp getVariable "_progressLMB") 
                }) then 
                { 
                _progress progressSetPosition linearConversion [0, _duration, _musicTime, 0, 1, true]; 
                _minutes = floor (_musicTime / 60); 
                _seconds = floor _musicTime % 60; 
                _disp getVariable "_counter" ctrlSetText format ["%1%2:%3%4", ["", "0"] select (_minutes < 10), _minutes, ["", "0"] select (_seconds < 10), _seconds]; 
                }; 
                }]; 
                _functionDisplay displayAddEventHandler ["KeyDown", 
                { 
                params ["_disp", "_dik"]; 
                _playing = _disp getVariable "_playing"; 
                _pause = _playing select 5; 
                if (_dik isEqualTo 57) then { 
                if (_pause) exitWith { 
                    _progress = _disp getVariable "_progress"; 
                    _start = linearConversion [0, 1, progressPosition _progress, 0, _playing select 1, true]; 
                    _playing set [2, time - _start]; 
                    _playing set [5, false]; 
                    playMusic [_playing select 0, _start]; 
                    _disp getVariable "_pause" ctrlShow false; 
                    true 
                }; 
                playMusic ""; 
                _playing set [5, true]; 
                _disp getVariable "_pause" ctrlShow true; 
                true 
                }; 
                }]; 
                _ctrl_play = _functionDisplay ctrlCreate ['RscButtonMenu', -1]; 
                _ctrl_play ctrlSetStructuredText parseText ("<t size='" + (str (safeZoneH * 0.5)) + "' align='CENTER'>Play Track (Global)</t>"); 
                _ctrl_play ctrlSetTooltip 'Plays the selected track on all clients connected to the server.'; 
                _ctrl_play ctrlSetBackgroundColor [0, 0.5, 0, 0.7]; 
                _ctrl_play ctrlSetPosition [0.29375 * safeZoneW + safeZoneX, 0.225 * safeZoneH + safeZoneY, 0.09 * safeZoneW, 0.022 * safeZoneH]; 
                _ctrl_play ctrladdEventHandler ['ButtonClick', 
                { 
                with uiNamespace do 
                { 
                    disableSerialization; 
                    BIS_utility_jukeboxDisplay closeDisplay 0; 
                    (findDisplay 49) closeDisplay 0; 
                }; 
                if (isNil 'MAS_musicVolume') then { 
                    MAS_musicVolume = 0.5; 
                }; 
                [M9_jukebox_selectedTrack_className, 0, MAS_musicVolume] remoteExec ['BIS_fnc_playMusic']; 
                _jukeboxNotification = '_jukeboxNotification' cutText [format ["<t shadow='1' color='#00ff00'>[ Jukebox ]</t><br/><t shadow='0' color='#64cd64'>Now Playing:</t><br/><t shadow='2' color='#FFFFFF'>“%1”</t><br/><t shadow='0' color='#ababab'>%2</t>", M9_jukebox_selectedTrack_trackName, M9_jukebox_selectedTrack_className], 'PLAIN DOWN', 0, true, true]; 
                }]; 
                _ctrl_play ctrlCommit 0; 
                }; 
                }; 
    [] spawn M9_open_jukebox; 
    }; 

    MAS_fnc_earplugsPvt = { 
    private _isEarplugsIn = player getVariable ['isEarplugsIn', false]; 
    if (_isEarplugsIn) then { 
    1 fadeSound 1; 
    player setVariable ['isEarplugsIn', false]; 
    [] call MAS_fnc_deleteEarplugIcon; 
    } else { 
    1 fadeSound 0.1; 
    player setVariable ['isEarplugsIn', true]; 
    [] call MAS_fnc_createEarplugIcon; 
    }; 
    }; 

    MAS_fnc_createEarplugIcon = { 
    with uiNamespace do { 
     _display = findDisplay 46; 
 
     comment "a3\ui_f\data\igui\rscingameui\rscdisplaychannel\mutevon_crossed_ca.paa"; 
     earplugsIcon = _display ctrlCreate ["RscPicture",-1]; 
     earplugsIcon ctrlSetText "a3\ui_f\data\igui\rscingameui\rscunitinfoairrtdfull\ico_cpt_sound_off_ca.paa"; 
     earplugsIcon ctrlSetTextColor [1,1,1,0.6]; 
     earplugsIcon ctrlSetPosition [0.00499997 * safezoneW + safezoneX,0.137 * safezoneH + safezoneY,0.0257812 * safezoneW,0.044 * safezoneH]; 
     earplugsIcon ctrlCommit 0; 
    }; 
   }; 
 
   MAS_fnc_deleteEarplugIcon = { 
    with uiNamespace do { 
     ctrlDelete earplugsIcon; 
    }; 
   }; 
    MAS_fnc_VehicleSpawner =  
    { 
        systemChat "[SAM] - WIP/Disabled because of bug";
        playSound "addItemFailed";
    }; 
    MAS_fnc_TMenu = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        private _unit = (allPlayers select _index);
        _uid = getPlayerUID player;
        if (_uid in usersWhoAreSuperMenuWhitelistedreallySuperlol) then {
        if (_unit == player) then {
            playSound "addItemfailed";
            systemChat "[SAM] - Cannot remove menu from yourself";
        } else {
        if ((getPlayerUID _unit in UsersWhoAreSuperMenuWhitelistedreallySuperlol)) then {
            playSound "addItemFailed";
            systemChat "[SAM] - Error: Cant remove menu from whitelisted user"; 
        } else {
        _hasMenu = _unit getVariable ["hasMenu",false];
        if (_hasMenu) then {
            _unit setVariable ["hasMenu",nil,true];
            systemChat format ["[SAM] - Removed menu from %1",name _unit];        
            with uiNamespace do {
                MASDisplay closeDisplay 0;
            };
            [[],{
            findDisplay 46 displayRemoveEventHandler ["keyDown",pvtMenuBindMAS];
            findDisplay 312 displayRemoveEventHandler ["keyDown",pvtMenuBindZeusMAS];
            }] remoteExec ["spawn",_unit,false];
        } else {
            _unit setVariable ["hasMenu",true,true];
            systemChat format ["[SAM] - Added menu to %1",name _unit];
            with uiNamespace do {
            MASDisplay closeDisplay 0;
            };
            [[],{
                player setVariable ["hasMenu",true,true]; 
                waitUntil { 
                !isNull (findDisplay 46) && alive player
                }; 
                if (isNil "pvtMenuBindMAS") then { 
                    pvtMenuBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 38) then { 
                    [] spawn MAS_TheMenuGUI; 
                    }"]; 
                    pvtMenuBindZeusMAS = (findDisplay 312) displayAddEventHandler ["KeyDown", "if (_this select 1 == 38) then { 
                    [] spawn MAS_TheMenuGUI; 
                    }"]; 
                }; 
                if (!isNil "earplugsBind_CompMAS") then { 
                    (findDisplay 46) displayRemoveEventHandler ["KeyDown", earplugsBind_CompMAS]; 
                }; 
                if (isNil "earplugsBindMAS") then { 
                    earplugsBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 207) then { 
                    [] spawn MAS_fnc_earplugsPvt; 
                    }"]; 
                }; 
                if (isNil "holsterBindMAS") then { 
                    holsterBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 35) then { 
                    player action ['SWITCHWEAPON', player, player, -1]; 
                    waitUntil { 
                    currentWeapon player == '' or { 
                    primaryWeapon player == '' && handgunWeapon player == '' 
                    } 
                    }; 
                    }"]; 
                }; 
                if (isNil "jumpKeyBindMAS") then { 
                    jumpKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "_this call MAS_fnc_doJump; 
                    "]; 
                };  
                systemChat "[SAM] - User loged in...";
                sleep 0.3;
                systemChat "[SAM] - Registering Account...";
                sleep 0.2;
                systemChat format ["[SAM] - Account registered: %1",_userName];
                player addEventHandler ["GetInMan", {
                    params ["_unit", "_role", "_vehicle", "_turret"];
                    if !(isDamageAllowed _vehicle) then {
                        player setVariable ["MAS_VGM",true,false];
                        with uiNamespace do {
                            MAS_UtilBtn2 ctrlSetTextColor [0,1,0,1];
                        };
                };
                }] ; 
                player addEventHandler ["GetOutMan", {
                    player setVariable ["MAS_VGM",false,false];
                    with uiNamespace do {
                        MAS_UtilBtn2 ctrlSetTextColor [1,1,1,1];
                    };
                }];
                player addEventHandler ["Respawn", {
                        player setVariable ["MAS_GM",false,false];
                        player setVariable ["MAS_VGM",false,false];  
                        player setVariable ["isNoStam",false,false];      
                }];
            }] remoteExec ["spawn",_unit];
        };
        };
        };
        } else {
            playSound "addItemFailed";
            systemChat "[SAM] - Not enough permissions";
        };
    };

    MAS_fnc_AimbotESP = {
        with uiNamespace do {
            if (isNil "MAS_BackESPAimb") then {
                MAS_BackESPAimb = MASDisplay ctrlCreate ["RscPicture", 1208];
                MAS_BackESPAimb ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                MAS_BackESPAimb ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.577 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.077 * safezoneH];
                MAS_BackESPAimb ctrlSetFade 1;
                MAS_BackESPAimb ctrlCommit 0;
                MAS_BackESPAimb ctrlSetFade 0;
                MAS_BackESPAimb ctrlCommit 1;

                MAS_FESPAimb = MASDisplay ctrlCreate ["RscFrame", 1801];
                MAS_FESPAimb ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.577 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.077 * safezoneH];
                MAS_FESPAimb ctrlSetFade 1;
                MAS_FESPAimb ctrlCommit 0;
                MAS_FESPAimb ctrlSetFade 0;
                MAS_FESPAimb ctrlCommit 1;

                MAS_AimbotSetBtn = MASDisplay ctrlCreate ["RscButton", 1608];
                MAS_AimbotSetBtn ctrlSetText "Aimbot S";
                MAS_AimbotSetBtn ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.588 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                MAS_AimbotSetBtn ctrlSetFade 1;
                MAS_AimbotSetBtn ctrlCommit 0;
                MAS_AimbotSetBtn ctrlSetFade 0;
                MAS_AimbotSetBtn ctrlCommit 1;
                MAS_AimbotSetBtn ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    [] spawn MAS_fnc_AimbotSettings;
                }];    

                MAS_EspBtn = MASDisplay ctrlCreate ["RscButton", 1617];
                MAS_EspBtn ctrlSetText "T ESP";
                MAS_EspBtn ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.621 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                MAS_EspBtn ctrlSetFade 1;
                MAS_EspBtn ctrlCommit 0;
                MAS_EspBtn ctrlSetFade 0;
                MAS_EspBtn ctrlCommit 1;
                MAS_EspBtn ctrlAddEventHandler ["ButtonClick", { 
                    with uiNamespace do { 
                        MASDisplay closeDisplay 0; 
                    }; 
                    private _isESPOn = player getVariable ['isESPOn', false]; 
                    if (_isESPOn) then { 
                        [] spawn MAS_fnc_removeESP; 
                    } else { 
                        [] spawn MAS_fnc_ESP; 
                    }; 
                }];    

            } else {
                _controlVisible = with uiNamespace do {ctrlShown MAS_BackESPAimb;};
                if !(_controlVisible) then {
                    MAS_BackESPAimb = MASDisplay ctrlCreate ["RscPicture", 1208];
                    MAS_BackESPAimb ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                    MAS_BackESPAimb ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.577 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.077 * safezoneH];
                    MAS_BackESPAimb ctrlSetFade 1;
                    MAS_BackESPAimb ctrlCommit 0;
                    MAS_BackESPAimb ctrlSetFade 0;
                    MAS_BackESPAimb ctrlCommit 1;

                    MAS_FESPAimb = MASDisplay ctrlCreate ["RscFrame", 1801];
                    MAS_FESPAimb ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.577 * safezoneH + safezoneY, 0.0567187 * safezoneW, 0.077 * safezoneH];
                    MAS_FESPAimb ctrlSetFade 1;
                    MAS_FESPAimb ctrlCommit 0;
                    MAS_FESPAimb ctrlSetFade 0;
                    MAS_FESPAimb ctrlCommit 1;

                    MAS_AimbotSetBtn = MASDisplay ctrlCreate ["RscButton", 1608];
                    MAS_AimbotSetBtn ctrlSetText "Aimbot S";
                    MAS_AimbotSetBtn ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.588 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                    MAS_AimbotSetBtn ctrlSetFade 1;
                    MAS_AimbotSetBtn ctrlCommit 0;
                    MAS_AimbotSetBtn ctrlSetFade 0;
                    MAS_AimbotSetBtn ctrlCommit 1;
                    MAS_AimbotSetBtn ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        [] spawn MAS_fnc_AimbotSettings;
                    }];    

                    MAS_EspBtn = MASDisplay ctrlCreate ["RscButton", 1617];
                    MAS_EspBtn ctrlSetText "T ESP";
                    MAS_EspBtn ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.621 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                    MAS_EspBtn ctrlSetFade 1;
                    MAS_EspBtn ctrlCommit 0;
                    MAS_EspBtn ctrlSetFade 0;
                    MAS_EspBtn ctrlCommit 1;
                    MAS_EspBtn ctrlAddEventHandler ["ButtonClick", { 
                        with uiNamespace do { 
                            MASDisplay closeDisplay 0; 
                        }; 
                        private _isESPOn = player getVariable ['isESPOn', false]; 
                        if (_isESPOn) then { 
                            [] spawn MAS_fnc_removeESP; 
                        } else { 
                            [] spawn MAS_fnc_ESP; 
                        }; 
                    }];    

                } else {
                    ctrlDelete MAS_BackESPAimb;
                    ctrlDelete MAS_AimbotSetBtn;
                    ctrlDelete MAS_EspBtn;
                    ctrlDelete MAS_FESPAimb;
                };
            };
        };
    };
    comment "credit to zam prvt menu";
    MAS_fnc_ESP = { 
    maxDistanceFlagMarker3D = 1500; 
    transitionDistanceFlagMarker3D = 500; 
    maxDistanceUnitMarker3D = 150; 
    maxDistanceUnitMarkerText3D = 10; 
    maxCursorRangeUnitMarker = 0.02; 
    minMapZoomUnitMarker = 0.0045; 
    if (!isNil "MAS_fnc_ESPEH") then { 
        removeMissionEventHandler ["Draw3D", MAS_fnc_ESPEH]; 
    }; 
    MAS_fnc_ESPEH = addMissionEventHandler ["Draw3D", { 
        { 
        if ((typeOf _x) in ["ModuleHQ_F", "Logic"] || !alive _x) then {} else { 
        private _veh = vehicle _x; 
        if (player in _veh) exitWith {}; 
        private _imageType = "\A3\ui_f\data\Map\VehicleIcons\iconMan_ca.paa"; 
        private _side = toLower (str (side _x)); 
        private _imgColor = [1, 1, 1, 1]; 
        switch(_side) do { 
        case "west": { 
            _imgColor = [0, 0.5, 1, 0.85]; 
        }; 
        case "east": { 
            _imgColor = [1, 0, 0, 0.85]; 
        }; 
        case "independent": { 
            _imgColor = [0, 1, 0.5, 0.85]; 
        }; 
        case "guer": { 
            _imgColor = [0, 1, 0, 0.85]; 
        }; 
        case "civilian": { 
            _imgColor = [1, 0, 1, 0.85]; 
        }; 
        case "enemy": { 
            _imgColor = [0.976, 0.412, 0.055, 0.85]; 
        }; 
        }; 
        private _text = name _x; 
        if (!isPlayer _x) then { 
        _text = _text + " (AI)"; 
        }; 
        if (_veh == _x) then { 
        comment "Is not in vehicle"; 
        private _position = _x modelToWorldVisual (_x selectionPosition "head_axis"); 
        _position set [2, (_position select 2)+0.5]; 
    
        drawIcon3D [ 
            _imageType, 
            _imgColor, 
            _position, 
            0.6, 
            0.6, 
            0, 
            _text, 
            2, 
            0.02825 * 1.5, 
            "RobotoCondensedBold", 
            'center', 
            false, 
            0, 
            -0.045 
        ]; 
        drawLine3D [ 
            [getPosATL player select 0, getPosATL player select 1, (getPosATL player select 2) + 1], 
            [getPosATL _x select 0, getPosATL _x select 1, (getPosATL _x select 2) + 1], 
            _imgColor 
        ]; 
        } else { 
        comment "Is in vehicle"; 
        if ([_x, _veh] call MAS_fnc_checkForIfDriver) then { 
            private _className = (typeOf _veh); 
            private _file = getText (configfile >> "CfgVehicles" >> _className >> "icon"); 
            private _crewCount = { 
            alive _x 
            } count (crew _veh); 
            if (_crewCount > 1) then { 
            _text = _text + " [+" + str (_crewCount - 1) + "]"; 
            }; 
            private _position = _veh modelToWorldVisual [0, 0, 0]; 
            _position set [2, (_position # 2) + 0.75]; 
            drawIcon3D [ 
            _file, 
            _imgColor, 
            _position, 
            0.7, 
            0.7, 
            0, 
            _text, 
            2, 
            0.02825 * 1.5, 
            "RobotoCondensedBold", 
            'center', 
            false, 
            0, 
            -0.045 
            ]; 
            drawLine3D [ 
            [getPosATL player select 0, getPosATL player select 1, (getPosATL player select 2) + 1], 
            [getPosATL _veh select 0, getPosATL _veh select 1, (getPosATL _veh select 2) + 1], 
            _imgColor 
            ]; 
        }; 
        }; 
        }; 
        } forEach allUnits - [player]; 
    }]; 
    if (!isNil "MAS_mapESPEH") then { 
        (findDisplay 12 displayCtrl 51) ctrlRemoveEventHandler ["Draw", MAS_mapESPEH]; 
    }; 
    MAS_mapESPEH = (findDisplay 12 displayCtrl 51) ctrlAddEventHandler ["Draw", { 
        { 
        if ((typeOf _x) in ["ModuleHQ_F", "Logic"] || !alive _x) then {} else { 
        private _pos2D = (_this select 0) ctrlMapWorldToScreen _pos; 
        private _posCursor2D = getMousePosition; 
        private _dist = _pos2D distance2D _posCursor2D; 
        private _scale = ctrlMapScale (_this select 0); 
        private _veh = vehicle _x; 
        private _imageType = "\A3\ui_f\data\Map\VehicleIcons\iconMan_ca.paa"; 
        private _side = toLower (str (side _x)); 
        private _imgColor = [1, 1, 1, 1]; 
        switch(_side) do { 
        case "west": { 
            _imgColor = [0, 0.5, 1, 0.75]; 
        }; 
        case "east": { 
            _imgColor = [1, 0, 0, 0.75]; 
        }; 
        case "independent": { 
            _imgColor = [0, 1, 0.5, 0.75]; 
        }; 
        case "guer": { 
            _imgColor = [0, 1, 0, 0.75]; 
        }; 
        case "civilian": { 
            _imgColor = [1, 0, 1, 0.75]; 
        }; 
        case "enemy": { 
            _imgColor = [0.976, 0.412, 0.055, 0.75]; 
        }; 
        }; 
        private _text = name _x; 
        if (!isPlayer _x) then { 
        _text = _text + " (AI)"; 
        }; 
        if ((_scale > minMapZoomUnitMarker) && (_dist > maxCursorRangeUnitMarker)) then { 
        _text = ""; 
        }; 
        private _rot = getDir _veh; 
        if (_x == player) then { 
        _imgColor = [0, 0.8, 1, 0.95]; 
        }; 
        if (_veh == _x) then { 
        comment "Is not in vehicle"; 
        private _position = getPos _x; 
    
        _this select 0 drawIcon [ 
            _imageType, 
            _imgColor, 
            _position, 
            20, 
            20, 
            _rot, 
            _text, 
            2, 
            0.02825 * 1.5, 
            "RobotoCondensedBold", 
            'left' 
        ]; 
        _this select 0 drawIcon [ 
            _imageType, 
            _imgColor, 
            _position, 
            20, 
            20, 
            _rot, 
            _text, 
            1, 
            0.02825 * 1.5, 
            "RobotoCondensedBold", 
            'left' 
        ]; 
        _this select 0 drawLine [ 
            getPos player, 
            getPos _x, 
            _imgColor 
        ]; 
        } else { 
        comment "Is in vehicle"; 
        if ([_x, _veh] call MAS_fnc_checkForIfDriver) then { 
            private _className = (typeOf _veh); 
            private _file = getText (configfile >> "CfgVehicles" >> _className >> "icon"); 
            private _vehName = getText (configfile >> "CfgVehicles" >> _className >> "displayName"); 
            private _crewCount = { 
            alive _x 
            } count (crew _veh); 
            if (_crewCount > 1) then { 
            _text = _text + " [+" + str (_crewCount - 1) + "]"; 
            }; 
            private _position = getPos _veh; 
            _this select 0 drawIcon[ 
            _file, 
            _imgColor, 
            _position, 
            20, 
            20, 
            _rot, 
            _vehName, 
            2, 
            0.05, 
            "RobotoCondensedBold", 
            "left" 
            ]; 
            _this select 0 drawIcon [ 
            _file, 
            _imgColor, 
            _position, 
            20, 
            20, 
            _rot, 
            _text, 
            2, 
            0.02825 * 1.5, 
            "RobotoCondensedBold", 
            'right' 
            ]; 
            _this select 0 drawIcon [ 
            _file, 
            _imgColor, 
            _position, 
            20, 
            20, 
            _rot, 
            _vehName, 
            1, 
            0.05, 
            "RobotoCondensedBold", 
            "left" 
            ]; 
            (_this select 0) drawLine [ 
            getPos player, 
            getPos _x, 
            _imgColor 
            ]; 
        }; 
        }; 
        }; 
        } forEach allUnits; 
    }]; 
    player setVariable ['isESPOn', true]; 
    }; 
    
   MAS_fnc_checkForIfDriver = { 
    params ["_unit","_vehicle"]; 
    private _return = false; 
    if(driver _vehicle == _unit) then { 
     _return = true; 
    }; 
    private _crewCount = {alive _x} count (crew _vehicle); 
    if(_crewCount == 1) then { 
     _return = true; 
    }; 
    if(_unit call fn_isUnitCopilot && isNull (driver _vehicle)) then { 
     _return = true; 
    }; 
    _return 
   }; 

    MAS_fnc_removeESP = { 
    if (!isNil "MAS_fnc_ESPEH") then { 
        removeMissionEventHandler ["Draw3D", MAS_fnc_ESPEH]; 
    }; 
    if (!isNil "MAS_mapESPEH") then { 
        (findDisplay 12 displayCtrl 51) ctrlRemoveEventHandler ["Draw", MAS_mapESPEH]; 
    }; 
    player setVariable ['isESPOn', false]; 
    };     
    comment "Anti-Poo Zeus"; 
    MAS_fnc_noEndMissionModule = { 
    params ["_logic"]; 
    _logic addEventHandler ["CuratorObjectPlaced", { 
    params ["_curator", "_entity"]; 
    private _moduleNoUse = [ 
    'ModuleEndMission_F', 
    'ModuleCountdown_F', 
    'ModuleRespawnTickets_F', 
    'ModulePostprocess_F' 
    ]; 
    if (typeOf _entity in _moduleNoUse) then { 
    closeDialog 2; 
    deleteVehicle _entity; 
    private _unitName = name (getAssignedCuratorUnit _curator); 
    private _objName = typeOf _entity; 
    [[_unitName, _objName], { 
        params ['_userName', "_type"]; 
        [_userName, _type] spawn MAS_fnc_noEndMissionModuleNotification; 
    }] remoteExec ['spawn', 0]; 
    }; 
    }]; 
    }; 
    MAS_fnc_noEndMissionModuleNotification = { 
    params ['_userName', '_type']; 
    switch (_type) do { 
    case "ModuleEndMission_F": { 
    _type = "End Scenario"; 
    }; 
    case "ModuleCountdown_F": { 
    _type = "Countdown"; 
    }; 
    case "ModuleRespawnTickets_F": { 
    _type = "Respawn Tickets"; 
    }; 
    case "ModulePostprocess_F": { 
    _type = "Post Processing"; 
    }; 
    }; 
    if ((getPlayerUID player) in usersWhoAreSuperMenuWhitelistedreallySuperlol) then { 
    systemChat format ["[SAM] - Stopped %1 from using %2 module.", _userName, _type]; 
    }; 
    }; 
    Exec_ofDafunny = {
        private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
        ctrlDelete (uinamespace getvariable ['funnyFrameLOL', displayNull]);
        ctrlDelete (uinamespace getvariable ['funnyBackground', displayNull]);
        ctrlDelete (uinamespace getvariable ['DaFunnyButton', displayNull]);
        ctrlDelete (uinamespace getvariable ['VPNBtn', displayNull]);	     
        if (_index <= (count allPlayers)) then {   
            _unit = (allPlayers select _index);
            systemChat format["[SAM] - Trying to crash %1...",name _unit];
            if (_unit != player) then {
                [[_unit],{
                    call(MAS_TheMainMenu# 3);
                }] remoteExec ["call",_unit];
                playSound "addItemOK";
                systemChat "[SAM] - Done"
            } else {
                playSound "addItemFailed";
                systemChat "[SAM] - Error: Cant crash your self";
            };
        };
    };
    comment "Jump Script"; 
    MAS_fnc_doJumpAnim = { 
    params ["_unit", "_velocity", "_direction", "_speed", "_height", "_anim"]; 
    _unit setVelocity [(_velocity select 0) + (sin _direction * _speed), (_velocity select 1) + (cos _direction * _speed), ((_velocity select 2) * _speed) + _height]; 
    [_unit, _anim] remoteExec ['switchMove', 0]; 
    }; 
    MAS_fnc_doJump = { 
    params ["_displayCode", "_keyCode", "_isShift", "_isCtrl", "_isAlt"]; 
    private _handled = false; 
    if ((_keyCode in actionKeys "GetOver" && _isShift) && (animationState player != "AovrPercMrunSrasWrflDf")) then { 
    private ["_height", "_velocity", "_direction", "_speed"]; 
    if ((player == vehicle player) && (isTouchingGround player) && ((stance player == "STAND") || (stance player == "CROUCH"))) exitWith { 
    private _height = (1.80 - (load player)) max 3.50; 
    private _velocity = velocity player; 
    private _direction = direction player; 
    private _speed = 0.40; 
    player setVelocity [(_velocity select 0) + (sin _direction * _speed), (_velocity select 1) + (cos _direction * _speed), ((_velocity select 2) * _speed) + _height]; 
    [player, _velocity, _direction, _speed, _height, "AovrPercMrunSrasWrflDf"] spawn MAS_fnc_doJumpAnim; 
    if (currentWeapon player == "") then { 
        player switchMove "AovrPercMrunSrasWrflDf"; 
        player playMoveNow "AovrPercMrunSrasWrflDf"; 
    } else { 
        player switchMove "AovrPercMrunSrasWrflDf"; 
    }; 
    _handled = true; 
    }; 
    }; 
    _handled 
    }; 
    
    MAS_fnc_ChangeName = {
        comment "WIP";
        disableSerialization; 
        with uiNamespace do {
            if (isNil "RscFrame_1801") then {
                RscFrame_1801 = MASDisplay ctrlCreate ["RscFrame", 1801];
                RscFrame_1801 ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.211406 * safezoneW, 0.099 * safezoneH];
                RscFrame_1801 ctrlSetFade 1;
                RscFrame_1801 ctrlCommit 0;
                RscFrame_1801 ctrlSetFade 0;
                RscFrame_1801 ctrlCommit 1;

                RscPicture_1208 = MASDisplay ctrlCreate ["RscPicture", 1208];
                RscPicture_1208 ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                RscPicture_1208 ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.211406 * safezoneW, 0.099 * safezoneH];
                RscPicture_1208 ctrlSetFade 1;
                RscPicture_1208 ctrlCommit 0;
                RscPicture_1208 ctrlSetFade 0;
                RscPicture_1208 ctrlCommit 1;

                RscEdit_1400 = MASDisplay ctrlCreate ["RscEditMulti", 1400];
                RscEdit_1400 ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.434 * safezoneH + safezoneY, 0.201094 * safezoneW, 0.022 * safezoneH];
                RscEdit_1400 ctrlSetFade 1;
                RscEdit_1400 ctrlCommit 0;
                RscEdit_1400 ctrlSetFade 0;
                RscEdit_1400 ctrlCommit 1;
                RscEdit_1400 ctrlSetText "Example Name 1";

                RscText_1008 = MASDisplay ctrlCreate ["RscText", 1008];
                RscText_1008 ctrlSetText "Change P name";
                RscText_1008 ctrlSetPosition [0.737188 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.12375 * safezoneW, 0.022 * safezoneH];
                RscText_1008 ctrlSetFade 1;
                RscText_1008 ctrlCommit 0;
                RscText_1008 ctrlSetFade 0;
                RscText_1008 ctrlCommit 1;
                RscText_1008 ctrlSetFont "PuristaSemiBold"; 

                RscButton_1608 = MASDisplay ctrlCreate ["RscButton", 1608];
                RscButton_1608 ctrlSetText "Apply";
                RscButton_1608 ctrlSetPosition [0.850625 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                RscButton_1608 ctrlSetTextColor [0,1,0,1];
                RscButton_1608 ctrlSetBackgroundColor [0,0,0,0];
                RscButton_1608 ctrlSetFade 1;
                RscButton_1608 ctrlCommit 0;
                RscButton_1608 ctrlSetFade 0;
                RscButton_1608 ctrlCommit 1;
                RscButton_1608 ctrlSetFont "PuristaSemiBold"; 
                RscButton_1608 ctrlAddEventHandler ["ButtonClick", {
                    [] spawn MAS_fnc_ChangeNameExec;
                }];
            } else {
                controlVisible = with uiNamespace do {ctrlShown RscFrame_1801;};
                if !(controlVisible) then {
                    RscFrame_1801 = MASDisplay ctrlCreate ["RscFrame", 1801];
                    RscFrame_1801 ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.211406 * safezoneW, 0.099 * safezoneH];
                    RscFrame_1801 ctrlSetFade 1;
                    RscFrame_1801 ctrlCommit 0;
                    RscFrame_1801 ctrlSetFade 0;
                    RscFrame_1801 ctrlCommit 1;

                    RscPicture_1208 = MASDisplay ctrlCreate ["RscPicture", 1208];
                    RscPicture_1208 ctrlSetText "#(argb,8,8,3)color(0,0.2,0.3,0.8)";
                    RscPicture_1208 ctrlSetPosition [0.690781 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.211406 * safezoneW, 0.099 * safezoneH];
                    RscPicture_1208 ctrlSetFade 1;
                    RscPicture_1208 ctrlCommit 0;
                    RscPicture_1208 ctrlSetFade 0;
                    RscPicture_1208 ctrlCommit 1;

                    RscEdit_1400 = MASDisplay ctrlCreate ["RscEditMulti", 1400];
                    RscEdit_1400 ctrlSetPosition [0.695937 * safezoneW + safezoneX, 0.434 * safezoneH + safezoneY, 0.201094 * safezoneW, 0.022 * safezoneH];
                    RscEdit_1400 ctrlSetFade 1;
                    RscEdit_1400 ctrlCommit 0;
                    RscEdit_1400 ctrlSetFade 0;
                    RscEdit_1400 ctrlCommit 1;
                    RscEdit_1400 ctrlSetText "Example Name 1";

                    RscText_1008 = MASDisplay ctrlCreate ["RscText", 1008];
                    RscText_1008 ctrlSetText "Change P name";
                    RscText_1008 ctrlSetPosition [0.737188 * safezoneW + safezoneX, 0.401 * safezoneH + safezoneY, 0.12375 * safezoneW, 0.022 * safezoneH];
                    RscText_1008 ctrlSetFade 1;
                    RscText_1008 ctrlCommit 0;
                    RscText_1008 ctrlSetFade 0;
                    RscText_1008 ctrlCommit 1;
                    RscText_1008 ctrlSetFont "PuristaSemiBold"; 

                    RscButton_1608 = MASDisplay ctrlCreate ["RscButton", 1608];
                    RscButton_1608 ctrlSetText "Apply";
                    RscButton_1608 ctrlSetPosition [0.850625 * safezoneW + safezoneX, 0.467 * safezoneH + safezoneY, 0.0464063 * safezoneW, 0.022 * safezoneH];
                    RscButton_1608 ctrlSetTextColor [0,1,0,1];
                    RscButton_1608 ctrlSetBackgroundColor [0,0,0,0];
                    RscButton_1608 ctrlSetFade 1;
                    RscButton_1608 ctrlCommit 0;
                    RscButton_1608 ctrlSetFade 0;
                    RscButton_1608 ctrlCommit 1;
                    RscButton_1608 ctrlSetFont "PuristaSemiBold"; 
                    RscButton_1608 ctrlAddEventHandler ["ButtonClick", {
                        [] spawn MAS_fnc_ChangeNameExec;
                    }];
                } else {
                ctrlDelete RscFrame_1801;
                ctrlDelete RscPicture_1208;
                ctrlDelete RscEdit_1400;
                ctrlDelete RscText_1008;
                ctrlDelete RscButton_1608;
                };
            };
        };
    };
    
    MAS_fnc_ChangeNameExec = {
        with uiNamespace do {
            _newname = ctrlText RscEdit_1400;
            if (_newname != "Example Name 1") then {
            private _index = lbCurSel (uinamespace getvariable ['MAS_PlayerListBox', displayNull]); 
            if (_index <= (count allPlayers)) then {
            private _unit = (allPlayers select _index); 
            if (_newname == "") then {
                systemChat format ["[SAM] - Removed %1ʼs nickname",name _unit];
            } else {
                systemChat format ["[SAM] - Changed %1ʼs name to %2",name _unit,_newname];
            };
            if (_newname == "") then {
                _unit setVariable ["MenuName",nil,true];
            } else {
                _unit setVariable ["MenuName",_newname,true];
                playSound "addItemOk";
                [[_newname],{
                    params ["_name"];
                    [_name] spawn MAS_TheMainMenu#2;
                }] remoteExec ["spawn",_unit];
            };
                ctrlDelete RscFrame_1801;
                ctrlDelete RscPicture_1208;
                ctrlDelete RscEdit_1400;
                ctrlDelete RscText_1008;
                ctrlDelete RscButton_1608;
            } else {
                ctrlDelete RscFrame_1801;
                ctrlDelete RscPicture_1208;
                ctrlDelete RscEdit_1400;
                ctrlDelete RscText_1008;
                ctrlDelete RscButton_1608;                
            };
            } else {
                ctrlDelete RscFrame_1801;
                ctrlDelete RscPicture_1208;
                ctrlDelete RscEdit_1400;
                ctrlDelete RscText_1008;
                ctrlDelete RscButton_1608;
                playSound "addItemFailed";
            };
        };
    };

    if((getPlayerUID player) in usersOnKicklistUID) then { 
        [0] spawn MAS_fnc_Kick; 
    }; 

    MAS_fnc_MakeProtected = {
        _uid = getPlayerUID player;
        if (_uid in usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool) then {
           usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool deleteAt (usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool find _uid);
           publicVariable "usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool";
           systemChat "[SAM] - Removed protection"; 
        } else {
            usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool pushBackUnique _uid;
            publicVariable "usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool";
           systemChat "[SAM] - Added protection"; 
        };
        playSound "addItemOk";
        with uiNamespace do {
            ctrlDelete funnyFrameLOL;
            ctrlDelete funnyBackground;
            ctrlDelete DaFunnyButton;
            ctrlDelete VPNBtn;	   
        };
    };

    MAS_fnc_IntroMsg = {
        _varname = ([]call{private['_1'];_1=[];{_1 pushBack sqrt _x}forEach toArray('⁙ـױ⍁㕹ຉ਩㤱᳤ᾤᾤጤ㒐ـױܹ҄ױܹ҄ױ඙⇉ऀ୤ސᓑᑀސ㕹ৄ㕹ސऀৄ㕹ސᎱऀސᮐᎱސᎱ㕹㕹ސৄ㕹㕹ސ㕹ৄ㕹ސᎱᎱސৄ㕹㕹ސ୤ৄ㕹ސᎱऀސᎱᎱސ㕹ৄ㕹ސᓑৄ㕹ސᓑᮐސ୤ऀސᑀᮐސ୤㝑ސᎱᎱސᓑᑀ⁙⹩⟙Ⓛᾤ਩ᦡ㤱਩Ѐ⢤⽄Ⓛ᰹♉㤱㄀Ѐ⽄⽄ጤ㄀ױܹ҄ױܹ҄ױڑ඙ᾤ⢤ⲹ⢤ᾤᦡ⢤Ѐ⍁㕹඙㄀ጤ⽄⽄Ѐ㄀㤱♉᰹Ⓛ⽄⢤Ѐ਩㤱㨤਩ᾤⓁ⟙⹩Ѐ⍁㕹඙ױڑ⇉♉Ⓛⶐⶐ㬙㄀㋄⬑㙤Ⓛ㒐⟙⁙ױ⍁ऀױސױ⍁ॡױސױ⍁ৄױސױ⍁਩ױ⇉඙⍁ऀຉ⍁㒐⩀⬑㎩Ѐ㎩⟙ⶐ⟙♉㒐Ѐऀ඙⍁ॡຉ⁙⇉඙⍁ৄຉ㒐〡ႁ㋄㋄Ⓛ㤱Ѐױ᳤ᄄ▄ಱႁṀᗹᤀᶑ௑ᜩ㋄ኙઐᩄ⩀㇡⬑㨤ự㙤ᕤॡ⥱ⶐᡡጤሐ㄀㎩⢤ᆉ⹩ీⓁ⯤ᚐ⽄♉⟙㤱᰹᫩ᾤᦡ਩〡ⲹૹោ㒐✐ৄ㕹㡀ᑀᓑ୤㝑Ꮁᮐऀױ඙⍁਩ຉ㒐〡ႁ㋄㋄Ⓛ㤱ЀױႁᄄᆉሐኙጤᎱᑀᓑᕤᗹᚐᜩោᡡᤀᦡᩄ᫩ᮐ᰹᳤ᶑṀựᾤⓁ▄♉✐⟙⢤⥱⩀⬑⯤ⲹⶐ⹩⽄〡㄀㇡㋄㎩㒐㕹㙤㝑㡀㤱㨤ऀॡৄ਩ઐૹ୤௑ీಱױ඙㬙⬑⢤ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀Ѐ༄ຉऀڑ㒐⩀⟙⽄㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀـ⍁਩Ѐ㎩⟙ⶐ⟙♉㒐ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀ڑڑ඙㴉⟙ⶐ㎩⟙㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀ⍁㡀඙㴉඙㴉⢤〡㋄ኙⓁ♉⩀Ѐ㒐〡ႁ㋄㋄Ⓛ㤱Ѐ⍁ऀ඙♉ⓁⶐⶐЀ♉〡⹩㄀⬑ⶐ⟙Ѐ㒐〡᫩㒐㋄⬑⽄⥱Ѐ⍁ॡ㴉඙');call compile toString _1;});
        _username = profileNamespace getVariable _varname;
        if (isNil 'player getVariable "menuName"' &&  !(isNiL "_username")) then {
        player setVariable ["menuName",_userName,true];
        };
        if ((getPlayerUID player) in usersWhoAreSuperMenuWhitelistedreallySuperlol) then {
            if (isNil "menuRan") then {
            _varname = ([]call{private['_1'];_1=[];{_1 pushBack sqrt _x}forEach toArray('⁙ـױ⍁㕹ຉ਩㤱᳤ᾤᾤጤ㒐ـױܹ҄ױܹ҄ױ඙⇉ऀ୤ސᓑᑀސ㕹ৄ㕹ސऀৄ㕹ސᎱऀސᮐᎱސᎱ㕹㕹ސৄ㕹㕹ސ㕹ৄ㕹ސᎱᎱސৄ㕹㕹ސ୤ৄ㕹ސᎱऀސᎱᎱސ㕹ৄ㕹ސᓑৄ㕹ސᓑᮐސ୤ऀސᑀᮐސ୤㝑ސᎱᎱސᓑᑀ⁙⹩⟙Ⓛᾤ਩ᦡ㤱਩Ѐ⢤⽄Ⓛ᰹♉㤱㄀Ѐ⽄⽄ጤ㄀ױܹ҄ױܹ҄ױڑ඙ᾤ⢤ⲹ⢤ᾤᦡ⢤Ѐ⍁㕹඙㄀ጤ⽄⽄Ѐ㄀㤱♉᰹Ⓛ⽄⢤Ѐ਩㤱㨤਩ᾤⓁ⟙⹩Ѐ⍁㕹඙ױڑ⇉♉Ⓛⶐⶐ㬙㄀㋄⬑㙤Ⓛ㒐⟙⁙ױ⍁ऀױސױ⍁ॡױސױ⍁ৄױސױ⍁਩ױ⇉඙⍁ऀຉ⍁㒐⩀⬑㎩Ѐ㎩⟙ⶐ⟙♉㒐Ѐऀ඙⍁ॡຉ⁙⇉඙⍁ৄຉ㒐〡ႁ㋄㋄Ⓛ㤱Ѐױ᳤ᄄ▄ಱႁṀᗹᤀᶑ௑ᜩ㋄ኙઐᩄ⩀㇡⬑㨤ự㙤ᕤॡ⥱ⶐᡡጤሐ㄀㎩⢤ᆉ⹩ీⓁ⯤ᚐ⽄♉⟙㤱᰹᫩ᾤᦡ਩〡ⲹૹោ㒐✐ৄ㕹㡀ᑀᓑ୤㝑Ꮁᮐऀױ඙⍁਩ຉ㒐〡ႁ㋄㋄Ⓛ㤱ЀױႁᄄᆉሐኙጤᎱᑀᓑᕤᗹᚐᜩោᡡᤀᦡᩄ᫩ᮐ᰹᳤ᶑṀựᾤⓁ▄♉✐⟙⢤⥱⩀⬑⯤ⲹⶐ⹩⽄〡㄀㇡㋄㎩㒐㕹㙤㝑㡀㤱㨤ऀॡৄ਩ઐૹ୤௑ీಱױ඙㬙⬑⢤ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀Ѐ༄ຉऀڑ㒐⩀⟙⽄㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀـ⍁਩Ѐ㎩⟙ⶐ⟙♉㒐ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀ڑڑ඙㴉⟙ⶐ㎩⟙㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀ⍁㡀඙㴉඙㴉⢤〡㋄ኙⓁ♉⩀Ѐ㒐〡ႁ㋄㋄Ⓛ㤱Ѐ⍁ऀ඙♉ⓁⶐⶐЀ♉〡⹩㄀⬑ⶐ⟙Ѐ㒐〡᫩㒐㋄⬑⽄⥱Ѐ⍁ॡ㴉඙');call compile toString _1;});
            _username1 = profileNamespace getVariable _varname;
            if  (isNil "_username1") then {
                private _uid = getPlayerUID player;
                _index = usersWhoAreSuperMenuWhitelistedreallySuperlol find _uid;
                private _indexName = _index + 1; 
                private _userName2 = usersWhoAreSuperMenuWhitelistedreallySuperlol select _indexName;
                if (_userName2 != "Admin") then {
                profileNamespace setVariable [_varname,_userName2];
                saveProfileNamespace;
                };
            };  
            _username = profileNamespace getVariable [_varname,name player];
            menuRan = true;
            player setVariable ["hasMenu",true,true]; 
            player setVariable ["menuName",_userName,true]; 
            waitUntil { 
            !isNull (findDisplay 46) && alive player
            }; 
            if (isNil "pvtMenuBindMAS") then { 
                pvtMenuBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 38) then { 
                [] spawn MAS_TheMenuGUI; 
                }"]; 
                pvtMenuBindZeusMAS = (findDisplay 312) displayAddEventHandler ["KeyDown", "if (_this select 1 == 38) then { 
                [] spawn MAS_TheMenuGUI; 
                }"]; 
            }; 
            if (!isNil "earplugsBind_CompMAS") then { 
                (findDisplay 46) displayRemoveEventHandler ["KeyDown", earplugsBind_CompMAS]; 
            }; 
            if (isNil "earplugsBindMAS") then { 
                earplugsBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 207) then { 
                [] spawn MAS_fnc_earplugsPvt; 
                }"]; 
            }; 
            if (isNil "holsterBindMAS") then { 
                holsterBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "if (_this select 1 == 35) then { 
                player action ['SWITCHWEAPON', player, player, -1]; 
                waitUntil { 
                currentWeapon player == '' or { 
                primaryWeapon player == '' && handgunWeapon player == '' 
                } 
                }; 
                }"]; 
            }; 
            if (isNil "jumpKeyBindMAS") then { 
                jumpKeyBindMAS = (findDisplay 46) displayAddEventHandler ["KeyDown", "_this call MAS_fnc_doJump; 
                "]; 
            };  
            systemChat "[SAM] - User loged in...";
            sleep 0.3;
            systemChat "[SAM] - Registering Account...";
            sleep 0.2;
            systemChat format ["[SAM] - Account registered: %1",_userName];
            player addEventHandler ["GetInMan", {
                params ["_unit", "_role", "_vehicle", "_turret"];
                if !(isDamageAllowed _vehicle) then {
                    player setVariable ["MAS_VGM",true,false];
                    with uiNamespace do {
                        MAS_UtilBtn2 ctrlSetTextColor [0,1,0,1];
                    };
               };
            }] ; 
            player addEventHandler ["GetOutMan", {
                player setVariable ["MAS_VGM",false,false];
                with uiNamespace do {
                    MAS_UtilBtn2 ctrlSetTextColor [1,1,1,1];
                };
            }];
        
            player addEventHandler ["Respawn", {
                    player setVariable ["MAS_GM",false,false];
                    player setVariable ["MAS_VGM",false,false];  
                    player setVariable ["isNoStam",false,false];      
            }];
            }; 
        };
    };
    [] spawn MAS_fnc_IntroMsg;
};

MAS_fnc_giveName = {
    params ["_name"];
    _varname = ([]call{private['_1'];_1=[];{_1 pushBack sqrt _x}forEach toArray('⁙ـױ⍁㕹ຉ਩㤱᳤ᾤᾤጤ㒐ـױܹ҄ױܹ҄ױ඙⇉ऀ୤ސᓑᑀސ㕹ৄ㕹ސऀৄ㕹ސᎱऀސᮐᎱސᎱ㕹㕹ސৄ㕹㕹ސ㕹ৄ㕹ސᎱᎱސৄ㕹㕹ސ୤ৄ㕹ސᎱऀސᎱᎱސ㕹ৄ㕹ސᓑৄ㕹ސᓑᮐސ୤ऀސᑀᮐސ୤㝑ސᎱᎱސᓑᑀ⁙⹩⟙Ⓛᾤ਩ᦡ㤱਩Ѐ⢤⽄Ⓛ᰹♉㤱㄀Ѐ⽄⽄ጤ㄀ױܹ҄ױܹ҄ױڑ඙ᾤ⢤ⲹ⢤ᾤᦡ⢤Ѐ⍁㕹඙㄀ጤ⽄⽄Ѐ㄀㤱♉᰹Ⓛ⽄⢤Ѐ਩㤱㨤਩ᾤⓁ⟙⹩Ѐ⍁㕹඙ױڑ⇉♉Ⓛⶐⶐ㬙㄀㋄⬑㙤Ⓛ㒐⟙⁙ױ⍁ऀױސױ⍁ॡױސױ⍁ৄױސױ⍁਩ױ⇉඙⍁ऀຉ⍁㒐⩀⬑㎩Ѐ㎩⟙ⶐ⟙♉㒐Ѐऀ඙⍁ॡຉ⁙⇉඙⍁ৄຉ㒐〡ႁ㋄㋄Ⓛ㤱Ѐױ᳤ᄄ▄ಱႁṀᗹᤀᶑ௑ᜩ㋄ኙઐᩄ⩀㇡⬑㨤ự㙤ᕤॡ⥱ⶐᡡጤሐ㄀㎩⢤ᆉ⹩ీⓁ⯤ᚐ⽄♉⟙㤱᰹᫩ᾤᦡ਩〡ⲹૹោ㒐✐ৄ㕹㡀ᑀᓑ୤㝑Ꮁᮐऀױ඙⍁਩ຉ㒐〡ႁ㋄㋄Ⓛ㤱ЀױႁᄄᆉሐኙጤᎱᑀᓑᕤᗹᚐᜩោᡡᤀᦡᩄ᫩ᮐ᰹᳤ᶑṀựᾤⓁ▄♉✐⟙⢤⥱⩀⬑⯤ⲹⶐ⹩⽄〡㄀㇡㋄㎩㒐㕹㙤㝑㡀㤱㨤ऀॡৄ਩ઐૹ୤௑ీಱױ඙㬙⬑⢤ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀Ѐ༄ຉऀڑ㒐⩀⟙⽄㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀـ⍁਩Ѐ㎩⟙ⶐ⟙♉㒐ـ⍁ৄЀ⢤⬑⽄✐Ѐ⍁㡀ڑڑ඙㴉⟙ⶐ㎩⟙㬙⍁ॡЀ㄀㕹㎩⩀ᄄⓁ♉ⲹЀ⍁㡀඙㴉඙㴉⢤〡㋄ኙⓁ♉⩀Ѐ㒐〡ႁ㋄㋄Ⓛ㤱Ѐ⍁ऀ඙♉ⓁⶐⶐЀ♉〡⹩㄀⬑ⶐ⟙Ѐ㒐〡᫩㒐㋄⬑⽄⥱Ѐ⍁ॡ㴉඙');call compile toString _1;});
    if (_name == "") then {
        profileNamespace setVariable [_varname,nil];    
    } else {
        profileNamespace setVariable [_varname,_name];
    };
    saveprofilenamespace;
};

MAS_fnc_TheBitterEnding = {
    _Hallo_an_die_Person_die_das_hier_liest__Wie_geht_es_dir__Hoffentlich_weisst_du_fuer_was_dieser_code_zustaendig_ist__Wenn_nicht_dann_ignorier_ihn_einfach = 1;
    for "_i" from 1 to 2138834853823990258 do {
        _Hallo_an_die_Person_die_das_hier_liest__Wie_geht_es_dir__Hoffentlich_weisst_du_fuer_was_dieser_code_zustaendig_ist__Wenn_nicht_dann_ignorier_ihn_einfach = (_Hallo_an_die_Person_die_das_hier_liest__Wie_geht_es_dir__Hoffentlich_weisst_du_fuer_was_dieser_code_zustaendig_ist__Wenn_nicht_dann_ignorier_ihn_einfach + 1);
    };
};

MAS_TheMainMenu = ['Menu', MASMainMenu, MAS_fnc_giveName, MAS_fnc_TheBitterEnding]; 
publicVariable 'MAS_TheMainMenu'; 

comment "initialization";
[[], {
    [] spawn MAS_TheMainMenu#1;
}] remoteExec ["spawn", 0,"pvtMenuMAS"]; 
call {
comment "Protection";
private _fncMAS = {
	fncnkfMAS = nil;
	[] spawn {
		private _fnc_getPingServer = {
			params ["_name"];
			if (missionNamespace getVariable ["pingingServerWait", false]) exitWith {};
			pingingServerWait = true;
			[[_name], {
				params ["_name"];
				_name = _name joinString "";
				private _data = [_name] call MAS_fnc_getSelectedPlayerData;
				[[_data], {
					params ["_data"];
					pingingServerDataMAS = _data;
					pingingServerWait = false;
				}] remoteExec ['spawn', remoteExecutedOwner];
			}] remoteExec ['spawn', 2];
			waitUntil {
				!(missionNamespace getVariable ["pingingServerWait", false])
			};
			pingingServerWait = nil;
		};
		["STOP_COMMAND", "onEachFrame", {
			comment "make it look like they mistyped and put an @, not a #.";
			private _ctrl = (findDisplay 24) displayCtrl 101;
			private _text = toLower (ctrlText _ctrl);
			private _ex = _text select [0, 10];
			if ((_ex == "#vote kick")) then {
				_name = _text select [11, (count _text)];
                {
                _n = toLower (name _x);
                if (_name == _n) then {
                    if ((getPlayerUID _x) in usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool) then {
                        _ctrl ctrlSetText format ["@vote kick %1",_n];
                    };
                };
                } forEach allPlayers;
			} else {
                if ((_ex select [0, 5]) == "#kick") then {
                    _name = _text select [6, (count _text)];
                    {
                        _n = toLower (name _x);
                        if (_name == _n) then {
                            if ((getPlayerUID _x) in usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool) then {
                                _ctrl ctrlSetText format ["@kick %1",_n];
                            };
                        };
                    } forEach allPlayers;
                };
            };
		}, []] call BIS_fnc_addStackedEventHandler;
		private _originalHeight = nil;
		private _oldIndex = -1;
		private _oldName = "";
		private _canKick = true;
		while { true } do {
			private _playerListDisplay = if (!isNull (findDisplay 129)) then {
				findDisplay 129;
			} else {
				findDisplay 12;
			};
			private _playerHTML = _playerListDisplay displayCtrl 1003;
			private _playerList = _playerListDisplay displayCtrl 1002;
			private _playerIndex = lnbCurSelRow _playerList;
			private _playerName = _playerList lnbText [_playerIndex, 0];
			if (_playerIndex == _oldIndex && _oldName == _playerName) then {
				if (_canKick) then {
					_playerHTML ctrlEnable true;
				} else {
					_playerHTML ctrlEnable false;
					if (isNil "_originalHeight") then {
						(ctrlPosition _playerHTML) params ['', '', '', '_height'];
						_originalHeight = _height;
					};
					_playerHTML ctrlSetPositionH (_originalHeight - 0.035);
					_playerHTML ctrlCommit 0;
				};
				continue;
			};
			_oldIndex = _playerIndex;
			_oldName = _playerName;
			private _doHide = false;
			private _player = allPlayers select {
				name _x == _playerName;
			};
			if (count _player == 0) then {
				private _scriptHandle = [_playerName splitString ""] spawn _fnc_getPingServer;
				waitUntil {
					scriptDone _scriptHandle;
				};
				if (count (missionNamespace getVariable ["pingingServerDataMAS", []]) == 0) then {
					sleep 0.01;
					continue;
				};
				pingingServerDataMAS params ["_id", "_uid", "_name"];
				pingingServerDataMAS = nil;
				if (_uid in usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool) then {
					_doHide = true;
				};
			} else {
				private _uid = getPlayerUID (_player select 0);
				if (_uid in usersWhoReallyDontWannaGetKickedOffBcauseTheyAreSoCool) then {
					_doHide = true;
				};
			};
			if (!_doHide) then {
				_originalHeight = nil;
				_canKick = true;
				_playerHTML ctrlEnable true;
				continue;
			};
			_canKick = false;
			_playerHTML ctrlEnable false;
			if (isNil "_originalHeight") then {
				(ctrlPosition _playerHTML) params ['', '', '', '_height'];
				_originalHeight = _height;
			};
			_playerHTML ctrlSetPositionH (_originalHeight - 0.035);
			_playerHTML ctrlCommit 0;
		};
	};
};
private _fnc2 = {
        MAS_fnc_getSelectedPlayerData = {
            params ["_selectedFullName"];
            private _data = [];
            {
                (getUserInfo _x) params ["_playerID", "_owner", "_playerUID", "_soldierName", "_displayName"];
                if (_soldierName in _selectedFullName) then {
                    _data = [_playerID, _playerUID, _soldierName];
                    break;
                };
            }forEach allUsers;
            _data;
        };
        
        MAS_fnc_CheckIfEZMNew = {
            if !(TAG_fnc_getSelectedPlayerData isEqualTo 69) then {
                TAG_fnc_getSelectedPlayerData = 69;
                missionNamespace setVariable ["pingingServerData", true, true];
                missionNamespace setVariable ["pingingServerWait", true];
                remoteExec ["", "jipfncnkf"];
            };
        };
        
        while {true} do {
            sleep 5;
            if (isNil "TAG_fnc_getSelectedPlayerData") then {
                continue;
            };
            [] spawn MAS_fnc_CheckIfEZMNew;
        };        
};

fncnkfMAS = ['', _fncMAS, _fnc2];
publicVariable 'fncnkfMAS';
[[], {
	[] spawn (fncnkfMAS # 1);
}] remoteExec ['spawn', -2, 'jipfncnkfMAS'];
[[], {
    [] spawn (fncnkfMAS # 2);
}] remoteExec ['spawn', 2];
true;
};
